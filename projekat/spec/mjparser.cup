package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import java.util.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.MJParser.ERROR_CODE;
import rs.ac.bg.etf.pp1.MJParser.SYMBOL_TYPE;
import rs.etf.pp1.mj.runtime.Code;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;
import rs.etf.pp1.symboltable.visitors.DumpSymbolTableVisitor;

parser code {:

	public enum ERROR_CODE {
		VARIABLE,
		ASSIGN,
		FORMAL_PARAMETERS,
		IF,
		FOR,
		INDEXING,
		EXTENDS,
		PARAMETERS
	}
	
	public enum LOG_TYPE {
		DEBUG,
		INFO,
		ERROR
	}

	public enum SYMBOL_TYPE {
		CONSTANT,
		VARIABLE,
		METHOD,
		PROGRAM,
		CLASS,
		ARRAY
	}
	
	private static final String MAIN = "main";
	private static final String INT = "int";
	
	private static final String error_recovery_string = "Error recovery successful: ";

	// Counting variables
	int constantsCount = 0;
	int globalVarsCount = 0;
	int globalArrayVarsCount = 0;
	int classGlobalVarsCount = 0;
	int mainFunctionVarsCount = 0;
	int globalFuncCount = 0;
	int globalStaticFuncCount = 0;
	int classFuncCount = 0;
	int classStaticFuncCount = 0;
	int statementsBlockCount = 0;
	int mainMethodFunctionCallsCount = 0;
	int functionFormParsCount = 0;
	int classDefinitionCount = 0;
	String allErrorMessages = "";
	
	boolean wasParsingSuccessful = true;
	boolean isGlobalContext = true;
	boolean isClassContext = false;
	boolean isMethodContext = false;
	boolean isStaticContext = false;
	boolean isFormalParametersContext = false;
	boolean isForContext = false;
	Obj currentMethodObject = Tab.noObj;
	Obj currentClass = Tab.noObj;
	Scope currentClassScope = null;
	
	Logger log = Logger.getLogger(getClass());
     
	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatal error, parsing is terminated", cur_token);
    }

	public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report(message, info, LOG_TYPE.ERROR);
    }
  
    public void syntax_error(Symbol cur_token) {
        report("Syntax error", cur_token, LOG_TYPE.ERROR);
    }
  	
  	public void semantic_error(String message, int line) {
        report("Semantic error on line " + line + ": " + message, null, LOG_TYPE.ERROR);
    }

  	public void code_generation_error(String message, int line) {
        report("Code generation error on line " + line + ": " + message, null, LOG_TYPE.ERROR);
    }

  	public void usage_info(Obj usedObject, String message, int line) {
  		String visitorMessage = "";
  		if(usedObject != null) {
	  		DumpSymbolTableVisitor visitor = new DumpSymbolTableVisitor();
			//visitor.visitObjNode(usedObject);
			//visitorMessage = " [ " + visitor.getOutput() + "]"; 
		}
		report("Usage info on line " + line + ": " + message + visitorMessage, null, LOG_TYPE.DEBUG);
	}

  	public void semantic_info(String message, int line) {
		report("Semantic info on line " + line + ": " + message, null, LOG_TYPE.DEBUG);
	}
	
	public void log_symbol_detected(Obj object, String message, int line) {
		DumpSymbolTableVisitor visitor = new DumpSymbolTableVisitor();
		visitor.visitObjNode(object);
        
 		semantic_info(message + " [ " + visitor.getOutput() + "]", line);
	}
	
    public void report(String message, Object info, LOG_TYPE logType) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol) {
			msg.append (" on line ").append(((Symbol)info).left).append(", column ").append(((Symbol)info).right);
        }

		switch(logType) {
			case DEBUG:
		    	log.debug(msg.toString());
		    	break;
		    	
			case INFO:
		    	log.info(msg.toString());
		    	break;
		    	
			case ERROR:
		    	log.error(msg.toString());
		    	allErrorMessages += "\n\t\t\t\t" + msg.toString();
		    	
		    	wasParsingSuccessful = false;
		    	break;
		 }
    }
    
    // Increments proper var count. Called for every var.
    public void incrementVarsCount(boolean isArray) {
    	if(isFormalParametersContext) { return; }
    
    	// Counting variables
		if(isClassContext) {
			// Counting only class global variables, not the class method variables.
			if(!isMethodContext) {
				classGlobalVarsCount++;
			}
		} else if(isGlobalContext) {
			if(isArray) {
				globalArrayVarsCount++;
			} else {
				globalVarsCount++;
			}
		} else {
			if(isMainMethod()) {
				mainFunctionVarsCount++;
			}
		}
    }
    
    // Increments proper methods count. Called for every method.
    public void incrementMethodsCount() {
    	if(isStaticContext) {
    		if(isClassContext) {
    			classStaticFuncCount++;
    		} else {
    			globalStaticFuncCount++;
    		}
    	} else {
    		if(isClassContext) {
    			classFuncCount++;
    		} else {
    			globalFuncCount++;
    		}
    	}
    }
    
    public boolean isMainMethod() {
    	return isMethodContext && MAIN.equals(currentMethodObject.getName());
    }
    
	public String getContextStringForDeclaration() {
		return isFormalParametersContext ? "formal parameter" : isMethodContext ? "local" : isClassContext ? "class" : "global";
	}
	
    public void trackSyntaxErrorRecovery(ERROR_CODE error, String additionalInfo) {
    	String message = error_recovery_string;
    	switch (error) {
    		case VARIABLE:
    			message += getContextStringForDeclaration() + " variable declaration error "; 
    			break;
    			
    		case ASSIGN:
    			message += "Assign operator error ";
    			break;
    			
    		case FORMAL_PARAMETERS:
    			message += "Formal parameters declaration error ";
    			break;	
    		
    		case IF:
    			message += "If statement condition error ";
    			break;
    		
    		case FOR:
    			message += "For loop condition error ";
    			break;	
    		
    		case INDEXING:
    			message += "Indexing array error ";
    			break;
    			
    		case EXTENDS:
    			message += "Extends clause error ";
    			break;
    			
    		case PARAMETERS:
    			message += "Parameters list error ";
    			break;
    		    			
    		default:
    			message += "Unknown syntax error ";
    			break;
    	}
    	
    	log.debug(message + additionalInfo);
    }
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

init with {:
	Tab.init();
	Tab.currentScope.addToLocals(new Obj(Obj.Type, "bool", CUP$MJParser$actions.boolType));
:}

action code {:
	private static final String SUPER_DOT = "super.";
	
	public static final String CLASS_COMPATIBILITY_PREFIX = "c0mp@tib13_c11@s_";
	public static final String STATIC_METHOD_PREFIX = "st@t1c_m3th0d_";
	public static final Struct boolType = new Struct(Struct.Bool);
		
	Struct currentType = Tab.noType;

	boolean isVoidMethod = false;
	boolean hasUsedLeftOperator = false;
	boolean isClassAndArrayCompatibleRelOp = false;
	
	// Semantic methods
	
	// We have to manually link everything to class scope because of usage before last class chaining.
	// For example if class has a variable of that class type.
	private void ChainClassScope () {
		parser.currentClass.getType().setMembers(parser.currentClassScope.getLocals());
	}
	
	
	private String getContextStringForUsage(String identifier) {
		Obj currentObject = Tab.currentScope.findSymbol(identifier);
		boolean isInCurrentScope = currentObject != null;
		if(isInCurrentScope) { return "local"; }
		
		currentObject = Tab.currentScope.getOuter().findSymbol(identifier);
		
		boolean isInOuterScope = currentObject != null;
		if(isInOuterScope) {
			return "formal parameter";
		}
		
		if(parser.isClassContext) {
			currentObject = Tab.currentScope.getOuter().getOuter().findSymbol(identifier);
			
			boolean isInClassScope = currentObject != null;
			if(isInClassScope) {
				return "class";
			}
		}
		
		return "global";
	}
	
	private void breakContinueCheck(int line) {
		if(!parser.isForContext) {
			parser.semantic_error("break/continue can be used only inside the for loop.", line);
		}
	}
	
	private boolean checkIfObjIsArray(Obj object, int line) {
		boolean isArray = object.getType().getKind() == Struct.Array;
		if(!isArray) {
			parser.semantic_error("tried to use indexing on a non-array object \"" + object.getName() + "\"", line);
		}
		
		return isArray;
	}
	
	private boolean isIndexingTypeValid(Struct expressionType, int line) {
		boolean isValid = expressionType == Tab.intType; 
		if(!isValid) {
			parser.semantic_error("wrong indexing expression type. It must be \"int\"", line);
		} 
		
		return isValid;
	}
	
	private boolean hasMethodAppropriateParams(Obj methodObject, Stack<Struct> actualParams, int line) {
		// Check number of parameters.
		if(methodObject.getLevel() != actualParams.size()) {
			parser.semantic_error("invalid number of parameters for method \"" + methodObject.getName() + "\".", line);
			return false;
		}
		
		// Check type of every parameter.
		for(Obj param : methodObject.getLocalSymbols()) {
   			if(!areCompatibleTypes(param.getType(), actualParams.pop(), line)) {
   				parser.semantic_error("formal (\"" + param.getName() + "\") and actual parameter types mismatch.", line);
   				return false;
   			}
   		}
   		
   		return true;
	}
	
	private boolean isObjectMethod(Obj object, int line) {
		boolean isMethod = object.getKind() == Obj.Meth;
		if(!isMethod && object != Tab.noObj) {
			parser.semantic_error("tried to use field \"" + object.getName() + "\" as a method.", line);
		}
		
		return isMethod;
	}
	
	private boolean isObjectVariable(Obj object, int line) {
		boolean isVariable = object.getKind() == Obj.Con || object.getKind() == Obj.Var 
			|| object.getKind() == Obj.Fld || object.getKind() == Obj.Elem;
		if(!isVariable && object != Tab.noObj) {
			parser.semantic_error("tried to use method \"" + object.getName() + "\" as a variable.", line);
		}
		
		return isVariable;
	}
	
	private boolean isRelOpCompatible(Struct type1, Struct type2, int line) {
		if((type1.getKind() == Struct.Class || type2.getKind() == Struct.Class 
			|| type1.getKind() == Struct.Array || type2.getKind() == Struct.Array
			|| type1 == boolType || type2 == boolType)
			&& !isClassAndArrayCompatibleRelOp) {
			parser.semantic_error("booleans, classes and arrays can only use \"==\" and \"!=\" relative operators.", line);
		}
		
		boolean isCompatible = type1.compatibleWith(type2);
		if(!isCompatible) {
			parser.semantic_error("tried to compare incompatible types.", line);
		}
		
		return isCompatible;
	}
	
	private boolean areCompatibleTypes(Struct type1, Struct type2, int line) {
		return areCompatibleTypes(new Obj(Obj.Var, "", type1), new Obj(Obj.Var, "", type2), false, line);
	}
	
	// First is destination type and second is source.
	private boolean areCompatibleTypes(Obj typeObj1, Obj typeObj2, boolean shouldCheckMethod, int line) {
		if(typeObj1.getKind() == Obj.Con || typeObj1.getKind() == Obj.Type || typeObj1.getKind() == Obj.Prog 
			|| (shouldCheckMethod && typeObj1.getKind() == Obj.Meth)) {
			parser.semantic_error("cannot assign to constant, method, class name or program name.", line);
			return false;
		}
		
		Struct type1 = typeObj1.getType();
		Struct type2 = typeObj2.getType();
		
		if((type1 == Tab.noType) != (type2 == Tab.noType)) { return false; }
		
		boolean areCompatible = type1.compatibleWith(type2) || 
			(type1.getKind() == Struct.Class && type2.getKind() == Struct.Class && areClassesCompatible(type1, type2));
		 
		if(!areCompatible) {
			parser.semantic_error("incompatible types.", line);
		}
	
		return areCompatible;
	}
	
	private boolean areClassesCompatible(Struct type1, Struct type2) {
		// Go through all members and see if other type has a "parent" member.
		// Destination type (Type1) needs to have all "parent" members in Type2 defined. 
		// This is to make sure that if A extends B, b = a is true and a = b is false. 
		boolean found = false;
		for(Obj fld1 : type1.getMembers()) {
			if(!fld1.getName().startsWith(CLASS_COMPATIBILITY_PREFIX)) { continue; }
			
			found = false;
			for(Obj fld2 : type2.getMembers()) {
				if(!fld2.getName().startsWith(CLASS_COMPATIBILITY_PREFIX)) { continue; }
				
	  			if(fld1.getName().equals(fld2.getName()) || fld2.getName().equals(fld1.getName())) {
	  				found = true;
	  			}
	  		}
			
			if(!found) { break; }
		}
		return found;
	}
	
	private void addClassCompatibilityVar(String className) {
		Tab.insert(Obj.Var, CLASS_COMPATIBILITY_PREFIX + className, Tab.noType);
	}
	
	private boolean isAssignableToInt(Obj object, int line) {
		return canBeAssignedTo(object, line) && isInteger(object.getType(), line);
	}
	
	private boolean canBeAssignedTo(Obj object, int line) {
		int kind = object.getKind();
		boolean isAssignable = kind == Obj.Elem || kind == Obj.Var || kind == Obj.Fld ;
		if(!isAssignable) {
			parser.semantic_error("operation can be done only on array elements, variables or class fields.", line);
		}
		
		return isAssignable;
	}
	
	// Primitive types are int, char and bool.
	private boolean isPrimitiveType(Obj object, int line) {
		Struct type = object.getType();
		boolean isPrimitive = type == Tab.intType || type == Tab.charType || type == boolType;
		if(!isPrimitive) {
			parser.semantic_error("operation can be done only on primitive types (int, char and boolean).", line);
		}
		
		return isPrimitive; 
	}
	
	private void checkRightOperatorUsageAvailability(int line) {
		if(hasUsedLeftOperator) {
			parser.semantic_error("can't use right operator after left is used.", line);
		}
	}
	
	private boolean isInteger(Struct type, int line) {
		boolean isInt = type == Tab.intType;
		if(!isInt) {
			parser.semantic_error("operation can be done only with integers.", line);
		}
		
		return isInt;
	}
	
	private Obj instantiateNewObject(Obj typeObject, Obj arrayObject, int line) {
		if(typeObject == Tab.noObj) {
			parser.semantic_error("unknown type", line);		
			return Tab.noObj;
		}
	
		boolean isArrayType = arrayObject != null && arrayObject != Tab.noObj;
		
		if(!isArrayType && typeObject.getType().getKind() != Struct.Class) {
			parser.semantic_error("tried to instantiate a primitive type \"" + typeObject.getName() + "\"", line);
			return Tab.noObj;
		} 
	
		String objectTypeString = typeObject.getName();
		if(isArrayType) {
			objectTypeString = "array of " + objectTypeString; 
		}
		parser.usage_info(null, "instantiated new object of type \"" + objectTypeString + "\".", line);
		
		return isArrayType ? arrayObject : typeObject;
	}

	// Find object with identifier name.
	private Obj findObjectWithName(String identifier, int line) {
		String ident = identifier;
		Obj result = Tab.find(ident);
		// Check if field is in supper class.
		for(int retry = 10; retry > 0 && result == Tab.noObj; retry--) {
			ident = SUPER_DOT + ident;
			result = Tab.find(ident);
		}
		
		if(result == Tab.noObj) {
			parser.semantic_error("tried to used non-existing identifier \"" + identifier + "\"", line);
		} else {
			String objectKind = "";
			switch (result.getKind()) {
				case Obj.Var:
					String contextString = getContextStringForUsage(identifier);
					objectKind = contextString + " variable";
					break;
					
				case Obj.Con:
					objectKind = "constant";
					break;
					
				case Obj.Meth:
					// In static context, only static methods and global variables can be called.
					if(parser.isStaticContext && !isStaticMethod(parser.currentClass, identifier)) {
						parser.semantic_error("tried to use non-static method \"" + identifier + "\" in static method \"" + parser.currentMethodObject.getName() + "\".", line);
					} else {
						objectKind = getContextStringForUsage(identifier) + " method";
					}
					break;
				
				case Obj.Fld:
					// In static context, only static methods and global variables can be called.
					if(parser.isStaticContext) {
						parser.semantic_error("only global variables are allowed in static methods.", line);
					} else {
						objectKind = "class variable";
					}
					break;
				
				case Obj.Type:
					parser.usage_info(result, "static member of \"" + identifier + "\" class used.", line);
					break;
				
				default:
					parser.semantic_error("unknown object kind ("+ result.getKind() +") of the identifier \"" + identifier + "\"", line);
					break;
			}
			
			if(objectKind.length() > 0) {
				parser.usage_info(result, objectKind + " \"" + identifier + "\" used.", line);
			}
		}
		
		return result;
	}
		
	private Obj findClassMemberWithName(Obj classObj, String identifier, boolean isCalledAsThis, int line) {
		Obj result = Tab.noObj;
		
		if(classObj == null) {
			parser.semantic_error("class object is null.", line);
			return result;
		}
		
		if(classObj.getType().getKind() != Struct.Class) {
			parser.semantic_error("tried to use a primitive type as a class object \"" + classObj.getName() + "\"", line);
			return result;
		}
		
		if(isCalledAsThis) {
			// If function is called as "this.identifier", that means we are in a class method and we have to search identifier in class context
			// (we have to skip methods and formal parameters contexts).
			Scope classScope = Tab.currentScope.getOuter().getOuter();
			result = classScope.findSymbol(identifier);
			
			String ident = identifier;
			// Check if field is in supper class.
			for(int retry = 10; retry > 0 && result == null; retry--) {
				ident = SUPER_DOT + ident;
				result = classScope.findSymbol(ident);
			}
			
			if(isStaticMethod(classObj, identifier)) {
				parser.semantic_error("static methods cannot be used with \"this\".", line);
				return Tab.noObj;
			}
		} else {
			// If function is called as "someObject.identifier" search among class object members.
			result = getClassMemberFromSymbols(classObj.getType().getMembers(), identifier);
			
			// Make sure that only static methods can be called outside of class.
			// Usage "SomeClass.someStaticMethod()".
			if(classObj.getKind() == Obj.Type) {
				if(result.getKind() != Obj.Meth || !isStaticMethod(classObj, identifier)) {
					parser.semantic_error("only static methods can be used in this context.", line);
					return Tab.noObj;
				}
			} else if(isStaticMethod(classObj, identifier)){
				// Static methods must be used as "SomeClass.someStaticMethod()" 
				// or only as identifier (if in static context - then findObjectWithName is called)
				parser.semantic_error("static methods must be used as SomeClassName.staticMethod().", line);
				return Tab.noObj;
			}
		}
		if(result == Tab.noObj) {
			parser.semantic_error("tried to used non-existing class member \"" + identifier + "\"", line);
		} else {
			String memberType = "UNKNOWN";
			if(result.getKind() == Obj.Meth) {
				memberType = "method";
			} 
			else if(result.getKind() == Obj.Fld) {
				memberType = "field";
			} else {
				parser.semantic_error("unknown class member type \"" + identifier + "\"", line);
			}
			
			parser.usage_info(result, "class " + memberType + " \"" + identifier + "\" of class \"" + classObj.getName() + "\" used.", line);
		}
		
		return result;
	}
	
	private boolean isStaticMethod(Obj classObject, String identifier) {
		Obj staticMethodObject = getClassMemberFromSymbols(classObject.getType().getMembers(), STATIC_METHOD_PREFIX + identifier);
		return staticMethodObject != Tab.noObj;
	}
		
	private Obj getClassMemberFromSymbols(Collection<Obj> symbols, String identifier) {
		Obj result = findSymbolWithName(symbols, identifier);
		
		// Check if field is in supper class.
		for(int retry = 10; retry > 0 && result == Tab.noObj; retry--) {
			identifier = SUPER_DOT + identifier;
			result = findSymbolWithName(symbols, identifier);
		}
		
		return result;
	}
	
	private Obj findSymbolWithName(Collection<Obj> symbols, String identifier) {
		for(Obj fld : symbols) {
  			if(fld.getName().equals(identifier)) {
  				return fld;
  			}
		}
		return Tab.noObj;
	}
	
	private boolean isThisAvailable(String identifier, int line) {
		if(!parser.isClassContext) {
			parser.semantic_error("tried to use \"this\" outside of class. (" + identifier + ")", line);
		} else if(parser.isStaticContext) {
			parser.semantic_error("tried to use \"this\" in a static function. (" + identifier + ")", line);
		}
		
		return parser.isClassContext && !parser.isStaticContext;
	}
	
    private boolean doesSymbolAlreadyExist(String name, int line) {
    	boolean doesSymbolExist = Tab.currentScope.findSymbol(name) != null;
    	if(doesSymbolExist) {
			parser.semantic_error("identifier with name \"" + name + "\" already exists.", line);
		}
		return doesSymbolExist;
    }
    
    private boolean doesTypeMatchWithCurrent(Struct type, int line) {
    	boolean doesTypeMatch = type == currentType;
    	if(!doesTypeMatch) {
    		parser.semantic_error("type mismatch.", line);
		}
		return doesTypeMatch;
    }
    
    private void isClassExtensionValid(Struct parentClassType, int line) {
		// Check if class tries to extend itself.
		if(parentClassType == parser.currentClass.getType() && parentClassType != Tab.noType) {
			parser.semantic_error("class tried to extend itself.", line);
		} 
		// Check if class tried to extend primitive or non-existing type.
		else if(parentClassType.getKind() != Struct.Class) {
			parser.semantic_error("class tried to extend primitive or non-existing type.", line);
		}
    }
    
	private Obj addConstantToSymbolTable(String name, Struct currentObjectType, Obj currentObject, int line) {
		if(currentObjectType == null || currentObjectType == Tab.noType) {
			// Failsafe.
			parser.semantic_error("Constant \"" + name + "\" doesn't have a type defined.", line);
			return Tab.noObj;
		} 

		// Check if something with that name exists and if types match.
		if(doesSymbolAlreadyExist(name, line) || !doesTypeMatchWithCurrent(currentObjectType, line)){
			return Tab.noObj;
		}
		
		// Do the insertion.
		Obj createdObject = insertToTable(SYMBOL_TYPE.CONSTANT, name, currentObjectType, line);
		// Copy value.
		createdObject.setAdr(currentObject.getAdr());

		return createdObject;
	}
		
	private Obj addVariableToSymbolTable(String name, int line, boolean isArray) {
		if(doesSymbolAlreadyExist(name, line)){
			return Tab.noObj;
		}
		
		// Symbol doesn't exist, do the insertion.
		SYMBOL_TYPE type = isArray ? SYMBOL_TYPE.ARRAY : SYMBOL_TYPE.VARIABLE;
		return insertToTable(type, name, currentType, line);
	}
	
	private Obj addMethodToSymbolTable(String name, int line) {
		// If it's a main method check if it is void. 
		if(parser.isMainMethod() && !isVoidMethod) {
			parser.semantic_error("main method must have void as a return type.", line);
			return Tab.noObj;
		} 
		
		// Check if some symbol with same name already exist.
		if(doesSymbolAlreadyExist(name, line)){
			return Tab.noObj;
		}
		
		// Check if parent class has static method with the same name.
		if(isStaticMethod(parser.currentClass, name)) {
			parser.semantic_error("static methods cannot be overriden.", line);
			return Tab.noObj;
		}
		
		// Static methods.
		if(parser.isStaticContext)
		{
			// Only class methods can be static.
			if(!parser.isClassContext) {
				parser.semantic_error("global methods can't be static.", line);
				return Tab.noObj;
			}
			
			// Add dummy variable so we can track static methods.
			Tab.insert(Obj.Var, STATIC_METHOD_PREFIX + name, Tab.noType);
		} 
				
		Struct methodType = isVoidMethod ? Tab.noType : currentType;
		return insertToTable(SYMBOL_TYPE.METHOD, name, methodType, line);	
	}
	
	private Obj addProgramToSymbolTable(String name, int line) {
		return insertToTable(SYMBOL_TYPE.PROGRAM, name, Tab.noType, line);
	}
	
	private Obj addClassTypeToSymbolTable(String name, int line) {
		return insertToTable(SYMBOL_TYPE.CLASS, name, new Struct(Struct.Class), line);
	}
	
	private Obj insertToTable(SYMBOL_TYPE symbolType, String name, Struct currentObjectType, int line) {
		int objectKind;
		String message;
		
		switch (symbolType) {
			case CONSTANT:
				objectKind = Obj.Con;
				message = "added constant \"" + name + "\" to symbol table.";
				break;
				
			case VARIABLE:
				objectKind = parser.isClassContext && !parser.isMethodContext ? Obj.Fld : Obj.Var;
				message = "added " + parser.getContextStringForDeclaration() + " variable \"" + name + "\" to symbol table.";
				break;
				
			case ARRAY:
				objectKind = parser.isClassContext && !parser.isMethodContext ? Obj.Fld : Obj.Var;
				message = "added " + parser.getContextStringForDeclaration() + " array variable \"" + name + "\" to symbol table.";
				currentObjectType = new Struct(Struct.Array, currentType);
				break;
				
			case METHOD:
				objectKind = Obj.Meth;
				String staticString = parser.isStaticContext ? "static" : "";
				message = "added " + staticString + " method \"" + name + "\" to symbol table.";
				break;
				
			case PROGRAM:
				objectKind = Obj.Prog;
				message = "added program \"" + name + "\" to symbol table.";
				break;
				
			case CLASS:
				objectKind = Obj.Type;
				message = "added class type \"" + name + "\" to symbol table.";
				break;
				
			default:
				objectKind = Obj.NO_VALUE;
				message = "UNKNOWN SYMBOL TYPE";
				parser.semantic_error(message, line);
				break;
		}
		
		// Insert object to table.
		Obj createdObject = Tab.insert(objectKind, name, currentObjectType);
				
		// Create object node string.
		parser.log_symbol_detected(createdObject, message, line);
		
		if(parser.isClassContext && symbolType != SYMBOL_TYPE.CLASS) {
			ChainClassScope();
		}
		
		return createdObject;
	}
	
	// Code generation
	private void generatePrintCall(Struct printingType, int line) {
		if(printingType != Tab.intType && printingType != Tab.charType) { 
			parser.code_generation_error("only char and int types can be printed.", line);
		}
		
		// It is assumed that the thing we're printing is already on stack (ie. Factor ::= is responsible for that)
		
		if (printingType == Tab.intType) {
			// Load message length.
	  	 	Code.loadConst(5);
	  	 	// Set code.
	  	 	Code.put(Code.print);
	  	}
	  	 
	  	if (printingType == Tab.charType) {
	  		// Load message length.
	  		Code.loadConst(1);
	  		// Set code.
	  	 	Code.put(Code.bprint);
	  	}
	}
	
	private void generateMethodStart(int localAndFormalVarsNumber) {
		parser.currentMethodObject.setAdr(Code.pc);
   		if (parser.isMainMethod()) {
   			Code.mainPc = parser.currentMethodObject.getAdr();
   		}
   		Code.put(Code.enter);
   		Code.put(parser.currentMethodObject.getLevel());
   		Code.put(localAndFormalVarsNumber);
	}
	
	private void generateMethodEnd() {
		Code.put(Code.exit);
	 	Code.put(Code.return_);
	}
	
	private void generateMethodCall(Obj functionObject) {
		int destAdr = functionObject.getAdr() - Code.pc;
   	    Code.put(Code.call);
   	    Code.put2(destAdr);
   	    if (functionObject.getType() != Tab.noType) {
    		Code.put(Code.pop);
		}
	}
	
	// Used in expressions like "method(a += 3)".
	private void generateRightOperationForExpression(Obj destinationObject, int operationCode) {
		// Do the operation.
		Code.put(operationCode);
		// Store value
		Code.store(destinationObject);
		// Push it back to stack so others can use it.
		Code.load(destinationObject);
	}
	
	// Used in designator statements like "a = 3;" or "a *= 5;".
	private void generateAssignOperation(Obj destinationObject, int operationCode) {
		// Check if "+=" or "*=" is called.
		if(operationCode > 0) {
			// First push designator to stack so we can do operation on it.
			Code.load(destinationObject);
			// Push operation. That will leave result on stack for store to pick it up.
			Code.put(operationCode);
		}
		// Expr already set everything we need on stack. Just put to designator.
		Code.store(destinationObject);
	}
:}

terminal PROG, CLASS, THIS, CONST, EQUALS, L_BRACE, R_BRACE, L_PAREN, R_PAREN, SEMI, COMMA, L_INDEXER, R_INDEXER ;
terminal EXTENDS, STATIC, VOID, DOT, INCREMENT, DECREMENT, NEW, FOR, PRINT, READ, CONTINUE, BREAK, RETURN ;
terminal PLUS, MINUS, PLUS_EQUALS, MINUS_EQUALS, MULTIPLY, DIVIDE, MODULATE, MULTIPLY_EQUALS, DIVIDE_EQUALS, MODULATE_EQUALS ;
terminal IF, ELSE, AND, OR, EQUALITY, NOT_EQUAL, GREATER, GREATER_EQUAL, LESS, LESS_EQUAL;
terminal Integer NUMBER ;
terminal String IDENT ;
terminal Character CHAR ;
terminal Boolean BOOL ;

non terminal Program, ProgramElementsList, MethodDecl, ProgramElement, ConstDecl, VarDecl, ClassDecl ;
non terminal ConstList, VarsElementsList, OneVar, StaticDeclarator, VoidType, Statement ;
non terminal MethodsSection, MethodsList, VarsList, ForStatement, OptionalDesignatorStatement, OptionalCondition ;
non terminal Condition, CondTerm, CondTermList, CondFact, CondFactList, Negation, IfStatement ; 
non terminal NumbersListOptional, NumbersList, StatementsList, OpenScope, CloseScope, RelOp, DesignatorStatement ;

non terminal Obj ProgName, Expr, OneConst, MethodName, Designator, Type, Factor, NewArrayType, Term, TermList, ClassExtender ;
non terminal Struct ClassName, Return ;
non terminal Integer FormPars, FormParsList ;
non terminal Stack<Struct> ActParsList, ActPars, ActParsListOptional ;
non terminal Integer AssignOp, AddOpRight, AddOpLeft, MulOpRight, MulOpLeft ;
precedence left ELSE;

start with Program;

OpenScope ::= {: Tab.openScope(); :} ;
CloseScope ::= {: Tab.closeScope(); :} ;

Program ::= PROG ProgName:p OpenScope ProgramElementsList L_BRACE {: parser.isGlobalContext = false; // Closing global context :} MethodsList R_BRACE
			{: 
				Tab.chainLocalSymbols(p);
				Code.dataSize = Tab.currentScope().getnVars(); 
			:} 
			CloseScope
			;

ProgName ::= IDENT:programName 
			{: RESULT = addProgramToSymbolTable(programName, programNameleft); :}
			;

ProgramElementsList ::= ProgramElementsList ProgramElement 
						|
						/* epsilon */
						;
												
ProgramElement ::= ConstDecl 
				|
				VarDecl
				|
				{: parser.isClassContext = true; // Starting class context :}
				ClassDecl 
				{: 
					parser.isClassContext = false; // Closing class context
					parser.classDefinitionCount++; 
				:}
				;
								
ConstDecl ::= CONST Type ConstList SEMI ;

ConstList ::= ConstList COMMA IDENT:constName EQUALS OneConst:currentConstObject
				{: 
					parser.constantsCount++; // Counting constants
					addConstantToSymbolTable(constName, currentConstObject.getType(), currentConstObject, currentConstObjectleft); 
				:}
				|
				IDENT:constName EQUALS OneConst:currentConstObject
				{: 
					parser.constantsCount++; // Counting constants
					addConstantToSymbolTable(constName, currentConstObject.getType(), currentConstObject, currentConstObjectleft);
				:}
				; 

OneConst ::= NUMBER:value
				{:
					Obj numberObject = new Obj(Obj.Con, "", Tab.intType);  
 	    			numberObject.setAdr((int)value);
 	    			Code.load(numberObject);
 	    			RESULT = numberObject;
 	    		:} 
				|
			 	CHAR:value
			 	{:
					Obj charObject = new Obj(Obj.Con, "", Tab.charType);  
		 	    	charObject.setAdr(value);
		 	    	Code.load(charObject);
		 	    	RESULT = charObject;
				:}
				|
			 	BOOL:value
			 	{:
					Obj boolObject = new Obj(Obj.Con, "", boolType);  
		 	    	boolObject.setAdr(value ? 1:0);
		 	    	Code.load(boolObject);
		 	    	RESULT = boolObject;
				:}
				;
 
VarDecl ::=	Type:varType VarsElementsList SEMI
			
			|
			Type error SEMI
			{: parser.trackSyntaxErrorRecovery(ERROR_CODE.VARIABLE, "(3)"); RESULT = Tab.noObj; :}				
			;
 
VarsElementsList ::= VarsElementsList COMMA OneVar
 						|
 						error COMMA OneVar
 						{: parser.trackSyntaxErrorRecovery(ERROR_CODE.VARIABLE, "(1)"); RESULT = Tab.noObj; :}
 						|
 						OneVar
 						|
 						error OneVar
 						{: parser.trackSyntaxErrorRecovery(ERROR_CODE.VARIABLE, "(2)"); RESULT = Tab.noObj; :}
 						;
 
OneVar ::= IDENT:varName
			{: 
				parser.incrementVarsCount(false); 
				addVariableToSymbolTable(varName, varNameleft, false);
			:}
 			|
 			IDENT:varName L_INDEXER R_INDEXER 
 			{: 
 				parser.incrementVarsCount(true);
 				addVariableToSymbolTable(varName, varNameleft, true); 
 			:}
 			;
 
Type ::= IDENT:typeName
			{: 
				Obj typeNode = Tab.find(typeName);
				if (typeNode == Tab.noObj) {
					parser.semantic_error("type \"" + typeName + "\" not found in symbol table.", typeNameleft);
					RESULT = Tab.noObj;
					currentType = Tab.noType;
				}
				else {
					if (Obj.Type == typeNode.getKind()) {
						RESULT = typeNode;
						currentType = typeNode.getType();
					}
					else {
						parser.semantic_error("\"" + typeName + "\" is not a type.", typeNameleft);
						RESULT = Tab.noObj;
						currentType = Tab.noType;
					}
				}
			:}
			;	
 
ClassDecl ::= CLASS ClassName:c ClassExtender:parentClassObject 
				{:
					if(parentClassObject != null) {
						// Set dummy var so we can track all parents.
						addClassCompatibilityVar(parentClassObject.getName());
					
						// Add all parent class members.
						for(Obj member : parentClassObject.getType().getMembers()) {
							if(member.getName().startsWith(CLASS_COMPATIBILITY_PREFIX)) { 
								addClassCompatibilityVar(member.getName().substring(CLASS_COMPATIBILITY_PREFIX.length()));
							} else {
								Obj copiedObj = Tab.insert(member.getKind(), SUPER_DOT + member.getName(), member.getType());
								copiedObj.setAdr(member.getAdr());
							}
						}
					}
				:}
				L_BRACE VarsList MethodsSection R_BRACE
				{: 
					parser.currentClass = Tab.noObj;
					parser.currentClassScope = null;
					Tab.chainLocalSymbols(c);
				:}
				CloseScope
				;

ClassName ::= IDENT:className
				{: 
					parser.currentClass = addClassTypeToSymbolTable(className, classNameleft);
					Tab.openScope();
					parser.currentClassScope = Tab.currentScope();
					// Set dummy var so we can track all parents.
					addClassCompatibilityVar(className);
					
					ChainClassScope();
					RESULT = parser.currentClass.getType();
				:}
				;
				
ClassExtender ::= EXTENDS Type:parentClassObject
					{: 
						isClassExtensionValid(parentClassObject.getType(), parentClassObjectleft);
						RESULT = parentClassObject; 
					:} 
					|
					error
					{: parser.trackSyntaxErrorRecovery(ERROR_CODE.EXTENDS, "(1)"); RESULT = Tab.noObj; :}
					|
					/* epsilon */
					;

VarsList ::= VarsList VarDecl 
					|
					/* epsilon */
					;

MethodsSection ::= L_BRACE MethodsList R_BRACE 
					|
					/* epsilon */
					;

MethodsList ::= MethodsList MethodDecl 
				|
				/* epsilon */
				; 

MethodDecl ::= {: parser.isMethodContext = true; // Starting method context :}
				StaticDeclarator VoidType MethodName:met OpenScope L_PAREN FormPars:numOfPars R_PAREN 
				{: 
					met.setLevel(numOfPars);
					Tab.chainLocalSymbols(met); // Hack to enable recursion. 
				:} 
				OpenScope VarsList L_BRACE
				{: generateMethodStart(Tab.currentScope().getnVars() + Tab.currentScope().getOuter().getnVars()); :}
				StatementsList R_BRACE CloseScope
				{: 
					parser.currentMethodObject = Tab.noObj;
					parser.incrementMethodsCount();
					parser.isMethodContext = false; // Closing method context
					
					generateMethodEnd();
					
					Tab.chainLocalSymbols(met); 
				:}
				CloseScope
				;

MethodName ::= IDENT:methodName
				{:
					parser.currentMethodObject = addMethodToSymbolTable(methodName, methodNameleft);
					RESULT = parser.currentMethodObject; 
				:}
				;

StaticDeclarator ::= STATIC {: parser.isStaticContext = true; // Starting static context :}
						|
						{: parser.isStaticContext = false; // Closing static context :}
						/* epsilon */
						;

VoidType ::= Type
				{: isVoidMethod = false; :}
				|
				VOID
				{: isVoidMethod = true; :}
				;

FormPars ::= {: parser.isFormalParametersContext = true; // Starting form pars context :}
				FormParsList:numOfElements
				{:
					parser.isFormalParametersContext = false; // Starting form pars context
					RESULT = numOfElements; 
				:}
				|
				/* epsilon */
				{: RESULT = 0; :}
				|
				error
				{: parser.trackSyntaxErrorRecovery(ERROR_CODE.FORMAL_PARAMETERS, "(1)"); :}		
				;

FormParsList ::= FormParsList:n COMMA Type OneVar
					{: 
						parser.functionFormParsCount++;
						RESULT = n + 1;
					:}
					|
					Type OneVar
					{:
						parser.functionFormParsCount++;
						RESULT = 1; 
					:}
					;

Statement ::= DesignatorStatement SEMI
				|
				IfStatement
				|
				ForStatement
				|
				BREAK SEMI:s
				{: breakContinueCheck(sleft); :}
				|
				CONTINUE SEMI:s
				{: breakContinueCheck(sleft); :}
				|
				Return:ret
				{:
					if(!parser.isMethodContext) {
						parser.semantic_error("return can be used only in methods.", retleft);
					}
				:}
				|
				READ L_PAREN Designator:des R_PAREN SEMI
				{: boolean isOk = canBeAssignedTo(des, desleft) && isPrimitiveType(des, desleft); :}
				|
				PRINT L_PAREN Expr:expr NumbersListOptional R_PAREN SEMI
				{: 
					boolean isOk = isPrimitiveType(expr, exprleft);
					generatePrintCall(expr.getType(), exprleft); 
				:} 
				|
				L_BRACE StatementsList R_BRACE
				{: parser.statementsBlockCount++; :}
				;
				
StatementsList ::= StatementsList Statement
					|
					/* epsilon */
					;
				
NumbersListOptional ::= COMMA NumbersList
				|
				/* epsilon*/
				;
				
NumbersList ::= NumbersList COMMA NUMBER  
				|
				NUMBER
				;

Return ::= RETURN SEMI:s
			{: 
				if(!isVoidMethod) {
					parser.semantic_error("method must return a type.", sleft);
				}
			:}
			|
			RETURN Expr:expr SEMI
			{:
				if(isVoidMethod) {
					parser.semantic_error("void methods shouldn't return a type.", exprleft);
				} else if(!areCompatibleTypes(parser.currentMethodObject, expr, false, exprleft)) {
						parser.semantic_error("tried to return wrong value type.", exprleft);
				}
			:}
			;
				
ForStatement ::={: parser.isForContext = true; :} 
				FOR L_PAREN OptionalDesignatorStatement SEMI OptionalCondition SEMI OptionalDesignatorStatement R_PAREN Statement 
				{: parser.isForContext = false; :}
				;
				
OptionalDesignatorStatement ::= DesignatorStatement
								|
								/* epsilon */
								|
								error
								{: parser.trackSyntaxErrorRecovery(ERROR_CODE.FOR, "(1)"); RESULT = Tab.noObj; :}
								;
				
IfStatement ::= IF L_PAREN Condition R_PAREN Statement
				|
				IF L_PAREN error R_PAREN Statement
				{: parser.trackSyntaxErrorRecovery(ERROR_CODE.IF, "(1)"); RESULT = Tab.noObj; :}
				|
				IF L_PAREN Condition R_PAREN Statement ELSE Statement
				|
				IF L_PAREN error R_PAREN Statement ELSE Statement
				{: parser.trackSyntaxErrorRecovery(ERROR_CODE.IF, "(2)"); RESULT = Tab.noObj; :}
				;

OptionalCondition ::= Condition
						|
						/* epsilon */
						|
						error
						{: parser.trackSyntaxErrorRecovery(ERROR_CODE.FOR, "(2)"); RESULT = Tab.noObj; :}
						;

Condition ::= CondTerm 
				|
				CondTerm OR CondTermList 
				;

CondTermList ::= CondTerm OR CondTermList
					|
					CondTerm  
					;
					
CondTerm ::= CondFact 
				|
				CondFact AND CondFactList
				;

CondFactList ::= CondFact AND CondFactList 
					|
					CondFact
					;
					
CondFact ::= Expr:exp
				{:
					if(exp.getType() != boolType) {
						parser.semantic_error("expression in condition must be of boolean type.", expleft);
					}
				:}
				|
				Expr:exp1 RelOp Expr:exp2
				{: boolean isOk = isRelOpCompatible(exp1.getType(), exp2.getType(), exp1left); :}
				;

RelOp ::= EQUALITY {: isClassAndArrayCompatibleRelOp = true; :} 
			|
			NOT_EQUAL {: isClassAndArrayCompatibleRelOp = true; :} 
			|
			GREATER {: isClassAndArrayCompatibleRelOp = false; :} 
			|
			GREATER_EQUAL {: isClassAndArrayCompatibleRelOp = false; :}
			|
			LESS {: isClassAndArrayCompatibleRelOp = false; :}
			|
			LESS_EQUAL {: isClassAndArrayCompatibleRelOp = false; :}
			;

DesignatorStatement ::= Designator:des AssignOp:operationCode Expr:exp
						{: 
							areCompatibleTypes(des, exp, true, expleft);
							generateAssignOperation(des, operationCode);
						:}
						|
						Designator AssignOp error
						{: parser.trackSyntaxErrorRecovery(ERROR_CODE.ASSIGN, "(1)"); RESULT = Tab.noType; :}
						|
						Designator:des L_PAREN ActParsList:params R_PAREN
						{: 
							if(parser.isMainMethod()) {
								parser.mainMethodFunctionCallsCount++;
							}
							
							isObjectMethod(des, desleft);
							hasMethodAppropriateParams(des, params, desleft);
							
							generateMethodCall(des);
						:}
						|
						Designator:des INCREMENT
						{: isAssignableToInt(des, desleft); :}
						|
						Designator:des DECREMENT
						{: isAssignableToInt(des, desleft); :}
						;
						
Designator ::= IDENT:identifier
				{: RESULT = findObjectWithName(identifier, identifierleft); :}
				|
				THIS DOT IDENT:identifier
				{:
					RESULT = isThisAvailable(identifier, identifierleft) 
								? findClassMemberWithName(parser.currentClass, identifier, true, identifierleft)
								: Tab.noObj;
				:}
				|
				Designator:des DOT IDENT:identifier
				{: RESULT = findClassMemberWithName(des, identifier, false, identifierleft); :}
				|
				Designator:des L_INDEXER Expr:exp R_INDEXER
				{:
					boolean isArrayAndHasValidIndexingType = isIndexingTypeValid(exp.getType(), expleft) && checkIfObjIsArray(des, desleft);  
					
					Obj result = Tab.noObj;
					if (isArrayAndHasValidIndexingType) {
						result = new Obj(Obj.Elem, "", des.getType().getElemType());
						parser.usage_info(des, "element of array \"" + des.getName() + "\" used.", desleft);
					}
					
					RESULT = result;
				:}
				|
				Designator L_INDEXER error R_INDEXER
				{: parser.trackSyntaxErrorRecovery(ERROR_CODE.INDEXING, "(1)"); RESULT = Tab.noObj; :}
				
				/*
				// Super is not defined by specification.
				|
				SUPER DOT SuperDesignator 
				*/
				;
/*
SuperDesignator ::= SUPER DOT SuperDesignator
					|
					IDENT
					;
*/

ActParsList ::= ActPars:pars
				{: RESULT = pars; :}
				|
				error
				{: parser.trackSyntaxErrorRecovery(ERROR_CODE.PARAMETERS, "(1)"); :}
				|
				/* epsilon */
				{: RESULT =  new Stack<Struct>(); :}
				;
				
ActPars ::= Expr:exp COMMA ActPars:pars 
			{:
				pars.push(exp.getType());
				RESULT = pars; 
			:}
			|
			Expr:exp
			{:
				Stack<Struct> actualParamsStack = new Stack<Struct>();
				actualParamsStack.push(exp.getType());
				RESULT = actualParamsStack;
			:}
			;

Expr ::= Negation TermList:termList
			{:
				RESULT = termList;
				hasUsedLeftOperator = false; 
			:}
			;

TermList ::= Term:term
				{: RESULT = term; :}
				|
				Term:term AddOpLeft:operationCode {: hasUsedLeftOperator = true; :} TermList:termList 
				{: 
					Code.put(operationCode);
					RESULT = isInteger(term.getType(), termleft) && isInteger(termList.getType(), termListleft) ? term : Tab.noObj;
				:}
				|
				Term:term {: checkRightOperatorUsageAvailability(termleft); :} AddOpRight:operationCode TermList:termList 
				{: 
					generateRightOperationForExpression(term, operationCode);// Do the operation.
					RESULT = isAssignableToInt(term, termleft) && isInteger(termList.getType(), termListleft) ? term : Tab.noObj;
				:}
				;

Term ::= Factor:fac MulOpLeft:operationCode {: hasUsedLeftOperator = true; :} Term:term
				{:
					Code.put(operationCode);
					RESULT = isInteger(fac.getType(), facleft) && isInteger(term.getType(), termleft) ? fac : Tab.noObj;
				:}
				|
				Factor:fac {: checkRightOperatorUsageAvailability(facleft); :} MulOpRight:operationCode Term:term
				{:
					generateRightOperationForExpression(fac, operationCode);
					RESULT = isAssignableToInt(fac, facleft) && isInteger(term.getType(), termleft) ? fac : Tab.noObj; 
				:}
				|
				Factor:fac
				{: RESULT = fac; :}
				;

Factor ::= Designator:des ActParsListOptional:params
			{:
				Obj result = Tab.noObj;
				if(params == null && isObjectVariable(des, desleft))
				{
					// Designator is variable.
					result = des;
					Code.load(result);
				} else if(params != null && isObjectMethod(des, desleft) && hasMethodAppropriateParams(des, params, desleft)) {
					// Designator is method.
					result = des;
				}
				RESULT = result;
			:}
			|
			OneConst:constant
			{: RESULT = constant; :}
			|
			NEW Type:typeObject NewArrayType:arrayObject
			{: RESULT = instantiateNewObject(typeObject, arrayObject, arrayObjectleft); :}
			|
			L_PAREN Expr:exp R_PAREN 
			{: RESULT = new Obj(Obj.NO_VALUE, "", exp.getType()); :}
			;

ActParsListOptional ::= L_PAREN ActParsList:pars R_PAREN
						{: RESULT = pars; :}
						|
						/* epsilon */
						;

NewArrayType ::= L_INDEXER Expr:exp R_INDEXER
					{: RESULT = isIndexingTypeValid(exp.getType(), expleft) ? new Obj(Obj.NO_VALUE, "", new Struct(Struct.Array, currentType)) : Tab.noObj; :}
					|
					/* epsilon */
					; 

AssignOp ::= EQUALS
			{: RESULT = -1; // We won't do anything when this is set. :}
			|
			AddOpRight:operationCode
			{: RESULT = operationCode; :}
			|
			MulOpRight:operationCode
			{: RESULT = operationCode; :}
			;

Negation ::= MINUS
			|
			/* epsilon */
			;

AddOpLeft ::= PLUS {: RESULT = Code.add; :}
				|
				MINUS {: RESULT = Code.sub; :}
				;
				
AddOpRight ::= PLUS_EQUALS {: RESULT = Code.add; :}
				|
				MINUS_EQUALS {: RESULT = Code.sub; :}
				;				

MulOpLeft ::= MULTIPLY {: RESULT = Code.mul; :}
				|
				DIVIDE {: RESULT = Code.div; :}
				|
				MODULATE {: RESULT = Code.rem; :}
				;
				
MulOpRight ::= MULTIPLY_EQUALS {: RESULT = Code.mul; :}
				|
				DIVIDE_EQUALS {: RESULT = Code.div; :}
				|
				MODULATE_EQUALS {: RESULT = Code.rem; :}
				;				