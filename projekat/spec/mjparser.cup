package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.MJParser.ERROR_CODE;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;
import rs.etf.pp1.symboltable.visitors.DumpSymbolTableVisitor;

parser code {:

	public enum ERROR_CODE {
		VARIABLE,
		ASSIGN,
		FORMAL_PARAMETERS,
		IF,
		FOR,
		INDEXING,
		EXTENDS,
		PARAMETERS
	}

	private static final String MAIN = "main";
	private static final String error_recovery_string = "Error recovery successful: ";

	// Counting variables
	int constantsCount = 0;
	int globalVarsCount = 0;
	int globalArrayVarsCount = 0;
	int classGlobalVarsCount = 0;
	int mainFunctionVarsCount = 0;
	int globalFuncCount = 0;
	int globalStaticFuncCount = 0;
	int classFuncCount = 0;
	int classStaticFuncCount = 0;
	int statementsBlockCount = 0;
	int mainMethodFunctionCallsCount = 0;
	int functionFormParsCount = 0;
	int classDefinitionCount = 0;
	
	boolean isGlobalContext = true;
	boolean isClassContext = false;
	boolean isMethodContext = false;
	boolean isStaticContext = false;
	boolean isFormalParametersContext = false;
	String currentMethodName = "";
	
	Logger log = Logger.getLogger(getClass());
     
	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatal error, parsing is terminated", cur_token);
    }

	public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report(message, info, true);
    }
  
    public void syntax_error(Symbol cur_token) {
        report("Syntax error", cur_token, true);
    }
  	
  	public void semantic_error(String message, int line) {
        report("Semantic error on line " + line + ": " + message, null, true);
    }
  
  	public void semantic_info(String message, int line) {
		report("Semantic info on line " + line + ": " + message, null, false);
	}
	
	public void log_symbol_detected(Obj object, String message, int line) {
		DumpSymbolTableVisitor visitor = new DumpSymbolTableVisitor();
        visitor.visitObjNode(object);
        
        semantic_info(message + " [ " + visitor.getOutput() + "]", line);
	}
	
    public void report(String message, Object info, boolean isError) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" on line ").append(((Symbol)info).left).append(", column ").append(((Symbol)info).right);
        
        if(isError) {
        	log.error(msg.toString());
        } else {
        	log.info(msg.toString());
        }
    }
    
    // Increments proper var count. Called for every var.
    public void incrementVarsCount(boolean isArray) {
    	if(isFormalParametersContext) { return; }
    
    	// Counting variables
		if(isClassContext) {
			// Counting only class global variables, not the class method variables.
			if(!isMethodContext) {
				classGlobalVarsCount++;
			}
		} else if(isGlobalContext) {
			if(isArray) {
				globalArrayVarsCount++;
			} else {
				globalVarsCount++;
			}
		} else {
			if(isMainMethod()) {
				mainFunctionVarsCount++;
			}
		}
    }
    
    // Increments proper methods count. Called for every method.
    public void incrementMethodsCount() {
    	if(isStaticContext) {
    		if(isClassContext) {
    			classStaticFuncCount++;
    		} else {
    			globalStaticFuncCount++;
    		}
    	} else {
    		if(isClassContext) {
    			classFuncCount++;
    		} else {
    			globalFuncCount++;
    		}
    	}
    }
    
    public boolean isMainMethod() {
    	return isMethodContext && MAIN.equals(currentMethodName);
    }
    
    public void trackErrorRecovery(ERROR_CODE error, String additionalInfo) {
    	String message = error_recovery_string;
    	switch (error) {
    		case VARIABLE:
    			String context = isGlobalContext ? isClassContext ? "Class" : "Global" : "Local";
    			message += context + " variable declaration error "; 
    			break;
    			
    		case ASSIGN:
    			message += "Assign operator error ";
    			break;
    			
    		case FORMAL_PARAMETERS:
    			message += "Formal parameters declaration error ";
    			break;	
    		
    		case IF:
    			message += "If statement condition error ";
    			break;
    		
    		case FOR:
    			message += "For loop condition error ";
    			break;	
    		
    		case INDEXING:
    			message += "Indexing array error ";
    			break;
    			
    		case EXTENDS:
    			message += "Extends clause error ";
    			break;
    			
    		case PARAMETERS:
    			message += "Parameters list error ";
    			break;
    		    			
    		default:
    			message += "Unknown syntax error ";
    			break;
    	}
    	
    	log.debug(message + additionalInfo);
    }
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

init with {:
	Tab.init();
	Tab.currentScope.addToLocals(new Obj(Obj.Type, "bool", CUP$MJParser$actions.boolType));
:}

action code {:
		public static final Struct boolType = new Struct(Struct.Bool);
		
	Struct currentType = Tab.noType;
	
	// Semantic methods
    public boolean doesSymbolAlreadyExists(String name, int line) {
    	boolean doesSymbolExist = Tab.currentScope.findSymbol(name) != null;
    	if(doesSymbolExist) {
			parser.semantic_error("identificator with name \"" + name + "\" already exists.", line);
		}
		return doesSymbolExist;
    }
    
    public boolean doesTypeMatchWithCurrent(Struct type, int line) {
    	boolean doesTypeMatch = type == currentType;
    	if(!doesTypeMatch) {
    		parser.semantic_error("type mismatch.", line);
		}
		return doesTypeMatch;
    }
    
	public void AddConstantToSymbolTable(String constName, Obj currentConstObject, int line) {
		Struct currentConstType = currentConstObject.getType();
		
		if(currentConstType == Tab.noType) {
			// Failsafe
			parser.semantic_error("Constant \"" + constName + "\" doesn't have a type defined.", line);
		} else if(!doesSymbolAlreadyExists(constName, line)){
			// Symbol doesn't exist, check if type is correct.
			if(doesTypeMatchWithCurrent(currentConstType, line)) {
				Tab.insert(Obj.Con, constName, currentConstType);
				// Create object node string.
				parser.log_symbol_detected(currentConstObject, "added constant \"" + constName + "\" to symbol table.", line);
			}
		}
	}
:}

terminal PROG, CLASS, CONST, EQUALS, L_BRACE, R_BRACE, L_PAREN, R_PAREN, SEMI, COMMA, L_INDEXER, R_INDEXER ;
terminal EXTENDS, STATIC, VOID, DOT, INCREMENT, DECREMENT, NEW, FOR, PRINT, READ, CONTINUE, BREAK, RETURN ;
terminal PLUS, MINUS, PLUS_EQUALS, MINUS_EQUALS, MULTIPLY, DIVIDE, MODULATE, MULTIPLY_EQUALS, DIVIDE_EQUALS, MODULATE_EQUALS ;
terminal IF, ELSE, AND, OR, EQUALITY, NOT_EQUAL, GREATER, GREATER_EQUAL, LESS, LESS_EQUAL;
terminal Integer NUMBER ;
terminal String IDENT ;
terminal Character CHAR ;
terminal Boolean BOOL ;

non terminal Program, ProgramElementsList, MethodsDecl, ProgramElement, ConstDecl, VarDecl, ClassDecl ;
non terminal ConstList, VarsElementsList, OneVar, StaticDeclarator, VoidType, FormPars, Statement, FormParsList, ClassExtender ;
non terminal MethodsSection, MethodsList, VarsList, ForStatement, OptionalDesignatorStatement, OptionalCondition ;
non terminal DesignatorStatement, Designator, DesignatorStatementOptions, DesignatorOptions, OneDesignatorOption ;
non terminal Expr, ActParsList, ActPars, Negation, Term, AddTermList, AddOneTerm, Factor, MultiplyFactorList ;
non terminal AddOp, AssignOp, AddOpRight, AddOpLeft, MulOp, MulOpRight, MulOpLeft, IfStatement, ActParsListOptional ;
non terminal Condition, CondTerm, CondTermList, CondFact, CondFactList, RelOp, RelOpExprList, NewArrayType ; 
non terminal Return, NumbersList, OneNumber, StatementsList ;

non terminal Obj ProgName, OneConst ;
non terminal Struct Type ;

precedence left ELSE;

Program ::= PROG ProgName:p ProgramElementsList L_BRACE {: parser.isGlobalContext = false; // Closing global context :} MethodsList R_BRACE 
			{:
				Tab.chainLocalSymbols(p);
				Tab.closeScope(); 
			:}
			;

ProgName ::= IDENT:programName 
			{: 
				RESULT = Tab.insert(Obj.Prog, programName, Tab.noType);
				Tab.openScope();  
			:}
			;

ProgramElementsList ::= ProgramElementsList ProgramElement 
						|
						/* epsilon */
						;
												
ProgramElement ::= ConstDecl 
				|
				VarDecl
				|
				{: parser.isClassContext = true; // Starting class context :}
				ClassDecl 
				{: 
					parser.isClassContext = false; // Closing class context
					parser.classDefinitionCount++; 
				:}
				;
								
ConstDecl ::= CONST Type:constType {: currentType = constType; :} ConstList SEMI 
				{: currentType = Tab.noType; :}
				;

ConstList ::= ConstList COMMA IDENT:constName EQUALS OneConst:currentConstObject
				{: 
					parser.constantsCount++; // Counting constants
					AddConstantToSymbolTable(constName, currentConstObject, currentConstObjectleft); 
				:}
				|
				IDENT:constName EQUALS OneConst:currentConstObject
				{: 
					parser.constantsCount++; // Counting constants
					AddConstantToSymbolTable(constName, currentConstObject, currentConstObjectleft);
				:}
				; 

OneConst ::= NUMBER:value
				{:
					RESULT = new Obj(Obj.Con, "", Tab.intType);  
 	    			RESULT.setAdr((int)value);
 	    		:} 
				|
			 	CHAR:value
			 	{:
					RESULT = new Obj(Obj.Con, "", Tab.charType);  
		 	    	RESULT.setAdr(value);
				:}
				|
			 	BOOL:value
			 	{:
					RESULT = new Obj(Obj.Con, "", boolType);  
		 	    	RESULT.setAdr(value ? 1:0);
				:}
				;
 
VarDecl ::=	Type VarsElementsList SEMI
			|
			Type error SEMI
			{: parser.trackErrorRecovery(ERROR_CODE.VARIABLE, "(3)"); :}				
			;
 
VarsElementsList ::= VarsElementsList COMMA OneVar
 						|
 						error COMMA OneVar
 						{: parser.trackErrorRecovery(ERROR_CODE.VARIABLE, "(1)"); :}
 						|
 						OneVar
 						|
 						error OneVar
 						{: parser.trackErrorRecovery(ERROR_CODE.VARIABLE, "(2)"); :}
 						;
 
OneVar ::= IDENT {: parser.incrementVarsCount(false); :}
 			|
 			IDENT L_INDEXER R_INDEXER {: parser.incrementVarsCount(true); :}
 			;
 
Type ::= IDENT:typeName
			{: 
				Obj typeNode = Tab.find(typeName);
				if (typeNode == Tab.noObj) {
					parser.semantic_error("type \"" + typeName + "\" not found in symbol table.", typeNameleft);
					RESULT = Tab.noType;
				}
				else {
					if (Obj.Type == typeNode.getKind()) {
						RESULT = typeNode.getType();
					}
					else {
						parser.semantic_error("\"" + typeName + "\" is not a type.", typeNameleft);
						RESULT = Tab.noType;
					}
				}
			:}
			;	
 
ClassDecl ::= CLASS IDENT ClassExtender L_BRACE VarsList MethodsSection R_BRACE	;
 
ClassExtender ::= EXTENDS Type 
					|
					error
					{: parser.trackErrorRecovery(ERROR_CODE.EXTENDS, "(1)"); :}
					|
					/* epsilon */
					;

VarsList ::= VarsList VarDecl 
					|
					/* epsilon */
					;

MethodsSection ::= L_BRACE MethodsList R_BRACE 
					|
					/* epsilon */
					;

MethodsList ::= MethodsList MethodsDecl 
				|
				/* epsilon */
				; 

MethodsDecl ::= {: parser.isMethodContext = true; // Starting method context :}
				StaticDeclarator VoidType IDENT:methodName 
				{: 
					parser.currentMethodName = methodName; // Save method name so we can detect main function later
					parser.incrementMethodsCount();
				:}
				L_PAREN FormPars R_PAREN VarsList L_BRACE StatementsList R_BRACE
				{: parser.isMethodContext = false; // Closing method context :}
				;

StaticDeclarator ::= STATIC {: parser.isStaticContext = true; // Starting static context :}
						|
						{: parser.isStaticContext = false; // Closing static context :}
						/* epsilon */
						;

VoidType ::= Type
				|
				VOID
				;

FormPars ::= {: parser.isFormalParametersContext = true; // Starting form pars context :}
				FormParsList
				{: parser.isFormalParametersContext = false; // Starting form pars context :}
				|
				/* epsilon */
				|
				error
				{: parser.trackErrorRecovery(ERROR_CODE.FORMAL_PARAMETERS, "(1)"); :}		
				;

FormParsList ::= FormParsList COMMA Type OneVar
					{: parser.functionFormParsCount++; :}
					|
					Type OneVar
					{: parser.functionFormParsCount++; :}
					;

Statement ::= DesignatorStatement SEMI
				|
				IfStatement
				|
				ForStatement
				|
				BREAK SEMI
				|
				CONTINUE SEMI
				|
				Return
				|
				READ L_PAREN Designator R_PAREN SEMI
				|
				PRINT L_PAREN Expr NumbersList R_PAREN SEMI 
				|
				L_BRACE StatementsList R_BRACE
				{: parser.statementsBlockCount++; :}
				;
				
StatementsList ::= StatementsList Statement
					|
					/* epsilon */
					;				
				
NumbersList ::= OneNumber
				|
				/* epsilon*/
				;
				
OneNumber ::= OneNumber SEMI NUMBER
				|
				NUMBER
				;				
				
Return ::= RETURN SEMI
			|
			RETURN Expr SEMI
			;
				
ForStatement ::= FOR L_PAREN OptionalDesignatorStatement SEMI OptionalCondition SEMI OptionalDesignatorStatement R_PAREN Statement ;
				
OptionalDesignatorStatement ::= DesignatorStatement
								|
								/* epsilon */
								|
								error
								{: parser.trackErrorRecovery(ERROR_CODE.FOR, "(1)"); :}
								;
				
IfStatement ::= IF L_PAREN Condition R_PAREN Statement
				|
				IF L_PAREN error R_PAREN Statement
				{: parser.trackErrorRecovery(ERROR_CODE.IF, "(1)"); :}
				|
				IF L_PAREN Condition R_PAREN Statement ELSE Statement
				|
				IF L_PAREN error R_PAREN Statement ELSE Statement
				{: parser.trackErrorRecovery(ERROR_CODE.IF, "(2)"); :}
				;

OptionalCondition ::= Condition
						|
						/* epsilon */
						|
						error
						{: parser.trackErrorRecovery(ERROR_CODE.FOR, "(2)"); :}
						;

Condition ::= CondTerm CondTermList	;

CondTermList ::= CondTermList OR CondTerm
					|
					/* epsilon */
					;
					
CondTerm ::= CondFact CondFactList;

CondFactList ::= CondFactList AND CondFact
					|
					/* epsilon */
					;
					
CondFact ::= Expr RelOpExprList ;

RelOpExprList ::= RelOp Expr
					|
					/* epsilon */
					;

RelOp ::= EQUALITY | NOT_EQUAL | GREATER | GREATER_EQUAL | LESS | LESS_EQUAL ;		

DesignatorStatement ::= Designator DesignatorStatementOptions ;

Designator ::= IDENT DesignatorOptions ;

DesignatorOptions ::= DesignatorOptions OneDesignatorOption 
						|
						/* epsilon */
						;
   
OneDesignatorOption ::= DOT IDENT
						|
						L_INDEXER Expr R_INDEXER
						|
						L_INDEXER error R_INDEXER
						{: parser.trackErrorRecovery(ERROR_CODE.INDEXING, "(1)"); :}
						;
						
DesignatorStatementOptions ::= AssignOp Expr
								|
								AssignOp error
								{: parser.trackErrorRecovery(ERROR_CODE.ASSIGN, "(1)"); :}
								|
								L_PAREN ActParsList R_PAREN
								{: 
									if(parser.isMainMethod()) {
										parser.mainMethodFunctionCallsCount++;
									}
								:}
								|
								INCREMENT
								|
								DECREMENT
								;
				
ActParsList ::= ActPars
				|
				error
				{: parser.trackErrorRecovery(ERROR_CODE.PARAMETERS, "(1)"); :}
				|
				/* epsilon */
				;
				
ActPars ::= ActPars COMMA Expr
			|
			Expr								
			;

Expr ::= Negation Term AddTermList ;

AddTermList ::= AddTermList AddOneTerm
				|
				/* epsilon */
				;

AddOneTerm ::= AddOp Term ;

AssignOp ::= EQUALS
			|
			AddOpRight
			|
			MulOpRight
			;

Negation ::= MINUS
			|
			/* epsilon */
			;

AddOp ::= AddOpLeft
			|
			AddOpRight;
	
AddOpLeft ::= PLUS
				|
				MINUS
				;
				
AddOpRight ::= PLUS_EQUALS
				|
				MINUS_EQUALS
				;				

MulOp ::= MulOpLeft
			|
			MulOpRight
			;
			
MulOpLeft ::= MULTIPLY
				|
				DIVIDE
				|
				MODULATE
				;
				
MulOpRight ::= MULTIPLY_EQUALS
				|
				DIVIDE_EQUALS
				|
				MODULATE_EQUALS
				;				

Term ::= Factor MultiplyFactorList ;

MultiplyFactorList ::= MultiplyFactorList MulOp Factor
						|
						/* epsilon */
						; 

Factor ::= Designator ActParsListOptional
			|
			NUMBER
			|
			CHAR
			|
			BOOL
			|
			NEW Type NewArrayType
			|
			L_PAREN Expr R_PAREN ;

ActParsListOptional ::= L_PAREN ActParsList R_PAREN
						|
						/* epsilon */
						;

NewArrayType ::= L_INDEXER Expr R_INDEXER
					|
					/* epsilon */
					; 
