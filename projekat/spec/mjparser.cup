package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.MJParser.ERROR_CODE;
import rs.ac.bg.etf.pp1.MJParser.SYMBOL_TYPE;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;
import rs.etf.pp1.symboltable.visitors.DumpSymbolTableVisitor;

parser code {:

	public enum ERROR_CODE {
		VARIABLE,
		ASSIGN,
		FORMAL_PARAMETERS,
		IF,
		FOR,
		INDEXING,
		EXTENDS,
		PARAMETERS
	}
	
	public enum LOG_TYPE {
		DEBUG,
		INFO,
		ERROR
	}

	public enum SYMBOL_TYPE {
		CONSTANT,
		VARIABLE,
		METHOD,
		PROGRAM,
		CLASS,
		ARRAY
	}
	
	private static final String MAIN = "main";
	
	private static final String error_recovery_string = "Error recovery successful: ";

	// Counting variables
	int constantsCount = 0;
	int globalVarsCount = 0;
	int globalArrayVarsCount = 0;
	int classGlobalVarsCount = 0;
	int mainFunctionVarsCount = 0;
	int globalFuncCount = 0;
	int globalStaticFuncCount = 0;
	int classFuncCount = 0;
	int classStaticFuncCount = 0;
	int statementsBlockCount = 0;
	int mainMethodFunctionCallsCount = 0;
	int functionFormParsCount = 0;
	int classDefinitionCount = 0;
	
	boolean isGlobalContext = true;
	boolean isClassContext = false;
	boolean isMethodContext = false;
	boolean isStaticContext = false;
	boolean isFormalParametersContext = false;
	String currentMethodName = "";
	Obj currentClass = Tab.noObj;
	
	Logger log = Logger.getLogger(getClass());
     
	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatal error, parsing is terminated", cur_token);
    }

	public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report(message, info, LOG_TYPE.ERROR);
    }
  
    public void syntax_error(Symbol cur_token) {
        report("Syntax error", cur_token, LOG_TYPE.ERROR);
    }
  	
  	public void semantic_error(String message, int line) {
        report("Semantic error on line " + line + ": " + message, null, LOG_TYPE.ERROR);
    }

  	public void usage_info(Obj usedObject, String message, int line) {
  		String visitorMessage = "";
  		if(usedObject != null) {
	  		DumpSymbolTableVisitor visitor = new DumpSymbolTableVisitor();
			visitor.visitObjNode(usedObject);
			visitorMessage = " [ " + visitor.getOutput() + "]"; 
		}
		report("Usage info on line " + line + ": " + message + visitorMessage, null, LOG_TYPE.DEBUG);
	}

  	public void semantic_info(String message, int line) {
		report("Semantic info on line " + line + ": " + message, null, LOG_TYPE.DEBUG);
	}
	
	public void log_symbol_detected(Obj object, String message, int line) {
		DumpSymbolTableVisitor visitor = new DumpSymbolTableVisitor();
		visitor.visitObjNode(object);
        
 		semantic_info(message + " [ " + visitor.getOutput() + "]", line);
	}
	
    public void report(String message, Object info, LOG_TYPE logType) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol) {
			msg.append (" on line ").append(((Symbol)info).left).append(", column ").append(((Symbol)info).right);
        }

		switch(logType) {
			case DEBUG:
		    	log.debug(msg.toString());
		    	break;
		    	
			case INFO:
		    	log.info(msg.toString());
		    	break;
		    	
			case ERROR:
		    	log.error(msg.toString());
		    	break;
		 }
    }
    
    // Increments proper var count. Called for every var.
    public void incrementVarsCount(boolean isArray) {
    	if(isFormalParametersContext) { return; }
    
    	// Counting variables
		if(isClassContext) {
			// Counting only class global variables, not the class method variables.
			if(!isMethodContext) {
				classGlobalVarsCount++;
			}
		} else if(isGlobalContext) {
			if(isArray) {
				globalArrayVarsCount++;
			} else {
				globalVarsCount++;
			}
		} else {
			if(isMainMethod()) {
				mainFunctionVarsCount++;
			}
		}
    }
    
    // Increments proper methods count. Called for every method.
    public void incrementMethodsCount() {
    	if(isStaticContext) {
    		if(isClassContext) {
    			classStaticFuncCount++;
    		} else {
    			globalStaticFuncCount++;
    		}
    	} else {
    		if(isClassContext) {
    			classFuncCount++;
    		} else {
    			globalFuncCount++;
    		}
    	}
    }
    
    public boolean isMainMethod() {
    	return isMethodContext && MAIN.equals(currentMethodName);
    }
    
	public String getContextStringForDeclaration() {
		return isFormalParametersContext ? "formal parameter" : isMethodContext ? "local" : isClassContext ? "class" : "global";
	}
	
    public void trackSyntaxErrorRecovery(ERROR_CODE error, String additionalInfo) {
    	String message = error_recovery_string;
    	switch (error) {
    		case VARIABLE:
    			message += getContextStringForDeclaration() + " variable declaration error "; 
    			break;
    			
    		case ASSIGN:
    			message += "Assign operator error ";
    			break;
    			
    		case FORMAL_PARAMETERS:
    			message += "Formal parameters declaration error ";
    			break;	
    		
    		case IF:
    			message += "If statement condition error ";
    			break;
    		
    		case FOR:
    			message += "For loop condition error ";
    			break;	
    		
    		case INDEXING:
    			message += "Indexing array error ";
    			break;
    			
    		case EXTENDS:
    			message += "Extends clause error ";
    			break;
    			
    		case PARAMETERS:
    			message += "Parameters list error ";
    			break;
    		    			
    		default:
    			message += "Unknown syntax error ";
    			break;
    	}
    	
    	log.debug(message + additionalInfo);
    }
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

init with {:
	Tab.init();
	Tab.currentScope.addToLocals(new Obj(Obj.Type, "bool", CUP$MJParser$actions.boolType));
:}

action code {:
	// private static final String SUPER_DOT_STRING = "super.";
	
	public static final Struct boolType = new Struct(Struct.Bool);
		
	Struct currentType = Tab.noType;
	boolean isVoidMethod = false;
	
	// Semantic methods

	// Only global/local. Class object usage is set in findClassMemberWithName.
	private String getContextStringForUsage(String identifier) {
		Obj currentObject = Tab.currentScope.findSymbol(identifier);
		boolean isInCurrentScope = currentObject != null;
		if(isInCurrentScope) {
			return "local";
		}
		currentObject = Tab.currentScope.getOuter().findSymbol(identifier);
		
		boolean isInOuterScope = currentObject != null;
		if(isInOuterScope) {
			return "formal parameter";
		}
		
		return "global";
	}

	// Find object with identifier name.
	private Obj findObjectWithName(String identifier, int line) {
		Obj result = Tab.find(identifier);
		
		// Check if field is supper class.
		// No super in specification.
		// for(int retry = 10; retry > 0 && result == Tab.noObj; retry--) {
			// ident = SUPER_DOT_STRING + ident;
			// result = Tab.find(ident);
		// }
		
		if(result == Tab.noObj) {
			parser.semantic_error("tried to used non-existing identifier \"" + identifier + "\"", line);
		} else {
			String objectKind = "";
			switch (result.getKind()) {
				case Obj.Var:
					objectKind = getContextStringForUsage(identifier) + " variable";
					break;
					
				case Obj.Con:
					objectKind = "constant";
					break;
					
				case Obj.Meth:
					objectKind = "global method";
					break;
				
				case Obj.Fld:
					objectKind = "class variable";
					break;
				
				case Obj.Type:
					parser.semantic_error("tried to use class name ("+ identifier +") as a variable name", line);
					break;
				
				default:
					parser.semantic_error("unknown object kind ("+ result.getKind() +") of the identifier \"" + identifier + "\"", line);
					break;
			}
			
			if(objectKind.length() > 0) {
				parser.usage_info(result, objectKind + " \"" + identifier + "\" used.", line);
			}
		}
		
		return result;
	}
		
	private Obj findClassMemberWithName(Obj classObj, String identifier, int line) {
		Obj result = Tab.noObj;
		if(classObj == null) {
			parser.semantic_error("class object is null.", line);
			return result;
		}
		
		for(Obj fld : classObj.getType().getMembers()) {
  			if(fld.getName().equals(identifier)) {
  				result = fld;
  				break;
  			}
		}
		
		if(result == Tab.noObj) {
			parser.semantic_error("tried to used non-existing class member \"" + identifier + "\"", line);
		} else {
			String memberType = "UNKNOWN";
			if(result.getKind() == Obj.Meth) {
				memberType = "method";
			} 
			else if(result.getKind() == Obj.Fld) {
				memberType = "field";
			} else {
				parser.semantic_error("unknown class member type \"" + identifier + "\"", line);
			}
			
			parser.usage_info(result, "class " + memberType + " \"" + identifier + "\" of class instance \"" + classObj.getName() + "\" used.", line);
		}
		
		return result;
	}
	
	private boolean isThisAvailable(String identifier, int line) {
		if(!parser.isClassContext) {
			parser.semantic_error("tried to use \"this\" outside of class. (" + identifier + ")", line);
		} else if(parser.isStaticContext) {
			parser.semantic_error("tried to use \"this\" in static function. (" + identifier + ")", line);
		}
		
		return parser.isClassContext && !parser.isStaticContext;
	}
	
    private boolean doesSymbolAlreadyExist(String name, int line) {
    	boolean doesSymbolExist = Tab.currentScope.findSymbol(name) != null;
    	if(doesSymbolExist) {
			parser.semantic_error("identifier with name \"" + name + "\" already exists.", line);
		}
		return doesSymbolExist;
    }
    
    private boolean doesTypeMatchWithCurrent(Struct type, int line) {
    	boolean doesTypeMatch = type == currentType;
    	if(!doesTypeMatch) {
    		parser.semantic_error("type mismatch.", line);
		}
		return doesTypeMatch;
    }
    
    private void isClassExtensionValid(Struct parentClassType, int line) {
		// Check if class tries to extend itself.
		if(parentClassType == parser.currentClass.getType() && parentClassType != Tab.noType) {
			parser.semantic_error("class tried to extend itself.", line);
		} 
		// Check if class tried to extend primitive or non-existing type.
		else if(parentClassType.getKind() != Struct.Class) {
			parser.semantic_error("class tried to extend primitive or non-existing type.", line);
		}
    }
    
	private Obj addConstantToSymbolTable(String name, Struct currentObjectType, Obj currentObject, int line) {
		if(currentObjectType == null || currentObjectType == Tab.noType) {
			// Failsafe.
			parser.semantic_error("Constant \"" + name + "\" doesn't have a type defined.", line);
			return Tab.noObj;
		} 

		// Check if something with that name exists and if types match.
		if(doesSymbolAlreadyExist(name, line) || !doesTypeMatchWithCurrent(currentObjectType, line)){
			return Tab.noObj;
		}
		
		// Do the insertion.
		Obj createdObject = insertToTable(SYMBOL_TYPE.CONSTANT, name, currentObjectType, line);
		// Copy value.
		createdObject.setAdr(currentObject.getAdr());

		return createdObject;
	}
		
	private Obj addVariableToSymbolTable(String name, int line, boolean isArray) {
		if(doesSymbolAlreadyExist(name, line)){
			return Tab.noObj;
		}
		
		// Symbol doesn't exist, do the insertion.
		SYMBOL_TYPE type = isArray ? SYMBOL_TYPE.ARRAY : SYMBOL_TYPE.VARIABLE;
		return insertToTable(type, name, currentType, line);
	}
	
	private Obj addMethodToSymbolTable(String name, int line) {
		// If it's a main method check if it is void. 
		if(parser.isMainMethod() && !isVoidMethod) {
			parser.semantic_error("main method must have void as a return type.", line);
			return Tab.noObj;
		} 
		// Only class methods can be static.
		else if(parser.isStaticContext && !parser.isClassContext)
		{
			parser.semantic_error("global methods can't be static.", line);
			return Tab.noObj;
		} 
		// Check if some symbol with same name already exist.
		if(doesSymbolAlreadyExist(name, line)){
			return Tab.noObj;
		}
				
		Struct methodType = isVoidMethod ? Tab.noType : currentType;
		return insertToTable(SYMBOL_TYPE.METHOD, name, methodType, line);	
	}
	
	private Obj addProgramToSymbolTable(String name, int line) {
		return insertToTable(SYMBOL_TYPE.PROGRAM, name, Tab.noType, line);
	}
	
	private Obj addClassTypeToSymbolTable(String name, int line) {
		return insertToTable(SYMBOL_TYPE.CLASS, name, new Struct(Struct.Class), line);
	}
	
	private Obj insertToTable(SYMBOL_TYPE symbolType, String name, Struct currentObjectType, int line) {
		int objectKind;
		String message;
		
		switch (symbolType) {
			case CONSTANT:
				objectKind = Obj.Con;
				message = "added constant \"" + name + "\" to symbol table.";
				break;
				
			case VARIABLE:
				objectKind = parser.isClassContext && !parser.isMethodContext ? Obj.Fld : Obj.Var;
				message = "added " + parser.getContextStringForDeclaration() + " variable \"" + name + "\" to symbol table.";
				break;
				
			case ARRAY:
				objectKind = parser.isClassContext && !parser.isMethodContext ? Obj.Fld : Obj.Var;
				message = "added " + parser.getContextStringForDeclaration() + " array variable \"" + name + "\" to symbol table.";
				currentObjectType = new Struct(Struct.Array, currentType);
				break;
				
			case METHOD:
				objectKind = Obj.Meth;
				message = "added method \"" + name + "\" to symbol table.";
				break;
				
			case PROGRAM:
				objectKind = Obj.Prog;
				message = "added program \"" + name + "\" to symbol table.";
				break;
				
			case CLASS:
				objectKind = Obj.Type;
				message = "added class type \"" + name + "\" to symbol table.";
				break;
				
			default:
				objectKind = Obj.NO_VALUE;
				message = "UNKNOWN SYMBOL TYPE";
				parser.semantic_error(message, line);
				break;
		}
		
		// Insert object to table.
		Obj createdObject = Tab.insert(objectKind, name, currentObjectType);
				
		// Create object node string.
		parser.log_symbol_detected(createdObject, message, line);
		
		return createdObject;
	}
:}

terminal PROG, CLASS, THIS, CONST, EQUALS, L_BRACE, R_BRACE, L_PAREN, R_PAREN, SEMI, COMMA, L_INDEXER, R_INDEXER ;
terminal EXTENDS, STATIC, VOID, DOT, INCREMENT, DECREMENT, NEW, FOR, PRINT, READ, CONTINUE, BREAK, RETURN ;
terminal PLUS, MINUS, PLUS_EQUALS, MINUS_EQUALS, MULTIPLY, DIVIDE, MODULATE, MULTIPLY_EQUALS, DIVIDE_EQUALS, MODULATE_EQUALS ;
terminal IF, ELSE, AND, OR, EQUALITY, NOT_EQUAL, GREATER, GREATER_EQUAL, LESS, LESS_EQUAL;
terminal Integer NUMBER ;
terminal String IDENT ;
terminal Character CHAR ;
terminal Boolean BOOL ;

non terminal Program, ProgramElementsList, MethodsDecl, ProgramElement, ConstDecl, VarDecl, ClassDecl ;
non terminal ConstList, VarsElementsList, OneVar, StaticDeclarator, VoidType, FormPars, Statement, FormParsList, ClassExtender ;
non terminal MethodsSection, MethodsList, VarsList, ForStatement, OptionalDesignatorStatement, OptionalCondition ;
non terminal DesignatorStatement, DesignatorStatementOptions ;
non terminal ActParsList, ActPars, Negation, AddTermList, AddOneTerm, MultiplyFactorList ;
non terminal AddOp, AssignOp, AddOpRight, AddOpLeft, MulOp, MulOpRight, MulOpLeft, IfStatement, ActParsListOptional ;
non terminal Condition, CondTerm, CondTermList, CondFact, CondFactList, RelOp, RelOpExprList ; 
non terminal Return, NumbersList, OneNumber, StatementsList, OpenScope, CloseScope ;

non terminal Obj ProgName, OneConst, MethodName, Designator, Type ;
non terminal Struct Factor, Term, Expr, NewArrayType, ClassName ;

precedence left ELSE;

start with Program;

OpenScope ::= {: Tab.openScope(); :} ;
CloseScope ::= {: Tab.closeScope(); :} ;

Program ::= PROG ProgName:p OpenScope ProgramElementsList L_BRACE {: parser.isGlobalContext = false; // Closing global context :} MethodsList 
			R_BRACE {: Tab.chainLocalSymbols(p); :} CloseScope
			;

ProgName ::= IDENT:programName 
			{: RESULT = addProgramToSymbolTable(programName, programNameleft); :}
			;

ProgramElementsList ::= ProgramElementsList ProgramElement 
						|
						/* epsilon */
						;
												
ProgramElement ::= ConstDecl 
				|
				VarDecl
				|
				{: parser.isClassContext = true; // Starting class context :}
				ClassDecl 
				{: 
					parser.isClassContext = false; // Closing class context
					parser.classDefinitionCount++; 
				:}
				;
								
ConstDecl ::= CONST Type ConstList SEMI ;

ConstList ::= ConstList COMMA IDENT:constName EQUALS OneConst:currentConstObject
				{: 
					parser.constantsCount++; // Counting constants
					addConstantToSymbolTable(constName, currentConstObject.getType(), currentConstObject, currentConstObjectleft); 
				:}
				|
				IDENT:constName EQUALS OneConst:currentConstObject
				{: 
					parser.constantsCount++; // Counting constants
					addConstantToSymbolTable(constName, currentConstObject.getType(), currentConstObject, currentConstObjectleft);
				:}
				; 

OneConst ::= NUMBER:value
				{:
					RESULT = new Obj(Obj.Con, "", Tab.intType);  
 	    			RESULT.setAdr((int)value);
 	    		:} 
				|
			 	CHAR:value
			 	{:
					RESULT = new Obj(Obj.Con, "", Tab.charType);  
		 	    	RESULT.setAdr(value);
				:}
				|
			 	BOOL:value
			 	{:
					RESULT = new Obj(Obj.Con, "", boolType);  
		 	    	RESULT.setAdr(value ? 1:0);
				:}
				;
 
VarDecl ::=	Type:varType VarsElementsList SEMI
			
			|
			Type error SEMI
			{: parser.trackSyntaxErrorRecovery(ERROR_CODE.VARIABLE, "(3)"); :}				
			;
 
VarsElementsList ::= VarsElementsList COMMA OneVar
 						|
 						error COMMA OneVar
 						{: parser.trackSyntaxErrorRecovery(ERROR_CODE.VARIABLE, "(1)"); :}
 						|
 						OneVar
 						|
 						error OneVar
 						{: parser.trackSyntaxErrorRecovery(ERROR_CODE.VARIABLE, "(2)"); :}
 						;
 
OneVar ::= IDENT:varName
			{: 
				parser.incrementVarsCount(false); 
				addVariableToSymbolTable(varName, varNameleft, false);
			:}
 			|
 			IDENT:varName L_INDEXER R_INDEXER 
 			{: 
 				parser.incrementVarsCount(true);
 				addVariableToSymbolTable(varName, varNameleft, true); 
 			:}
 			;
 
Type ::= IDENT:typeName
			{: 
				Obj typeNode = Tab.find(typeName);
				if (typeNode == Tab.noObj) {
					parser.semantic_error("type \"" + typeName + "\" not found in symbol table.", typeNameleft);
					RESULT = Tab.noObj;
					currentType = Tab.noType;
				}
				else {
					if (Obj.Type == typeNode.getKind()) {
						RESULT = typeNode;
						currentType = typeNode.getType();
					}
					else {
						parser.semantic_error("\"" + typeName + "\" is not a type.", typeNameleft);
						RESULT = Tab.noObj;
						currentType = Tab.noType;
					}
				}
			:}
			;	
 
ClassDecl ::= CLASS ClassName:c OpenScope ClassExtender L_BRACE VarsList MethodsSection R_BRACE
				{: 
					parser.currentClass = Tab.noObj;
					Tab.chainLocalSymbols(c);
				:}
				CloseScope
				;

ClassName ::= IDENT:className 
				{: 
					parser.currentClass = addClassTypeToSymbolTable(className, classNameleft);
					RESULT = parser.currentClass.getType();
				:}
				;

ClassExtender ::= EXTENDS Type:parentClassObject
					{: isClassExtensionValid(parentClassObject.getType(), parentClassObjectleft); :} 
					|
					error
					{: parser.trackSyntaxErrorRecovery(ERROR_CODE.EXTENDS, "(1)"); :}
					|
					/* epsilon */
					;

VarsList ::= VarsList VarDecl 
					|
					/* epsilon */
					;

MethodsSection ::= L_BRACE MethodsList R_BRACE 
					|
					/* epsilon */
					;

MethodsList ::= MethodsList MethodsDecl 
				|
				/* epsilon */
				; 

MethodsDecl ::= {: parser.isMethodContext = true; // Starting method context :}
				StaticDeclarator VoidType MethodName:m OpenScope L_PAREN FormPars R_PAREN OpenScope VarsList L_BRACE StatementsList R_BRACE CloseScope
				{: 
					parser.incrementMethodsCount();
					parser.isMethodContext = false; // Closing method context
					Tab.chainLocalSymbols(m); 
				:}
				CloseScope
				;

MethodName ::= IDENT:methodName
				{:
					parser.currentMethodName = methodName; // Save method name so we can detect main function later
					RESULT = addMethodToSymbolTable(methodName, methodNameleft);
				:}
				;

StaticDeclarator ::= STATIC {: parser.isStaticContext = true; // Starting static context :}
						|
						{: parser.isStaticContext = false; // Closing static context :}
						/* epsilon */
						;

VoidType ::= Type
				{: isVoidMethod = false; :}
				|
				VOID
				{: isVoidMethod = true; :}
				;

FormPars ::= {: parser.isFormalParametersContext = true; // Starting form pars context :}
				FormParsList
				{: parser.isFormalParametersContext = false; // Starting form pars context :}
				|
				/* epsilon */
				|
				error
				{: parser.trackSyntaxErrorRecovery(ERROR_CODE.FORMAL_PARAMETERS, "(1)"); :}		
				;

FormParsList ::= FormParsList COMMA Type OneVar
					{: parser.functionFormParsCount++; :}
					|
					Type OneVar
					{: parser.functionFormParsCount++; :}
					;

Statement ::= DesignatorStatement SEMI
				|
				IfStatement
				|
				ForStatement
				|
				BREAK SEMI
				|
				CONTINUE SEMI
				|
				Return
				|
				READ L_PAREN Designator R_PAREN SEMI
				|
				PRINT L_PAREN Expr NumbersList R_PAREN SEMI 
				|
				L_BRACE StatementsList R_BRACE
				{: parser.statementsBlockCount++; :}
				;
				
StatementsList ::= StatementsList Statement
					|
					/* epsilon */
					;				
				
NumbersList ::= OneNumber
				|
				/* epsilon*/
				;
				
OneNumber ::= OneNumber SEMI NUMBER
				|
				NUMBER
				;				
				
Return ::= RETURN SEMI
			|
			RETURN Expr SEMI
			;
				
ForStatement ::= FOR L_PAREN OptionalDesignatorStatement SEMI OptionalCondition SEMI OptionalDesignatorStatement R_PAREN Statement ;
				
OptionalDesignatorStatement ::= DesignatorStatement
								|
								/* epsilon */
								|
								error
								{: parser.trackSyntaxErrorRecovery(ERROR_CODE.FOR, "(1)"); :}
								;
				
IfStatement ::= IF L_PAREN Condition R_PAREN Statement
				|
				IF L_PAREN error R_PAREN Statement
				{: parser.trackSyntaxErrorRecovery(ERROR_CODE.IF, "(1)"); :}
				|
				IF L_PAREN Condition R_PAREN Statement ELSE Statement
				|
				IF L_PAREN error R_PAREN Statement ELSE Statement
				{: parser.trackSyntaxErrorRecovery(ERROR_CODE.IF, "(2)"); :}
				;

OptionalCondition ::= Condition
						|
						/* epsilon */
						|
						error
						{: parser.trackSyntaxErrorRecovery(ERROR_CODE.FOR, "(2)"); :}
						;

Condition ::= CondTerm CondTermList	;

CondTermList ::= CondTermList OR CondTerm
					|
					/* epsilon */
					;
					
CondTerm ::= CondFact CondFactList;

CondFactList ::= CondFactList AND CondFact
					|
					/* epsilon */
					;
					
CondFact ::= Expr RelOpExprList ;

RelOpExprList ::= RelOp Expr
					|
					/* epsilon */
					;

RelOp ::= EQUALITY | NOT_EQUAL | GREATER | GREATER_EQUAL | LESS | LESS_EQUAL ;		

DesignatorStatement ::= Designator DesignatorStatementOptions ;

Designator ::= IDENT:identifier
				{: RESULT = findObjectWithName(identifier, identifierleft); :}
				|
				THIS DOT IDENT:identifier
				{:
					if(isThisAvailable(identifier, identifierleft)) {
						RESULT = findClassMemberWithName(parser.currentClass, identifier, identifierleft);
					}
				:}
				|
				Designator:des DOT IDENT:identifier
				{: RESULT = findClassMemberWithName(des, identifier, identifierleft); :}
				|
				Designator:des L_INDEXER Expr R_INDEXER
				{:
				 	if (des.getType().getKind() == Struct.Array) {
						RESULT = new Obj(Obj.Elem, "", des.getType().getElemType());
						parser.usage_info(des, "element of array \"" + des.getName() + "\" used.", desleft);
					} else {
						parser.semantic_error("tried to used indexing on a non-array object \"" + des.getName() + "\"", desleft);
					}
				:}
				|
				Designator L_INDEXER error R_INDEXER
				{: parser.trackSyntaxErrorRecovery(ERROR_CODE.INDEXING, "(1)"); :}
				
				/*
				// Super is not defined by specification.
				|
				SUPER DOT SuperDesignator 
				*/
				;
/*
SuperDesignator ::= SUPER DOT SuperDesignator
					|
					IDENT
					;
*/
				
DesignatorStatementOptions ::= AssignOp Expr
								|
								AssignOp error
								{: parser.trackSyntaxErrorRecovery(ERROR_CODE.ASSIGN, "(1)"); :}
								|
								L_PAREN ActParsList R_PAREN
								{: 
									if(parser.isMainMethod()) {
										parser.mainMethodFunctionCallsCount++;
									}
								:}
								|
								INCREMENT
								|
								DECREMENT
								;
				
ActParsList ::= ActPars
				|
				error
				{: parser.trackSyntaxErrorRecovery(ERROR_CODE.PARAMETERS, "(1)"); :}
				|
				/* epsilon */
				;
				
ActPars ::= ActPars COMMA Expr
			|
			Expr								
			;

Expr ::= Negation Term AddTermList ;

AddTermList ::= AddTermList AddOneTerm
				|
				/* epsilon */
				;

AddOneTerm ::= AddOp Term ;

AssignOp ::= EQUALS
			|
			AddOpRight
			|
			MulOpRight
			;

Negation ::= MINUS
			|
			/* epsilon */
			;

AddOp ::= AddOpLeft
			|
			AddOpRight;
	
AddOpLeft ::= PLUS
				|
				MINUS
				;
				
AddOpRight ::= PLUS_EQUALS
				|
				MINUS_EQUALS
				;				

MulOp ::= MulOpLeft
			|
			MulOpRight
			;
			
MulOpLeft ::= MULTIPLY
				|
				DIVIDE
				|
				MODULATE
				;
				
MulOpRight ::= MULTIPLY_EQUALS
				|
				DIVIDE_EQUALS
				|
				MODULATE_EQUALS
				;				

Term ::= Factor MultiplyFactorList ;

MultiplyFactorList ::= MultiplyFactorList MulOp Factor
						|
						/* epsilon */
						; 

Factor ::= Designator ActParsListOptional
			|
			OneConst:c
			{: RESULT = c.getType(); :}
			|
			NEW Type:typeObject NewArrayType:arrayType
			{:
				boolean isArrayType = arrayType != null;
				String objectTypeString = typeObject.getName();
				if(isArrayType) {
					objectTypeString = "array of " + objectTypeString; 
				}
				parser.usage_info(null, "instantiated new object of type \"" + objectTypeString + "\".", typeObjectleft);
				
				RESULT = !isArrayType ? typeObject.getType() : arrayType; 
			:}
			|
			L_PAREN Expr:e R_PAREN 
			{: RESULT = e; :}
			;

ActParsListOptional ::= L_PAREN ActParsList R_PAREN
						|
						/* epsilon */
						;

NewArrayType ::= L_INDEXER Expr R_INDEXER
					{: RESULT = new Struct(Struct.Array, currentType); :}
					|
					/* epsilon */
					; 
