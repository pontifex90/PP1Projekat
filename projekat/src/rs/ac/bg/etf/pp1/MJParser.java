
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Feb 05 23:43:47 CET 2017
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import java.util.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.MJParser.ERROR_CODE;
import rs.ac.bg.etf.pp1.MJParser.SYMBOL_TYPE;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;
import rs.etf.pp1.symboltable.visitors.DumpSymbolTableVisitor;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Feb 05 23:43:47 CET 2017
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\226\000\002\002\004\000\002\044\002\000\002\045" +
    "\002\000\002\072\002\000\002\073\002\000\002\002\014" +
    "\000\002\047\003\000\002\003\004\000\002\003\002\000" +
    "\002\005\003\000\002\005\003\000\002\074\002\000\002" +
    "\005\004\000\002\006\006\000\002\011\007\000\002\011" +
    "\005\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\007\005\000\002\007\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\003\000\002\012\004\000\002" +
    "\013\003\000\002\013\005\000\002\054\003\000\002\075" +
    "\002\000\002\076\002\000\002\010\014\000\002\062\003" +
    "\000\002\061\004\000\002\061\003\000\002\061\002\000" +
    "\002\021\004\000\002\021\002\000\002\017\005\000\002" +
    "\017\002\000\002\020\004\000\002\020\002\000\002\077" +
    "\002\000\002\100\002\000\002\101\002\000\002\004\023" +
    "\000\002\052\003\000\002\014\003\000\002\014\002\000" +
    "\002\015\003\000\002\015\003\000\002\102\002\000\002" +
    "\065\004\000\002\065\002\000\002\065\003\000\002\066" +
    "\006\000\002\066\004\000\002\016\004\000\002\016\003" +
    "\000\002\016\003\000\002\016\004\000\002\016\004\000" +
    "\002\016\003\000\002\016\007\000\002\016\010\000\002" +
    "\016\005\000\002\043\004\000\002\043\002\000\002\041" +
    "\004\000\002\041\002\000\002\042\005\000\002\042\003" +
    "\000\002\064\004\000\002\064\005\000\002\103\002\000" +
    "\002\022\014\000\002\023\003\000\002\023\002\000\002" +
    "\023\003\000\002\032\007\000\002\032\007\000\002\032" +
    "\011\000\002\032\011\000\002\024\003\000\002\024\002" +
    "\000\002\024\003\000\002\033\003\000\002\033\005\000" +
    "\002\035\005\000\002\035\003\000\002\034\003\000\002" +
    "\034\005\000\002\037\005\000\002\037\003\000\002\036" +
    "\003\000\002\036\005\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\046\003\000" +
    "\002\046\003\000\002\063\005\000\002\063\005\000\002" +
    "\063\006\000\002\063\004\000\002\063\004\000\002\053" +
    "\003\000\002\053\005\000\002\053\005\000\002\053\006" +
    "\000\002\053\006\000\002\067\003\000\002\067\003\000" +
    "\002\067\002\000\002\070\005\000\002\070\003\000\002" +
    "\050\004\000\002\060\003\000\002\104\002\000\002\060" +
    "\006\000\002\105\002\000\002\060\006\000\002\106\002" +
    "\000\002\057\006\000\002\107\002\000\002\057\006\000" +
    "\002\057\003\000\002\055\004\000\002\055\003\000\002" +
    "\055\005\000\002\055\005\000\002\071\005\000\002\071" +
    "\002\000\002\056\005\000\002\056\002\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\040\003\000" +
    "\002\040\002\000\002\027\003\000\002\027\003\000\002" +
    "\026\003\000\002\026\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\366\000\004\004\005\001\002\000\004\002\370\001" +
    "\002\000\004\063\006\001\002\000\012\005\ufffb\007\ufffb" +
    "\011\ufffb\063\ufffb\001\002\000\012\005\000\007\000\011" +
    "\000\063\000\001\002\000\012\005\ufff9\007\ufff9\011\ufff9" +
    "\063\ufff9\001\002\000\012\005\ufff6\007\012\011\021\063" +
    "\017\001\002\000\004\063\017\001\002\000\012\005\ufff8" +
    "\007\ufff8\011\ufff8\063\ufff8\001\002\000\004\005\335\001" +
    "\002\000\006\003\322\063\050\001\002\000\012\005\ufff7" +
    "\007\ufff7\011\ufff7\063\ufff7\001\002\000\066\003\uffe6\011" +
    "\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\036\uffe6" +
    "\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045" +
    "\uffe6\046\uffe6\047\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6" +
    "\056\uffe6\057\uffe6\060\uffe6\061\uffe6\063\uffe6\001\002\000" +
    "\012\005\ufffa\007\ufffa\011\ufffa\063\ufffa\001\002\000\012" +
    "\012\ufffe\022\ufffe\023\ufffe\063\ufffe\001\002\000\012\012" +
    "\uffd9\022\uffd9\023\uffd9\063\uffd9\001\002\000\012\012\024" +
    "\022\uffd8\023\uffd8\063\uffd8\001\002\000\004\002\ufffd\001" +
    "\002\000\012\012\uffda\022\uffda\023\uffda\063\uffda\001\002" +
    "\000\010\022\027\023\uffd2\063\uffd2\001\002\000\006\023" +
    "\uffd3\063\uffd3\001\002\000\006\023\033\063\017\001\002" +
    "\000\004\063\034\001\002\000\004\063\uffd1\001\002\000" +
    "\004\063\uffd0\001\002\000\004\013\uffd4\001\002\000\004" +
    "\013\000\001\002\000\004\013\037\001\002\000\010\003" +
    "\040\014\uffcd\063\uffcf\001\002\000\004\014\uffcc\001\002" +
    "\000\004\014\054\001\002\000\004\063\017\001\002\000" +
    "\004\063\050\001\002\000\006\014\uffce\016\045\001\002" +
    "\000\004\063\017\001\002\000\004\063\050\001\002\000" +
    "\006\014\uffcb\016\uffcb\001\002\000\012\014\uffe8\015\uffe8" +
    "\016\uffe8\017\051\001\002\000\004\020\052\001\002\000" +
    "\010\014\uffe7\015\uffe7\016\uffe7\001\002\000\006\014\uffca" +
    "\016\uffca\001\002\000\006\011\uffd7\063\uffd7\001\002\000" +
    "\006\011\000\063\000\001\002\000\006\011\uffdd\063\uffdd" +
    "\001\002\000\006\011\061\063\017\001\002\000\010\011" +
    "\uffde\012\uffde\063\uffde\001\002\000\030\006\uffbf\011\uffbf" +
    "\012\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035" +
    "\uffbf\050\uffbf\063\uffbf\001\002\000\030\006\076\011\102" +
    "\012\067\030\uffb8\031\075\032\063\033\077\034\103\035" +
    "\100\050\072\063\064\001\002\000\004\013\314\001\002" +
    "\000\072\010\uff97\013\uff97\014\uff97\015\uff97\016\uff97\017" +
    "\uff97\020\uff97\024\uff97\025\uff97\026\uff97\036\uff97\037\uff97" +
    "\040\uff97\041\uff97\042\uff97\043\uff97\044\uff97\045\uff97\046" +
    "\uff97\047\uff97\052\uff97\053\uff97\054\uff97\055\uff97\056\uff97" +
    "\057\uff97\060\uff97\061\uff97\001\002\000\032\006\uffc4\011" +
    "\uffc4\012\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4" +
    "\035\uffc4\050\uffc4\051\uffc4\063\uffc4\001\002\000\030\010" +
    "\306\013\305\017\210\024\213\025\301\026\303\040\204" +
    "\041\202\045\170\046\171\047\172\001\002\000\012\012" +
    "\uffff\022\uffff\023\uffff\063\uffff\001\002\000\032\006\uffc7" +
    "\011\uffc7\012\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034" +
    "\uffc7\035\uffc7\050\uffc7\051\uffc7\063\uffc7\001\002\000\032" +
    "\006\uffc8\011\uffc8\012\uffc8\030\uffc8\031\uffc8\032\uffc8\033" +
    "\uffc8\034\uffc8\035\uffc8\050\uffc8\051\uffc8\063\uffc8\001\002" +
    "\000\004\013\263\001\002\000\004\015\262\001\002\000" +
    "\030\006\uffc0\011\uffc0\012\uffc0\030\uffc0\031\uffc0\032\uffc0" +
    "\033\uffc0\034\uffc0\035\uffc0\050\uffc0\063\uffc0\001\002\000" +
    "\004\013\250\001\002\000\004\024\246\001\002\000\004" +
    "\015\245\001\002\000\024\006\uff76\013\uff76\015\243\027" +
    "\uff76\037\122\062\uff76\063\uff76\064\uff76\065\uff76\001\002" +
    "\000\004\030\107\001\002\000\030\006\uffbf\011\uffbf\012" +
    "\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf" +
    "\050\uffbf\063\uffbf\001\002\000\004\015\104\001\002\000" +
    "\032\006\uffc6\011\uffc6\012\uffc6\030\uffc6\031\uffc6\032\uffc6" +
    "\033\uffc6\034\uffc6\035\uffc6\050\uffc6\051\uffc6\063\uffc6\001" +
    "\002\000\030\006\076\011\102\012\106\030\uffb8\031\075" +
    "\032\063\033\077\034\103\035\100\050\072\063\064\001" +
    "\002\000\032\006\uffc1\011\uffc1\012\uffc1\030\uffc1\031\uffc1" +
    "\032\uffc1\033\uffc1\034\uffc1\035\uffc1\050\uffc1\051\uffc1\063" +
    "\uffc1\001\002\000\004\013\110\001\002\000\012\003\111" +
    "\006\076\015\uffb5\063\064\001\002\000\006\014\uffb4\015" +
    "\uffb4\001\002\000\004\015\114\001\002\000\006\014\uffb6" +
    "\015\uffb6\001\002\000\026\003\116\006\uff76\013\uff76\015" +
    "\uffae\027\uff76\037\122\062\uff76\063\uff76\064\uff76\065\uff76" +
    "\001\002\000\010\014\uffac\015\uffac\053\235\001\002\000" +
    "\004\015\uffad\001\002\000\020\006\076\013\156\027\150" +
    "\062\152\063\064\064\157\065\147\001\002\000\004\015" +
    "\142\001\002\000\026\014\uffa4\015\uffa4\052\uffa4\053\uffa4" +
    "\054\134\055\133\056\135\057\136\060\137\061\140\001" +
    "\002\000\020\006\uff77\013\uff77\027\uff77\062\uff77\063\uff77" +
    "\064\uff77\065\uff77\001\002\000\004\015\uffaf\001\002\000" +
    "\012\014\uffa8\015\uffa8\052\125\053\uffa8\001\002\000\022" +
    "\006\uff76\013\uff76\027\uff76\037\122\062\uff76\063\uff76\064" +
    "\uff76\065\uff76\001\002\000\010\014\uffa7\015\uffa7\053\uffa7" +
    "\001\002\000\012\014\uffa5\015\uffa5\052\130\053\uffa5\001" +
    "\002\000\022\006\uff76\013\uff76\027\uff76\037\122\062\uff76" +
    "\063\uff76\064\uff76\065\uff76\001\002\000\010\014\uffa6\015" +
    "\uffa6\053\uffa6\001\002\000\022\006\uff76\013\uff76\027\uff76" +
    "\037\122\062\uff76\063\uff76\064\uff76\065\uff76\001\002\000" +
    "\022\006\uffa1\013\uffa1\027\uffa1\037\uffa1\062\uffa1\063\uffa1" +
    "\064\uffa1\065\uffa1\001\002\000\022\006\uffa2\013\uffa2\027" +
    "\uffa2\037\uffa2\062\uffa2\063\uffa2\064\uffa2\065\uffa2\001\002" +
    "\000\022\006\uffa0\013\uffa0\027\uffa0\037\uffa0\062\uffa0\063" +
    "\uffa0\064\uffa0\065\uffa0\001\002\000\022\006\uff9f\013\uff9f" +
    "\027\uff9f\037\uff9f\062\uff9f\063\uff9f\064\uff9f\065\uff9f\001" +
    "\002\000\022\006\uff9e\013\uff9e\027\uff9e\037\uff9e\062\uff9e" +
    "\063\uff9e\064\uff9e\065\uff9e\001\002\000\022\006\uff9d\013" +
    "\uff9d\027\uff9d\037\uff9d\062\uff9d\063\uff9d\064\uff9d\065\uff9d" +
    "\001\002\000\012\014\uffa3\015\uffa3\052\uffa3\053\uffa3\001" +
    "\002\000\012\003\111\006\076\014\uffb5\063\064\001\002" +
    "\000\004\014\144\001\002\000\026\006\076\011\102\030" +
    "\uffb8\031\075\032\063\033\077\034\103\035\100\050\072" +
    "\063\064\001\002\000\032\006\uffb7\011\uffb7\012\uffb7\030" +
    "\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\050\uffb7" +
    "\051\uffb7\063\uffb7\001\002\000\032\014\uff8d\015\uff8d\016" +
    "\uff8d\020\uff8d\052\uff8d\053\uff8d\054\uff8d\055\uff8d\056\uff8d" +
    "\057\uff8d\060\uff8d\061\uff8d\001\002\000\056\014\uffef\015" +
    "\uffef\016\uffef\020\uffef\036\uffef\037\uffef\040\uffef\041\uffef" +
    "\042\uffef\043\uffef\044\uffef\045\uffef\046\uffef\047\uffef\052" +
    "\uffef\053\uffef\054\uffef\055\uffef\056\uffef\057\uffef\060\uffef" +
    "\061\uffef\001\002\000\004\063\017\001\002\000\064\013" +
    "\211\014\uff7d\015\uff7d\016\uff7d\017\210\020\uff7d\024\213" +
    "\036\uff7d\037\uff7d\040\uff7d\041\uff7d\042\uff7d\043\uff7d\044" +
    "\uff7d\045\uff7d\046\uff7d\047\uff7d\052\uff7d\053\uff7d\054\uff7d" +
    "\055\uff7d\056\uff7d\057\uff7d\060\uff7d\061\uff7d\001\002\000" +
    "\056\014\ufff1\015\ufff1\016\ufff1\020\ufff1\036\ufff1\037\ufff1" +
    "\040\ufff1\041\ufff1\042\ufff1\043\ufff1\044\ufff1\045\ufff1\046" +
    "\ufff1\047\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff1" +
    "\057\ufff1\060\ufff1\061\ufff1\001\002\000\056\014\uff81\015" +
    "\uff81\016\uff81\020\uff81\036\uff81\037\uff81\040\uff81\041\uff81" +
    "\042\uff81\043\uff81\044\uff81\045\uff81\046\uff81\047\uff81\052" +
    "\uff81\053\uff81\054\uff81\055\uff81\056\uff81\057\uff81\060\uff81" +
    "\061\uff81\001\002\000\042\014\uff8c\015\uff8c\016\uff8c\020" +
    "\uff8c\036\176\037\177\040\uff89\041\uff89\052\uff8c\053\uff8c" +
    "\054\uff8c\055\uff8c\056\uff8c\057\uff8c\060\uff8c\061\uff8c\001" +
    "\002\000\056\014\uff83\015\uff83\016\uff83\020\uff83\036\uff83" +
    "\037\uff83\040\uff83\041\uff83\042\166\043\164\044\163\045" +
    "\uff85\046\uff85\047\uff85\052\uff83\053\uff83\054\uff83\055\uff83" +
    "\056\uff83\057\uff83\060\uff83\061\uff83\001\002\000\022\006" +
    "\uff76\013\uff76\027\uff76\037\122\062\uff76\063\uff76\064\uff76" +
    "\065\uff76\001\002\000\056\014\ufff0\015\ufff0\016\ufff0\020" +
    "\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0" +
    "\044\ufff0\045\ufff0\046\ufff0\047\ufff0\052\ufff0\053\ufff0\054" +
    "\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0\061\ufff0\001\002" +
    "\000\004\014\161\001\002\000\056\014\uff7f\015\uff7f\016" +
    "\uff7f\020\uff7f\036\uff7f\037\uff7f\040\uff7f\041\uff7f\042\uff7f" +
    "\043\uff7f\044\uff7f\045\uff7f\046\uff7f\047\uff7f\052\uff7f\053" +
    "\uff7f\054\uff7f\055\uff7f\056\uff7f\057\uff7f\060\uff7f\061\uff7f" +
    "\001\002\000\020\006\uff87\013\uff87\027\uff87\062\uff87\063" +
    "\uff87\064\uff87\065\uff87\001\002\000\020\006\uff6f\013\uff6f" +
    "\027\uff6f\062\uff6f\063\uff6f\064\uff6f\065\uff6f\001\002\000" +
    "\020\006\uff70\013\uff70\027\uff70\062\uff70\063\uff70\064\uff70" +
    "\065\uff70\001\002\000\010\045\170\046\171\047\172\001" +
    "\002\000\020\006\uff71\013\uff71\027\uff71\062\uff71\063\uff71" +
    "\064\uff71\065\uff71\001\002\000\020\006\076\013\156\027" +
    "\150\062\152\063\064\064\157\065\147\001\002\000\024" +
    "\003\uff6e\006\uff6e\013\uff6e\027\uff6e\037\uff6e\062\uff6e\063" +
    "\uff6e\064\uff6e\065\uff6e\001\002\000\024\003\uff6d\006\uff6d" +
    "\013\uff6d\027\uff6d\037\uff6d\062\uff6d\063\uff6d\064\uff6d\065" +
    "\uff6d\001\002\000\024\003\uff6c\006\uff6c\013\uff6c\027\uff6c" +
    "\037\uff6c\062\uff6c\063\uff6c\064\uff6c\065\uff6c\001\002\000" +
    "\042\014\uff84\015\uff84\016\uff84\020\uff84\036\uff84\037\uff84" +
    "\040\uff84\041\uff84\052\uff84\053\uff84\054\uff84\055\uff84\056" +
    "\uff84\057\uff84\060\uff84\061\uff84\001\002\000\020\006\076" +
    "\013\156\027\150\062\152\063\064\064\157\065\147\001" +
    "\002\000\042\014\uff86\015\uff86\016\uff86\020\uff86\036\uff86" +
    "\037\uff86\040\uff86\041\uff86\052\uff86\053\uff86\054\uff86\055" +
    "\uff86\056\uff86\057\uff86\060\uff86\061\uff86\001\002\000\020" +
    "\006\uff75\013\uff75\027\uff75\062\uff75\063\uff75\064\uff75\065" +
    "\uff75\001\002\000\020\006\uff74\013\uff74\027\uff74\062\uff74" +
    "\063\uff74\064\uff74\065\uff74\001\002\000\020\006\uff8b\013" +
    "\uff8b\027\uff8b\062\uff8b\063\uff8b\064\uff8b\065\uff8b\001\002" +
    "\000\006\040\204\041\202\001\002\000\024\003\uff72\006" +
    "\uff72\013\uff72\027\uff72\037\uff72\062\uff72\063\uff72\064\uff72" +
    "\065\uff72\001\002\000\020\006\076\013\156\027\150\062" +
    "\152\063\064\064\157\065\147\001\002\000\024\003\uff73" +
    "\006\uff73\013\uff73\027\uff73\037\uff73\062\uff73\063\uff73\064" +
    "\uff73\065\uff73\001\002\000\032\014\uff88\015\uff88\016\uff88" +
    "\020\uff88\052\uff88\053\uff88\054\uff88\055\uff88\056\uff88\057" +
    "\uff88\060\uff88\061\uff88\001\002\000\020\006\076\013\156" +
    "\027\150\062\152\063\064\064\157\065\147\001\002\000" +
    "\032\014\uff8a\015\uff8a\016\uff8a\020\uff8a\052\uff8a\053\uff8a" +
    "\054\uff8a\055\uff8a\056\uff8a\057\uff8a\060\uff8a\061\uff8a\001" +
    "\002\000\024\003\224\006\uff76\013\uff76\027\uff76\037\122" +
    "\062\uff76\063\uff76\064\uff76\065\uff76\001\002\000\026\003" +
    "\216\006\uff76\013\uff76\014\uff90\027\uff76\037\122\062\uff76" +
    "\063\uff76\064\uff76\065\uff76\001\002\000\056\014\uff82\015" +
    "\uff82\016\uff82\020\uff82\036\uff82\037\uff82\040\uff82\041\uff82" +
    "\042\uff82\043\uff82\044\uff82\045\uff82\046\uff82\047\uff82\052" +
    "\uff82\053\uff82\054\uff82\055\uff82\056\uff82\057\uff82\060\uff82" +
    "\061\uff82\001\002\000\004\063\214\001\002\000\072\010" +
    "\uff95\013\uff95\014\uff95\015\uff95\016\uff95\017\uff95\020\uff95" +
    "\024\uff95\025\uff95\026\uff95\036\uff95\037\uff95\040\uff95\041" +
    "\uff95\042\uff95\043\uff95\044\uff95\045\uff95\046\uff95\047\uff95" +
    "\052\uff95\053\uff95\054\uff95\055\uff95\056\uff95\057\uff95\060" +
    "\uff95\061\uff95\001\002\000\004\014\uff92\001\002\000\004" +
    "\014\uff91\001\002\000\006\014\uff8e\016\222\001\002\000" +
    "\004\014\221\001\002\000\056\014\uff7e\015\uff7e\016\uff7e" +
    "\020\uff7e\036\uff7e\037\uff7e\040\uff7e\041\uff7e\042\uff7e\043" +
    "\uff7e\044\uff7e\045\uff7e\046\uff7e\047\uff7e\052\uff7e\053\uff7e" +
    "\054\uff7e\055\uff7e\056\uff7e\057\uff7e\060\uff7e\061\uff7e\001" +
    "\002\000\022\006\uff76\013\uff76\027\uff76\037\122\062\uff76" +
    "\063\uff76\064\uff76\065\uff76\001\002\000\004\014\uff8f\001" +
    "\002\000\004\020\227\001\002\000\004\020\226\001\002" +
    "\000\072\010\uff94\013\uff94\014\uff94\015\uff94\016\uff94\017" +
    "\uff94\020\uff94\024\uff94\025\uff94\026\uff94\036\uff94\037\uff94" +
    "\040\uff94\041\uff94\042\uff94\043\uff94\044\uff94\045\uff94\046" +
    "\uff94\047\uff94\052\uff94\053\uff94\054\uff94\055\uff94\056\uff94" +
    "\057\uff94\060\uff94\061\uff94\001\002\000\072\010\uff93\013" +
    "\uff93\014\uff93\015\uff93\016\uff93\017\uff93\020\uff93\024\uff93" +
    "\025\uff93\026\uff93\036\uff93\037\uff93\040\uff93\041\uff93\042" +
    "\uff93\043\uff93\044\uff93\045\uff93\046\uff93\047\uff93\052\uff93" +
    "\053\uff93\054\uff93\055\uff93\056\uff93\057\uff93\060\uff93\061" +
    "\uff93\001\002\000\060\014\uff7b\015\uff7b\016\uff7b\017\231" +
    "\020\uff7b\036\uff7b\037\uff7b\040\uff7b\041\uff7b\042\uff7b\043" +
    "\uff7b\044\uff7b\045\uff7b\046\uff7b\047\uff7b\052\uff7b\053\uff7b" +
    "\054\uff7b\055\uff7b\056\uff7b\057\uff7b\060\uff7b\061\uff7b\001" +
    "\002\000\022\006\uff76\013\uff76\027\uff76\037\122\062\uff76" +
    "\063\uff76\064\uff76\065\uff76\001\002\000\056\014\uff80\015" +
    "\uff80\016\uff80\020\uff80\036\uff80\037\uff80\040\uff80\041\uff80" +
    "\042\uff80\043\uff80\044\uff80\045\uff80\046\uff80\047\uff80\052" +
    "\uff80\053\uff80\054\uff80\055\uff80\056\uff80\057\uff80\060\uff80" +
    "\061\uff80\001\002\000\004\020\234\001\002\000\056\014" +
    "\uff7c\015\uff7c\016\uff7c\020\uff7c\036\uff7c\037\uff7c\040\uff7c" +
    "\041\uff7c\042\uff7c\043\uff7c\044\uff7c\045\uff7c\046\uff7c\047" +
    "\uff7c\052\uff7c\053\uff7c\054\uff7c\055\uff7c\056\uff7c\057\uff7c" +
    "\060\uff7c\061\uff7c\001\002\000\022\006\uff76\013\uff76\027" +
    "\uff76\037\122\062\uff76\063\uff76\064\uff76\065\uff76\001\002" +
    "\000\010\014\uffa9\015\uffa9\053\240\001\002\000\006\014" +
    "\uffab\015\uffab\001\002\000\022\006\uff76\013\uff76\027\uff76" +
    "\037\122\062\uff76\063\uff76\064\uff76\065\uff76\001\002\000" +
    "\006\014\uffaa\015\uffaa\001\002\000\004\015\244\001\002" +
    "\000\032\006\uffba\011\uffba\012\uffba\030\uffba\031\uffba\032" +
    "\uffba\033\uffba\034\uffba\035\uffba\050\uffba\051\uffba\063\uffba" +
    "\001\002\000\032\006\uffb9\011\uffb9\012\uffb9\030\uffb9\031" +
    "\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\050\uffb9\051\uffb9" +
    "\063\uffb9\001\002\000\032\006\uffc5\011\uffc5\012\uffc5\030" +
    "\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\050\uffc5" +
    "\051\uffc5\063\uffc5\001\002\000\004\063\247\001\002\000" +
    "\072\010\uff96\013\uff96\014\uff96\015\uff96\016\uff96\017\uff96" +
    "\020\uff96\024\uff96\025\uff96\026\uff96\036\uff96\037\uff96\040" +
    "\uff96\041\uff96\042\uff96\043\uff96\044\uff96\045\uff96\046\uff96" +
    "\047\uff96\052\uff96\053\uff96\054\uff96\055\uff96\056\uff96\057" +
    "\uff96\060\uff96\061\uff96\001\002\000\022\006\uff76\013\uff76" +
    "\027\uff76\037\122\062\uff76\063\uff76\064\uff76\065\uff76\001" +
    "\002\000\006\014\uffbd\016\253\001\002\000\004\014\260" +
    "\001\002\000\004\062\255\001\002\000\006\014\uffbe\016" +
    "\256\001\002\000\006\014\uffbb\016\uffbb\001\002\000\004" +
    "\062\257\001\002\000\006\014\uffbc\016\uffbc\001\002\000" +
    "\004\015\261\001\002\000\032\006\uffc2\011\uffc2\012\uffc2" +
    "\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\050" +
    "\uffc2\051\uffc2\063\uffc2\001\002\000\032\006\uffc9\011\uffc9" +
    "\012\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035" +
    "\uffc9\050\uffc9\051\uffc9\063\uffc9\001\002\000\024\003\264" +
    "\006\uff76\013\uff76\027\uff76\037\122\062\uff76\063\uff76\064" +
    "\uff76\065\uff76\001\002\000\004\014\272\001\002\000\004" +
    "\014\266\001\002\000\026\006\076\011\102\030\uffb8\031" +
    "\075\032\063\033\077\034\103\035\100\050\072\063\064" +
    "\001\002\000\032\006\uffb3\011\uffb3\012\uffb3\030\uffb3\031" +
    "\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\050\uffb3\051\270" +
    "\063\uffb3\001\002\000\026\006\076\011\102\030\uffb8\031" +
    "\075\032\063\033\077\034\103\035\100\050\072\063\064" +
    "\001\002\000\032\006\uffb1\011\uffb1\012\uffb1\030\uffb1\031" +
    "\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\050\uffb1\051\uffb1" +
    "\063\uffb1\001\002\000\026\006\076\011\102\030\uffb8\031" +
    "\075\032\063\033\077\034\103\035\100\050\072\063\064" +
    "\001\002\000\032\006\uffb2\011\uffb2\012\uffb2\030\uffb2\031" +
    "\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\050\uffb2\051\274" +
    "\063\uffb2\001\002\000\026\006\076\011\102\030\uffb8\031" +
    "\075\032\063\033\077\034\103\035\100\050\072\063\064" +
    "\001\002\000\032\006\uffb0\011\uffb0\012\uffb0\030\uffb0\031" +
    "\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\050\uffb0\051\uffb0" +
    "\063\uffb0\001\002\000\012\012\uffd6\022\uffd6\023\uffd6\063" +
    "\uffd6\001\002\000\012\012\uffff\022\uffff\023\uffff\063\uffff" +
    "\001\002\000\012\012\uffd5\022\uffd5\023\uffd5\063\uffd5\001" +
    "\002\000\006\014\uff99\015\uff99\001\002\000\024\003\312" +
    "\006\uff76\013\uff76\027\uff76\037\122\062\uff76\063\uff76\064" +
    "\uff76\065\uff76\001\002\000\006\014\uff98\015\uff98\001\002" +
    "\000\024\003\uff78\006\uff78\013\uff78\027\uff78\037\uff78\062" +
    "\uff78\063\uff78\064\uff78\065\uff78\001\002\000\026\003\216" +
    "\006\uff76\013\uff76\014\uff90\027\uff76\037\122\062\uff76\063" +
    "\uff76\064\uff76\065\uff76\001\002\000\024\003\uff7a\006\uff7a" +
    "\013\uff7a\027\uff7a\037\uff7a\062\uff7a\063\uff7a\064\uff7a\065" +
    "\uff7a\001\002\000\024\003\uff79\006\uff79\013\uff79\027\uff79" +
    "\037\uff79\062\uff79\063\uff79\064\uff79\065\uff79\001\002\000" +
    "\004\014\311\001\002\000\006\014\uff9a\015\uff9a\001\002" +
    "\000\006\014\uff9b\015\uff9b\001\002\000\006\014\uff9c\015" +
    "\uff9c\001\002\000\006\006\076\063\064\001\002\000\010" +
    "\014\316\017\210\024\213\001\002\000\004\015\317\001" +
    "\002\000\032\006\uffc3\011\uffc3\012\uffc3\030\uffc3\031\uffc3" +
    "\032\uffc3\033\uffc3\034\uffc3\035\uffc3\050\uffc3\051\uffc3\063" +
    "\uffc3\001\002\000\004\002\uffff\001\002\000\004\002\ufffc" +
    "\001\002\000\010\015\332\016\330\063\050\001\002\000" +
    "\006\015\uffea\016\uffea\001\002\000\006\015\326\016\325" +
    "\001\002\000\004\063\050\001\002\000\014\005\uffee\007" +
    "\uffee\011\uffee\012\uffee\063\uffee\001\002\000\006\015\uffec" +
    "\016\uffec\001\002\000\004\063\050\001\002\000\006\015" +
    "\uffe9\016\uffe9\001\002\000\014\005\uffed\007\uffed\011\uffed" +
    "\012\uffed\063\uffed\001\002\000\006\015\uffeb\016\uffeb\001" +
    "\002\000\012\005\ufff5\007\ufff5\011\ufff5\063\ufff5\001\002" +
    "\000\004\063\337\001\002\000\010\003\342\011\uffdf\021" +
    "\341\001\002\000\010\003\uffe2\011\uffe2\021\uffe2\001\002" +
    "\000\004\011\uffe5\001\002\000\004\063\017\001\002\000" +
    "\004\011\uffe0\001\002\000\004\011\uffe1\001\002\000\004" +
    "\011\345\001\002\000\010\011\uffdd\012\uffdd\063\uffdd\001" +
    "\002\000\010\011\350\012\uffdb\063\017\001\002\000\004" +
    "\012\353\001\002\000\012\012\uffd9\022\uffd9\023\uffd9\063" +
    "\uffd9\001\002\000\012\012\352\022\uffd8\023\uffd8\063\uffd8" +
    "\001\002\000\004\012\uffdc\001\002\000\012\005\uffe4\007" +
    "\uffe4\011\uffe4\063\uffe4\001\002\000\012\005\uffff\007\uffff" +
    "\011\uffff\063\uffff\001\002\000\012\005\uffe3\007\uffe3\011" +
    "\uffe3\063\uffe3\001\002\000\004\063\357\001\002\000\004" +
    "\010\366\001\002\000\006\015\362\016\361\001\002\000" +
    "\004\063\363\001\002\000\012\005\ufff4\007\ufff4\011\ufff4" +
    "\063\ufff4\001\002\000\004\010\364\001\002\000\010\062" +
    "\152\064\157\065\147\001\002\000\006\015\ufff3\016\ufff3" +
    "\001\002\000\010\062\152\064\157\065\147\001\002\000" +
    "\006\015\ufff2\016\ufff2\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\366\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\047\006\001\001\000\002\001\001\000\004\044\007" +
    "\001\001\000\004\003\010\001\001\000\014\005\017\006" +
    "\012\007\015\054\014\074\013\001\001\000\004\054\355" +
    "\001\001\000\002\001\001\000\004\010\333\001\001\000" +
    "\006\012\323\013\322\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\072\021\001\001\000" +
    "\004\020\022\001\001\000\006\004\024\077\025\001\001" +
    "\000\004\073\317\001\001\000\002\001\001\000\004\014" +
    "\027\001\001\000\002\001\001\000\006\015\030\054\031" +
    "\001\001\000\004\052\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\044\035\001\001" +
    "\000\002\001\001\000\006\065\040\102\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\054\042\066\043" +
    "\001\001\000\004\013\052\001\001\000\002\001\001\000" +
    "\004\054\045\001\001\000\004\013\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\100\054\001\001\000\004" +
    "\044\055\001\001\000\004\021\056\001\001\000\006\007" +
    "\057\054\014\001\001\000\002\001\001\000\004\043\061" +
    "\001\001\000\020\016\073\022\067\032\070\053\065\063" +
    "\072\064\064\103\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\025\301\026\306\030" +
    "\303\001\001\000\004\045\275\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\040\116\050\241\001\001\000\002\001" +
    "\001\000\004\043\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\016\073\022\067\032\070\053\065\063" +
    "\072\064\064\103\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\023\111\053\065\063\112\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\024\117\033\122\034\114\036\123\040\116\050\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\051\152" +
    "\053\150\055\154\057\153\060\145\001\001\000\002\001" +
    "\001\000\004\046\131\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\036\126\037\125\040" +
    "\116\050\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\036\126\037\130\040\116\050\120\001\001\000" +
    "\002\001\001\000\006\040\116\050\140\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\023\142\053\065\063\112\001\001\000\002\001" +
    "\001\000\020\016\144\022\067\032\070\053\065\063\072" +
    "\064\064\103\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\054\227\001\001\000\004" +
    "\071\211\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\027\177\105\200\001\001\000\006\031\161\107\164" +
    "\001\001\000\006\040\116\050\157\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\106\173" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\166\001\001\000\002\001\001\000\012\051\152\053\150" +
    "\055\154\057\172\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\051\152" +
    "\053\150\055\154\057\174\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\104\205\001\001" +
    "\000\004\026\202\001\001\000\002\001\001\000\014\051" +
    "\152\053\150\055\154\057\153\060\204\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\051\152\053\150\055" +
    "\154\057\153\060\206\001\001\000\002\001\001\000\006" +
    "\040\116\050\224\001\001\000\012\040\116\050\216\067" +
    "\217\070\214\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\040\116\050\216\070\222\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\056\231\001\001\000\006\040\116\050" +
    "\232\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\034\235\035\236\036\123\040\116\050" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\034\235\035\240\036\123\040\116\050\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\040\116\050\250\001\001\000\004\041\251" +
    "\001\001\000\002\001\001\000\004\042\253\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\033\264\034\114\036\123\040\116\050\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\016" +
    "\266\022\067\032\070\053\065\063\072\064\064\103\100" +
    "\001\001\000\002\001\001\000\020\016\270\022\067\032" +
    "\070\053\065\063\072\064\064\103\100\001\001\000\002" +
    "\001\001\000\020\016\272\022\067\032\070\053\065\063" +
    "\072\064\064\103\100\001\001\000\002\001\001\000\020" +
    "\016\274\022\067\032\070\053\065\063\072\064\064\103" +
    "\100\001\001\000\002\001\001\000\004\101\276\001\001" +
    "\000\004\045\277\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\040\116\050\312\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\040\116\050\216\067\307\070" +
    "\214\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\053\314\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\045\320\001\001\000" +
    "\002\001\001\000\004\013\330\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\326\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\332\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\062\335\001\001\000\004\061\337\001\001" +
    "\000\002\001\001\000\004\075\343\001\001\000\004\054" +
    "\342\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\345\001\001\000\010\007\057\017" +
    "\346\054\014\001\001\000\002\001\001\000\004\020\350" +
    "\001\001\000\006\004\024\077\025\001\001\000\002\001" +
    "\001\000\004\076\353\001\001\000\004\045\354\001\001" +
    "\000\002\001\001\000\004\011\357\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\364\001\001\000\002\001" +
    "\001\000\004\051\366\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	Tab.init();
	Tab.currentScope.addToLocals(new Obj(Obj.Type, "bool", CUP$MJParser$actions.boolType));

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;

    }



	public enum ERROR_CODE {
		VARIABLE,
		ASSIGN,
		FORMAL_PARAMETERS,
		IF,
		FOR,
		INDEXING,
		EXTENDS,
		PARAMETERS
	}
	
	public enum LOG_TYPE {
		DEBUG,
		INFO,
		ERROR
	}

	public enum SYMBOL_TYPE {
		CONSTANT,
		VARIABLE,
		METHOD,
		PROGRAM,
		CLASS,
		ARRAY
	}
	
	private static final String MAIN = "main";
	private static final String INT = "int";
	
	private static final String error_recovery_string = "Error recovery successful: ";

	// Counting variables
	int constantsCount = 0;
	int globalVarsCount = 0;
	int globalArrayVarsCount = 0;
	int classGlobalVarsCount = 0;
	int mainFunctionVarsCount = 0;
	int globalFuncCount = 0;
	int globalStaticFuncCount = 0;
	int classFuncCount = 0;
	int classStaticFuncCount = 0;
	int statementsBlockCount = 0;
	int mainMethodFunctionCallsCount = 0;
	int functionFormParsCount = 0;
	int classDefinitionCount = 0;
	String allErrorMessages = "";
	
	boolean wasParsingSuccessful = true;
	boolean isGlobalContext = true;
	boolean isClassContext = false;
	boolean isMethodContext = false;
	boolean isStaticContext = false;
	boolean isFormalParametersContext = false;
	boolean isForContext = false;
	Obj currentMethodObject = Tab.noObj;
	Obj currentClass = Tab.noObj;
	Scope currentClassScope = null;
	
	Logger log = Logger.getLogger(getClass());
     
	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatal error, parsing is terminated", cur_token);
    }

	public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report(message, info, LOG_TYPE.ERROR);
    }
  
    public void syntax_error(Symbol cur_token) {
        report("Syntax error", cur_token, LOG_TYPE.ERROR);
    }
  	
  	public void semantic_error(String message, int line) {
        report("Semantic error on line " + line + ": " + message, null, LOG_TYPE.ERROR);
    }

  	public void usage_info(Obj usedObject, String message, int line) {
  		String visitorMessage = "";
  		if(usedObject != null) {
	  		DumpSymbolTableVisitor visitor = new DumpSymbolTableVisitor();
			//visitor.visitObjNode(usedObject);
			//visitorMessage = " [ " + visitor.getOutput() + "]"; 
		}
		report("Usage info on line " + line + ": " + message + visitorMessage, null, LOG_TYPE.DEBUG);
	}

  	public void semantic_info(String message, int line) {
		report("Semantic info on line " + line + ": " + message, null, LOG_TYPE.DEBUG);
	}
	
	public void log_symbol_detected(Obj object, String message, int line) {
		DumpSymbolTableVisitor visitor = new DumpSymbolTableVisitor();
		visitor.visitObjNode(object);
        
 		semantic_info(message + " [ " + visitor.getOutput() + "]", line);
	}
	
    public void report(String message, Object info, LOG_TYPE logType) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol) {
			msg.append (" on line ").append(((Symbol)info).left).append(", column ").append(((Symbol)info).right);
        }

		switch(logType) {
			case DEBUG:
		    	log.debug(msg.toString());
		    	break;
		    	
			case INFO:
		    	log.info(msg.toString());
		    	break;
		    	
			case ERROR:
		    	log.error(msg.toString());
		    	allErrorMessages += "\n\t\t\t\t" + msg.toString();
		    	
		    	wasParsingSuccessful = false;
		    	break;
		 }
    }
    
    // Increments proper var count. Called for every var.
    public void incrementVarsCount(boolean isArray) {
    	if(isFormalParametersContext) { return; }
    
    	// Counting variables
		if(isClassContext) {
			// Counting only class global variables, not the class method variables.
			if(!isMethodContext) {
				classGlobalVarsCount++;
			}
		} else if(isGlobalContext) {
			if(isArray) {
				globalArrayVarsCount++;
			} else {
				globalVarsCount++;
			}
		} else {
			if(isMainMethod()) {
				mainFunctionVarsCount++;
			}
		}
    }
    
    // Increments proper methods count. Called for every method.
    public void incrementMethodsCount() {
    	if(isStaticContext) {
    		if(isClassContext) {
    			classStaticFuncCount++;
    		} else {
    			globalStaticFuncCount++;
    		}
    	} else {
    		if(isClassContext) {
    			classFuncCount++;
    		} else {
    			globalFuncCount++;
    		}
    	}
    }
    
    public boolean isMainMethod() {
    	return isMethodContext && MAIN.equals(currentMethodObject.getName());
    }
    
	public String getContextStringForDeclaration() {
		return isFormalParametersContext ? "formal parameter" : isMethodContext ? "local" : isClassContext ? "class" : "global";
	}
	
    public void trackSyntaxErrorRecovery(ERROR_CODE error, String additionalInfo) {
    	String message = error_recovery_string;
    	switch (error) {
    		case VARIABLE:
    			message += getContextStringForDeclaration() + " variable declaration error "; 
    			break;
    			
    		case ASSIGN:
    			message += "Assign operator error ";
    			break;
    			
    		case FORMAL_PARAMETERS:
    			message += "Formal parameters declaration error ";
    			break;	
    		
    		case IF:
    			message += "If statement condition error ";
    			break;
    		
    		case FOR:
    			message += "For loop condition error ";
    			break;	
    		
    		case INDEXING:
    			message += "Indexing array error ";
    			break;
    			
    		case EXTENDS:
    			message += "Extends clause error ";
    			break;
    			
    		case PARAMETERS:
    			message += "Parameters list error ";
    			break;
    		    			
    		default:
    			message += "Unknown syntax error ";
    			break;
    	}
    	
    	log.debug(message + additionalInfo);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {


	private static final String SUPER_DOT = "super.";
	
	public static final String CLASS_COMPATIBILITY_PREFIX = "c0mp@tib13_c11@s_";
	public static final String STATIC_METHOD_PREFIX = "st@t1c_m3th0d_";
	public static final Struct boolType = new Struct(Struct.Bool);
		
	Struct currentType = Tab.noType;

	boolean isVoidMethod = false;
	boolean hasUsedLeftOperator = false;
	boolean isClassAndArrayCompatibleRelOp = false;
	
	// Semantic methods
	
	// We have to manually link everything to class scope because of usage before last class chaining.
	// For example if class has a variable of that class type.
	private void ChainClassScope () {
		parser.currentClass.getType().setMembers(parser.currentClassScope.getLocals());
	}
	
	
	private String getContextStringForUsage(String identifier) {
		Obj currentObject = Tab.currentScope.findSymbol(identifier);
		boolean isInCurrentScope = currentObject != null;
		if(isInCurrentScope) { return "local"; }
		
		currentObject = Tab.currentScope.getOuter().findSymbol(identifier);
		
		boolean isInOuterScope = currentObject != null;
		if(isInOuterScope) {
			return "formal parameter";
		}
		
		if(parser.isClassContext) {
			currentObject = Tab.currentScope.getOuter().getOuter().findSymbol(identifier);
			
			boolean isInClassScope = currentObject != null;
			if(isInClassScope) {
				return "class";
			}
		}
		
		return "global";
	}
	
	private void breakContinueCheck(int line) {
		if(!parser.isForContext) {
			parser.semantic_error("break/continue can be used only inside the for loop.", line);
		}
	}
	
	private boolean checkIfObjIsArray(Obj object, int line) {
		boolean isArray = object.getType().getKind() == Struct.Array;
		if(!isArray) {
			parser.semantic_error("tried to use indexing on a non-array object \"" + object.getName() + "\"", line);
		}
		
		return isArray;
	}
	
	private boolean isIndexingTypeValid(Struct expressionType, int line) {
		boolean isValid = expressionType == Tab.intType; 
		if(!isValid) {
			parser.semantic_error("wrong indexing expression type. It must be \"int\"", line);
		} 
		
		return isValid;
	}
	
	private boolean hasMethodAppropriateParams(Obj methodObject, Stack<Struct> actualParams, int line) {
		// Check number of parameters.
		if(methodObject.getLevel() != actualParams.size()) {
			parser.semantic_error("invalid number of parameters for method \"" + methodObject.getName() + "\".", line);
			return false;
		}
		
		// Check type of every parameter.
		for(Obj param : methodObject.getLocalSymbols()) {
   			if(!areCompatibleTypes(param.getType(), actualParams.pop(), line)) {
   				parser.semantic_error("formal (\"" + param.getName() + "\") and actual parameter types mismatch.", line);
   				return false;
   			}
   		}
   		
   		return true;
	}
	
	private boolean isObjectMethod(Obj object, int line) {
		boolean isMethod = object.getKind() == Obj.Meth;
		if(!isMethod && object != Tab.noObj) {
			parser.semantic_error("tried to use field \"" + object.getName() + "\" as a method.", line);
		}
		
		return isMethod;
	}
	
	private boolean isObjectVariable(Obj object, int line) {
		boolean isVariable = object.getKind() == Obj.Con || object.getKind() == Obj.Var 
			|| object.getKind() == Obj.Fld || object.getKind() == Obj.Elem;
		if(!isVariable && object != Tab.noObj) {
			parser.semantic_error("tried to use method \"" + object.getName() + "\" as a variable.", line);
		}
		
		return isVariable;
	}
	
	private boolean isRelOpCompatible(Struct type1, Struct type2, int line) {
		if((type1.getKind() == Struct.Class || type2.getKind() == Struct.Class 
			|| type1.getKind() == Struct.Array || type2.getKind() == Struct.Array
			|| type1 == boolType || type2 == boolType)
			&& !isClassAndArrayCompatibleRelOp) {
			parser.semantic_error("booleans, classes and arrays can only use \"==\" and \"!=\" relative operators.", line);
		}
		
		boolean isCompatible = type1.compatibleWith(type2);
		if(!isCompatible) {
			parser.semantic_error("tried to compare incompatible types.", line);
		}
		
		return isCompatible;
	}
	
	private boolean areCompatibleTypes(Struct type1, Struct type2, int line) {
		return areCompatibleTypes(new Obj(Obj.Var, "", type1), new Obj(Obj.Var, "", type2), false, line);
	}
	
	// First is destination type and second is source.
	private boolean areCompatibleTypes(Obj typeObj1, Obj typeObj2, boolean shouldCheckMethod, int line) {
		if(typeObj1.getKind() == Obj.Con || typeObj1.getKind() == Obj.Type || typeObj1.getKind() == Obj.Prog 
			|| (shouldCheckMethod && typeObj1.getKind() == Obj.Meth)) {
			parser.semantic_error("cannot assign to constant, method, class name or program name.", line);
			return false;
		}
		
		Struct type1 = typeObj1.getType();
		Struct type2 = typeObj2.getType();
		
		if((type1 == Tab.noType) != (type2 == Tab.noType)) { return false; }
		
		boolean areCompatible = type1.compatibleWith(type2) || 
			(type1.getKind() == Struct.Class && type2.getKind() == Struct.Class && areClassesCompatible(type1, type2));
		 
		if(!areCompatible) {
			parser.semantic_error("incompatible types.", line);
		}
	
		return areCompatible;
	}
	
	private boolean areClassesCompatible(Struct type1, Struct type2) {
		// Go through all members and see if other type has a "parent" member.
		// Destination type (Type1) needs to have all "parent" members in Type2 defined. 
		// This is to make sure that if A extends B, b = a is true and a = b is false. 
		boolean found = false;
		for(Obj fld1 : type1.getMembers()) {
			if(!fld1.getName().startsWith(CLASS_COMPATIBILITY_PREFIX)) { continue; }
			
			found = false;
			for(Obj fld2 : type2.getMembers()) {
				if(!fld2.getName().startsWith(CLASS_COMPATIBILITY_PREFIX)) { continue; }
				
	  			if(fld1.getName().equals(fld2.getName()) || fld2.getName().equals(fld1.getName())) {
	  				found = true;
	  			}
	  		}
			
			if(!found) { break; }
		}
		return found;
	}
	
	private void addClassCompatibilityVar(String className) {
		Tab.insert(Obj.Var, CLASS_COMPATIBILITY_PREFIX + className, Tab.noType);
	}
	
	private boolean isAssignableToInt(Obj object, int line) {
		return canBeAssignedTo(object, line) && isInteger(object.getType(), line);
	}
	
	private boolean canBeAssignedTo(Obj object, int line) {
		int kind = object.getKind();
		boolean isAssignable = kind == Obj.Elem || kind == Obj.Var || kind == Obj.Fld ;
		if(!isAssignable) {
			parser.semantic_error("operation can be done only on array elements, variables or class fields.", line);
		}
		
		return isAssignable;
	}
	
	// Primitive types are int, char and bool.
	private boolean isPrimitiveType(Obj object, int line) {
		Struct type = object.getType();
		boolean isPrimitive = type == Tab.intType || type == Tab.charType || type == boolType;
		if(!isPrimitive) {
			parser.semantic_error("operation can be done only on primitive types (int, char and boolean).", line);
		}
		
		return isPrimitive; 
	}
	
	private void checkRightOperatorUsageAvailability(int line) {
		if(hasUsedLeftOperator) {
			parser.semantic_error("can't use right operator after left is used.", line);
		}
	}
	
	private boolean isInteger(Struct type, int line) {
		boolean isInt = type == Tab.intType;
		if(!isInt) {
			parser.semantic_error("operation can be done only with integers.", line);
		}
		
		return isInt;
	}
	
	private Obj instantiateNewObject(Obj typeObject, Obj arrayObject, int line) {
		if(typeObject == Tab.noObj) {
			parser.semantic_error("unknown type", line);		
			return Tab.noObj;
		}
	
		boolean isArrayType = arrayObject != null && arrayObject != Tab.noObj;
		
		if(!isArrayType && typeObject.getType().getKind() != Struct.Class) {
			parser.semantic_error("tried to instantiate a primitive type \"" + typeObject.getName() + "\"", line);
			return Tab.noObj;
		} 
	
		String objectTypeString = typeObject.getName();
		if(isArrayType) {
			objectTypeString = "array of " + objectTypeString; 
		}
		parser.usage_info(null, "instantiated new object of type \"" + objectTypeString + "\".", line);
		
		return isArrayType ? arrayObject : typeObject;
	}

	// Find object with identifier name.
	private Obj findObjectWithName(String identifier, int line) {
		String ident = identifier;
		Obj result = Tab.find(ident);
		// Check if field is in supper class.
		for(int retry = 10; retry > 0 && result == Tab.noObj; retry--) {
			ident = SUPER_DOT + ident;
			result = Tab.find(ident);
		}
		
		if(result == Tab.noObj) {
			parser.semantic_error("tried to used non-existing identifier \"" + identifier + "\"", line);
		} else {
			String objectKind = "";
			switch (result.getKind()) {
				case Obj.Var:
					String contextString = getContextStringForUsage(identifier);
					objectKind = contextString + " variable";
					break;
					
				case Obj.Con:
					objectKind = "constant";
					break;
					
				case Obj.Meth:
					// In static context, only static methods and global variables can be called.
					if(parser.isStaticContext && !isStaticMethod(parser.currentClass, identifier)) {
						parser.semantic_error("tried to use non-static method \"" + identifier + "\" in static method \"" + parser.currentMethodObject.getName() + "\".", line);
					} else {
						objectKind = getContextStringForUsage(identifier) + " method";
					}
					break;
				
				case Obj.Fld:
					// In static context, only static methods and global variables can be called.
					if(parser.isStaticContext) {
						parser.semantic_error("only global variables are allowed in static methods.", line);
					} else {
						objectKind = "class variable";
					}
					break;
				
				case Obj.Type:
					parser.usage_info(result, "static member of \"" + identifier + "\" class used.", line);
					break;
				
				default:
					parser.semantic_error("unknown object kind ("+ result.getKind() +") of the identifier \"" + identifier + "\"", line);
					break;
			}
			
			if(objectKind.length() > 0) {
				parser.usage_info(result, objectKind + " \"" + identifier + "\" used.", line);
			}
		}
		
		return result;
	}
		
	private Obj findClassMemberWithName(Obj classObj, String identifier, boolean isCalledAsThis, int line) {
		Obj result = Tab.noObj;
		
		if(classObj == null) {
			parser.semantic_error("class object is null.", line);
			return result;
		}
		
		if(classObj.getType().getKind() != Struct.Class) {
			parser.semantic_error("tried to use a primitive type as a class object \"" + classObj.getName() + "\"", line);
			return result;
		}
		
		if(isCalledAsThis) {
			// If function is called as "this.identifier", that means we are in a class method and we have to search identifier in class context
			// (we have to skip methods and formal parameters contexts).
			Scope classScope = Tab.currentScope.getOuter().getOuter();
			result = classScope.findSymbol(identifier);
			
			String ident = identifier;
			// Check if field is in supper class.
			for(int retry = 10; retry > 0 && result == null; retry--) {
				ident = SUPER_DOT + ident;
				result = classScope.findSymbol(ident);
			}
			
			if(isStaticMethod(classObj, identifier)) {
				parser.semantic_error("static methods cannot be used with \"this\".", line);
				return Tab.noObj;
			}
		} else {
			// If function is called as "someObject.identifier" search among class object members.
			result = getClassMemberFromSymbols(classObj.getType().getMembers(), identifier);
			
			// Make sure that only static methods can be called outside of class.
			// Usage "SomeClass.someStaticMethod()".
			if(classObj.getKind() == Obj.Type) {
				if(result.getKind() != Obj.Meth || !isStaticMethod(classObj, identifier)) {
					parser.semantic_error("only static methods can be used in this context.", line);
					return Tab.noObj;
				}
			} else if(isStaticMethod(classObj, identifier)){
				// Static methods must be used as "SomeClass.someStaticMethod()" 
				// or only as identifier (if in static context - then findObjectWithName is called)
				parser.semantic_error("static methods must be used as SomeClassName.staticMethod().", line);
				return Tab.noObj;
			}
		}
		if(result == Tab.noObj) {
			parser.semantic_error("tried to used non-existing class member \"" + identifier + "\"", line);
		} else {
			String memberType = "UNKNOWN";
			if(result.getKind() == Obj.Meth) {
				memberType = "method";
			} 
			else if(result.getKind() == Obj.Fld) {
				memberType = "field";
			} else {
				parser.semantic_error("unknown class member type \"" + identifier + "\"", line);
			}
			
			parser.usage_info(result, "class " + memberType + " \"" + identifier + "\" of class \"" + classObj.getName() + "\" used.", line);
		}
		
		return result;
	}
	
	private boolean isStaticMethod(Obj classObject, String identifier) {
		Obj staticMethodObject = getClassMemberFromSymbols(classObject.getType().getMembers(), STATIC_METHOD_PREFIX + identifier);
		return staticMethodObject != Tab.noObj;
	}
		
	private Obj getClassMemberFromSymbols(Collection<Obj> symbols, String identifier) {
		Obj result = findSymbolWithName(symbols, identifier);
		
		// Check if field is in supper class.
		for(int retry = 10; retry > 0 && result == Tab.noObj; retry--) {
			identifier = SUPER_DOT + identifier;
			result = findSymbolWithName(symbols, identifier);
		}
		
		return result;
	}
	
	private Obj findSymbolWithName(Collection<Obj> symbols, String identifier) {
		for(Obj fld : symbols) {
  			if(fld.getName().equals(identifier)) {
  				return fld;
  			}
		}
		return Tab.noObj;
	}
	
	private boolean isThisAvailable(String identifier, int line) {
		if(!parser.isClassContext) {
			parser.semantic_error("tried to use \"this\" outside of class. (" + identifier + ")", line);
		} else if(parser.isStaticContext) {
			parser.semantic_error("tried to use \"this\" in a static function. (" + identifier + ")", line);
		}
		
		return parser.isClassContext && !parser.isStaticContext;
	}
	
    private boolean doesSymbolAlreadyExist(String name, int line) {
    	boolean doesSymbolExist = Tab.currentScope.findSymbol(name) != null;
    	if(doesSymbolExist) {
			parser.semantic_error("identifier with name \"" + name + "\" already exists.", line);
		}
		return doesSymbolExist;
    }
    
    private boolean doesTypeMatchWithCurrent(Struct type, int line) {
    	boolean doesTypeMatch = type == currentType;
    	if(!doesTypeMatch) {
    		parser.semantic_error("type mismatch.", line);
		}
		return doesTypeMatch;
    }
    
    private void isClassExtensionValid(Struct parentClassType, int line) {
		// Check if class tries to extend itself.
		if(parentClassType == parser.currentClass.getType() && parentClassType != Tab.noType) {
			parser.semantic_error("class tried to extend itself.", line);
		} 
		// Check if class tried to extend primitive or non-existing type.
		else if(parentClassType.getKind() != Struct.Class) {
			parser.semantic_error("class tried to extend primitive or non-existing type.", line);
		}
    }
    
	private Obj addConstantToSymbolTable(String name, Struct currentObjectType, Obj currentObject, int line) {
		if(currentObjectType == null || currentObjectType == Tab.noType) {
			// Failsafe.
			parser.semantic_error("Constant \"" + name + "\" doesn't have a type defined.", line);
			return Tab.noObj;
		} 

		// Check if something with that name exists and if types match.
		if(doesSymbolAlreadyExist(name, line) || !doesTypeMatchWithCurrent(currentObjectType, line)){
			return Tab.noObj;
		}
		
		// Do the insertion.
		Obj createdObject = insertToTable(SYMBOL_TYPE.CONSTANT, name, currentObjectType, line);
		// Copy value.
		createdObject.setAdr(currentObject.getAdr());

		return createdObject;
	}
		
	private Obj addVariableToSymbolTable(String name, int line, boolean isArray) {
		if(doesSymbolAlreadyExist(name, line)){
			return Tab.noObj;
		}
		
		// Symbol doesn't exist, do the insertion.
		SYMBOL_TYPE type = isArray ? SYMBOL_TYPE.ARRAY : SYMBOL_TYPE.VARIABLE;
		return insertToTable(type, name, currentType, line);
	}
	
	private Obj addMethodToSymbolTable(String name, int line) {
		// If it's a main method check if it is void. 
		if(parser.isMainMethod() && !isVoidMethod) {
			parser.semantic_error("main method must have void as a return type.", line);
			return Tab.noObj;
		} 
		
		// Check if some symbol with same name already exist.
		if(doesSymbolAlreadyExist(name, line)){
			return Tab.noObj;
		}
		
		// Check if parent class has static method with the same name.
		if(isStaticMethod(parser.currentClass, name)) {
			parser.semantic_error("static methods cannot be overriden.", line);
			return Tab.noObj;
		}
		
		// Static methods.
		if(parser.isStaticContext)
		{
			// Only class methods can be static.
			if(!parser.isClassContext) {
				parser.semantic_error("global methods can't be static.", line);
				return Tab.noObj;
			}
			
			// Add dummy variable so we can track static methods.
			Tab.insert(Obj.Var, STATIC_METHOD_PREFIX + name, Tab.noType);
		} 
				
		Struct methodType = isVoidMethod ? Tab.noType : currentType;
		return insertToTable(SYMBOL_TYPE.METHOD, name, methodType, line);	
	}
	
	private Obj addProgramToSymbolTable(String name, int line) {
		return insertToTable(SYMBOL_TYPE.PROGRAM, name, Tab.noType, line);
	}
	
	private Obj addClassTypeToSymbolTable(String name, int line) {
		return insertToTable(SYMBOL_TYPE.CLASS, name, new Struct(Struct.Class), line);
	}
	
	private Obj insertToTable(SYMBOL_TYPE symbolType, String name, Struct currentObjectType, int line) {
		int objectKind;
		String message;
		
		switch (symbolType) {
			case CONSTANT:
				objectKind = Obj.Con;
				message = "added constant \"" + name + "\" to symbol table.";
				break;
				
			case VARIABLE:
				objectKind = parser.isClassContext && !parser.isMethodContext ? Obj.Fld : Obj.Var;
				message = "added " + parser.getContextStringForDeclaration() + " variable \"" + name + "\" to symbol table.";
				break;
				
			case ARRAY:
				objectKind = parser.isClassContext && !parser.isMethodContext ? Obj.Fld : Obj.Var;
				message = "added " + parser.getContextStringForDeclaration() + " array variable \"" + name + "\" to symbol table.";
				currentObjectType = new Struct(Struct.Array, currentType);
				break;
				
			case METHOD:
				objectKind = Obj.Meth;
				String staticString = parser.isStaticContext ? "static" : "";
				message = "added " + staticString + " method \"" + name + "\" to symbol table.";
				break;
				
			case PROGRAM:
				objectKind = Obj.Prog;
				message = "added program \"" + name + "\" to symbol table.";
				break;
				
			case CLASS:
				objectKind = Obj.Type;
				message = "added class type \"" + name + "\" to symbol table.";
				break;
				
			default:
				objectKind = Obj.NO_VALUE;
				message = "UNKNOWN SYMBOL TYPE";
				parser.semantic_error(message, line);
				break;
		}
		
		// Insert object to table.
		Obj createdObject = Tab.insert(objectKind, name, currentObjectType);
				
		// Create object node string.
		parser.log_symbol_detected(createdObject, message, line);
		
		if(parser.isClassContext && symbolType != SYMBOL_TYPE.CLASS) {
			ChainClassScope();
		}
		
		return createdObject;
	}

  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // MulOpRight ::= MODULATE_EQUALS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOpRight",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // MulOpRight ::= DIVIDE_EQUALS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOpRight",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // MulOpRight ::= MULTIPLY_EQUALS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOpRight",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // MulOpLeft ::= MODULATE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOpLeft",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // MulOpLeft ::= DIVIDE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOpLeft",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // MulOpLeft ::= MULTIPLY 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOpLeft",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // AddOpRight ::= MINUS_EQUALS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddOpRight",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // AddOpRight ::= PLUS_EQUALS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddOpRight",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // AddOpLeft ::= MINUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddOpLeft",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // AddOpLeft ::= PLUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddOpLeft",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Negation ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Negation",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Negation ::= MINUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Negation",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // AssignOp ::= MulOpRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignOp",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // AssignOp ::= AddOpRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignOp",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // AssignOp ::= EQUALS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignOp",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // NewArrayType ::= 
            {
              Obj RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NewArrayType",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // NewArrayType ::= L_INDEXER Expr R_INDEXER 
            {
              Obj RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj exp = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT = isIndexingTypeValid(exp.getType(), expleft) ? new Obj(Obj.NO_VALUE, "", new Struct(Struct.Array, currentType)) : Tab.noObj; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NewArrayType",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ActParsListOptional ::= 
            {
              Stack<Struct> RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsListOptional",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ActParsListOptional ::= L_PAREN ActParsList R_PAREN 
            {
              Stack<Struct> RESULT =null;
		int parsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int parsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Stack<Struct> pars = (Stack<Struct>)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT = pars; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsListOptional",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Factor ::= L_PAREN Expr R_PAREN 
            {
              Obj RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj exp = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT = new Obj(Obj.NO_VALUE, "", exp.getType()); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Factor ::= NEW Type NewArrayType 
            {
              Obj RESULT =null;
		int typeObjectleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int typeObjectright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj typeObject = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int arrayObjectleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int arrayObjectright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj arrayObject = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = instantiateNewObject(typeObject, arrayObject, arrayObjectleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Factor ::= OneConst 
            {
              Obj RESULT =null;
		int constantleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj constant = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = constant; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Factor ::= Designator ActParsListOptional 
            {
              Obj RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Stack<Struct> params = (Stack<Struct>)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				Obj result = Tab.noObj;
				if((params == null && isObjectVariable(des, desleft)) 
				|| (params != null && isObjectMethod(des, desleft) && hasMethodAppropriateParams(des, params, desleft))) {
					result = des;
				}
				RESULT = result;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Term ::= Factor 
            {
              Obj RESULT =null;
		int facleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj fac = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = fac; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Term ::= Factor NT$13 MulOpRight Term 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int facleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int facright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj fac = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj term = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = isAssignableToInt(fac, facleft) && isInteger(term.getType(), termleft) ? fac : Tab.noObj; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$13 ::= 
            {
              Obj RESULT =null;
		int facleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj fac = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 checkRightOperatorUsageAvailability(facleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$13",69, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Term ::= Factor MulOpLeft NT$12 Term 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int facleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int facright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj fac = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj term = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = isInteger(fac.getType(), facleft) && isInteger(term.getType(), termleft) ? fac : Tab.noObj; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NT$12 ::= 
            {
              Obj RESULT =null;
		int facleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int facright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj fac = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
 hasUsedLeftOperator = true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$12",68, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // TermList ::= Term NT$11 AddOpRight TermList 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj term = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int termListleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termListright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj termList = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = isAssignableToInt(term, termleft) && isInteger(termList.getType(), termListleft) ? term : Tab.noObj; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TermList",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NT$11 ::= 
            {
              Obj RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj term = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 checkRightOperatorUsageAvailability(termleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$11",67, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // TermList ::= Term AddOpLeft NT$10 TermList 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj term = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int termListleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termListright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj termList = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = isInteger(term.getType(), termleft) && isInteger(termList.getType(), termListleft) ? term : Tab.noObj; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TermList",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NT$10 ::= 
            {
              Obj RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj term = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
 hasUsedLeftOperator = true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$10",66, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // TermList ::= Term 
            {
              Obj RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj term = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = term; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TermList",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Expr ::= Negation TermList 
            {
              Obj RESULT =null;
		int termListleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termListright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj termList = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				RESULT = termList;
				hasUsedLeftOperator = false; 
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ActPars ::= Expr 
            {
              Stack<Struct> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj exp = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				Stack<Struct> actualParamsStack = new Stack<Struct>();
				actualParamsStack.push(exp.getType());
				RESULT = actualParamsStack;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ActPars ::= Expr COMMA ActPars 
            {
              Stack<Struct> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj exp = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int parsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int parsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Stack<Struct> pars = (Stack<Struct>)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				pars.push(exp.getType());
				RESULT = pars; 
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ActParsList ::= 
            {
              Stack<Struct> RESULT =null;
		 RESULT =  new Stack<Struct>(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsList",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ActParsList ::= error 
            {
              Stack<Struct> RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.PARAMETERS, "(1)"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsList",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ActParsList ::= ActPars 
            {
              Stack<Struct> RESULT =null;
		int parsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int parsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Stack<Struct> pars = (Stack<Struct>)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = pars; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsList",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Designator ::= Designator L_INDEXER error R_INDEXER 
            {
              Obj RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.INDEXING, "(1)"); RESULT = Tab.noObj; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Designator ::= Designator L_INDEXER Expr R_INDEXER 
            {
              Obj RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj exp = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
					boolean isArrayAndHasValidIndexingType = isIndexingTypeValid(exp.getType(), expleft) && checkIfObjIsArray(des, desleft);  
					
					Obj result = Tab.noObj;
					if (isArrayAndHasValidIndexingType) {
						result = new Obj(Obj.Elem, "", des.getType().getElemType());
						parser.usage_info(des, "element of array \"" + des.getName() + "\" used.", desleft);
					}
					
					RESULT = result;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Designator ::= Designator DOT IDENT 
            {
              Obj RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = findClassMemberWithName(des, identifier, false, identifierleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Designator ::= THIS DOT IDENT 
            {
              Obj RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					RESULT = isThisAvailable(identifier, identifierleft) 
								? findClassMemberWithName(parser.currentClass, identifier, true, identifierleft)
								: Tab.noObj;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Designator ::= IDENT 
            {
              Obj RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = findObjectWithName(identifier, identifierleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DesignatorStatement ::= Designator DECREMENT 
            {
              Struct RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT = isAssignableToInt(des, desleft) ? des.getType() : Tab.noType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // DesignatorStatement ::= Designator INCREMENT 
            {
              Struct RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT = isAssignableToInt(des, desleft) ? des.getType() : Tab.noType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // DesignatorStatement ::= Designator L_PAREN ActParsList R_PAREN 
            {
              Struct RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Stack<Struct> params = (Stack<Struct>)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 
							if(parser.isMainMethod()) {
								parser.mainMethodFunctionCallsCount++;
							}
							
							RESULT = isObjectMethod(des, desleft) && hasMethodAppropriateParams(des, params, desleft) ? des.getType() : Tab.noType; 
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // DesignatorStatement ::= Designator AssignOp error 
            {
              Struct RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.ASSIGN, "(1)"); RESULT = Tab.noType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // DesignatorStatement ::= Designator AssignOp Expr 
            {
              Struct RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj exp = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = areCompatibleTypes(des, exp, true, expleft) ? des.getType() : Tab.noType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // RelOp ::= LESS_EQUAL 
            {
              Object RESULT =null;
		 isClassAndArrayCompatibleRelOp = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelOp",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // RelOp ::= LESS 
            {
              Object RESULT =null;
		 isClassAndArrayCompatibleRelOp = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelOp",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // RelOp ::= GREATER_EQUAL 
            {
              Object RESULT =null;
		 isClassAndArrayCompatibleRelOp = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelOp",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // RelOp ::= GREATER 
            {
              Object RESULT =null;
		 isClassAndArrayCompatibleRelOp = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelOp",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // RelOp ::= NOT_EQUAL 
            {
              Object RESULT =null;
		 isClassAndArrayCompatibleRelOp = true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelOp",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // RelOp ::= EQUALITY 
            {
              Object RESULT =null;
		 isClassAndArrayCompatibleRelOp = true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelOp",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CondFact ::= Expr RelOp Expr 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj exp1 = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj exp2 = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 boolean isOk = isRelOpCompatible(exp1.getType(), exp2.getType(), exp1left); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CondFact ::= Expr 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj exp = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					if(exp.getType() != boolType) {
						parser.semantic_error("expression in condition must be of boolean type.", expleft);
					}
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CondFactList ::= CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFactList",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CondFactList ::= CondFact AND CondFactList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFactList",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CondTerm ::= CondFact AND CondFactList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CondTerm ::= CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CondTermList ::= CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTermList",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CondTermList ::= CondTerm OR CondTermList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTermList",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Condition ::= CondTerm OR CondTermList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Condition ::= CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OptionalCondition ::= error 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.FOR, "(2)"); RESULT = Tab.noObj; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptionalCondition",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OptionalCondition ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptionalCondition",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OptionalCondition ::= Condition 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptionalCondition",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // IfStatement ::= IF L_PAREN error R_PAREN Statement ELSE Statement 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.IF, "(2)"); RESULT = Tab.noObj; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IfStatement",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // IfStatement ::= IF L_PAREN Condition R_PAREN Statement ELSE Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IfStatement",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // IfStatement ::= IF L_PAREN error R_PAREN Statement 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.IF, "(1)"); RESULT = Tab.noObj; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IfStatement",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // IfStatement ::= IF L_PAREN Condition R_PAREN Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IfStatement",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OptionalDesignatorStatement ::= error 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.FOR, "(1)"); RESULT = Tab.noObj; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptionalDesignatorStatement",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OptionalDesignatorStatement ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptionalDesignatorStatement",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OptionalDesignatorStatement ::= DesignatorStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptionalDesignatorStatement",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ForStatement ::= NT$9 FOR L_PAREN OptionalDesignatorStatement SEMI OptionalCondition SEMI OptionalDesignatorStatement R_PAREN Statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;
		 parser.isForContext = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForStatement",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$9 ::= 
            {
              Object RESULT =null;
 parser.isForContext = true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$9",65, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Return ::= RETURN Expr SEMI 
            {
              Struct RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj expr = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				if(isVoidMethod) {
					parser.semantic_error("void methods shouldn't return a type.", exprleft);
				} else if(!areCompatibleTypes(parser.currentMethodObject, expr, false, exprleft)) {
						parser.semantic_error("tried to return wrong value type.", exprleft);
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Return",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Return ::= RETURN SEMI 
            {
              Struct RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
				if(!isVoidMethod) {
					parser.semantic_error("method must return a type.", sleft);
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Return",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NumbersList ::= NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NumbersList",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NumbersList ::= NumbersList COMMA NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NumbersList",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NumbersListOptional ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NumbersListOptional",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NumbersListOptional ::= COMMA NumbersList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NumbersListOptional",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // StatementsList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementsList",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // StatementsList ::= StatementsList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementsList",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Statement ::= L_BRACE StatementsList R_BRACE 
            {
              Object RESULT =null;
		 parser.statementsBlockCount++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Statement ::= PRINT L_PAREN Expr NumbersListOptional R_PAREN SEMI 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj expr = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		 boolean isOk = isPrimitiveType(expr, exprleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Statement ::= READ L_PAREN Designator R_PAREN SEMI 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 boolean isOk = canBeAssignedTo(des, desleft) && isPrimitiveType(des, desleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Statement ::= Return 
            {
              Object RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int retright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct ret = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					if(!parser.isMethodContext) {
						parser.semantic_error("return can be used only in methods.", retleft);
					}
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Statement ::= CONTINUE SEMI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 breakContinueCheck(sleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Statement ::= BREAK SEMI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 breakContinueCheck(sleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Statement ::= ForStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Statement ::= IfStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Statement ::= DesignatorStatement SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FormParsList ::= Type OneVar 
            {
              Integer RESULT =null;
		
						parser.functionFormParsCount++;
						RESULT = 1; 
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsList",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FormParsList ::= FormParsList COMMA Type OneVar 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		 
						parser.functionFormParsCount++;
						RESULT = n + 1;
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsList",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FormPars ::= error 
            {
              Integer RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.FORMAL_PARAMETERS, "(1)"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FormPars ::= 
            {
              Integer RESULT =null;
		 RESULT = 0; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FormPars ::= NT$8 FormParsList 
            {
              Integer RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Integer) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int numOfElementsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int numOfElementsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer numOfElements = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					parser.isFormalParametersContext = false; // Starting form pars context
					RESULT = numOfElements; 
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$8 ::= 
            {
              Integer RESULT =null;
 parser.isFormalParametersContext = true; // Starting form pars context 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$8",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VoidType ::= VOID 
            {
              Object RESULT =null;
		 isVoidMethod = true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VoidType",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VoidType ::= Type 
            {
              Object RESULT =null;
		 isVoidMethod = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VoidType",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // StaticDeclarator ::= 
            {
              Object RESULT =null;
		 parser.isStaticContext = false; // Closing static context 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StaticDeclarator",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // StaticDeclarator ::= STATIC 
            {
              Object RESULT =null;
		 parser.isStaticContext = true; // Starting static context 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StaticDeclarator",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // MethodName ::= IDENT 
            {
              Obj RESULT =null;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					parser.currentMethodObject = addMethodToSymbolTable(methodName, methodNameleft);
					RESULT = parser.currentMethodObject; 
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodName",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MethodDecl ::= NT$5 StaticDeclarator VoidType MethodName OpenScope L_PAREN FormPars R_PAREN NT$6 OpenScope VarsList L_BRACE StatementsList R_BRACE CloseScope NT$7 CloseScope 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int metleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-13)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-13)).right;
		Obj met = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-13)).value;
		int numOfParsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).left;
		int numOfParsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).right;
		Integer numOfPars = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-16)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int metleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)).right;
		Obj met = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)).value;
		int numOfParsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int numOfParsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		Integer numOfPars = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
 
					parser.currentMethodObject = Tab.noObj;
					parser.incrementMethodsCount();
					parser.isMethodContext = false; // Closing method context
					Tab.chainLocalSymbols(met); 
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$7",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int metleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj met = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int numOfParsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int numOfParsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer numOfPars = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
 
					met.setLevel(numOfPars);
					Tab.chainLocalSymbols(met); // Hack to enable recursion. 
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$6",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$5 ::= 
            {
              Object RESULT =null;
 parser.isMethodContext = true; // Starting method context 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$5",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MethodsList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodsList",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MethodsList ::= MethodsList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodsList",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MethodsSection ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodsSection",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // MethodsSection ::= L_BRACE MethodsList R_BRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodsSection",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VarsList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarsList",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VarsList ::= VarsList VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarsList",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ClassExtender ::= 
            {
              Obj RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassExtender",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ClassExtender ::= error 
            {
              Obj RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.EXTENDS, "(1)"); RESULT = Tab.noObj; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassExtender",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ClassExtender ::= EXTENDS Type 
            {
              Obj RESULT =null;
		int parentClassObjectleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int parentClassObjectright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj parentClassObject = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
						isClassExtensionValid(parentClassObject.getType(), parentClassObjectleft);
						RESULT = parentClassObject; 
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassExtender",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ClassName ::= IDENT 
            {
              Struct RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
					parser.currentClass = addClassTypeToSymbolTable(className, classNameleft);
					Tab.openScope();
					parser.currentClassScope = Tab.currentScope();
					// Set dummy var so we can track all parents.
					addClassCompatibilityVar(className);
					
					ChainClassScope();
					RESULT = parser.currentClass.getType();
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassName",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ClassDecl ::= CLASS ClassName ClassExtender NT$3 L_BRACE VarsList MethodsSection R_BRACE NT$4 CloseScope 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		Struct c = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
		int parentClassObjectleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int parentClassObjectright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		Obj parentClassObject = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		Struct c = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int parentClassObjectleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int parentClassObjectright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Obj parentClassObject = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
 
					parser.currentClass = Tab.noObj;
					parser.currentClassScope = null;
					Tab.chainLocalSymbols(c);
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$4",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$3 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct c = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int parentClassObjectleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int parentClassObjectright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj parentClassObject = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

					if(parentClassObject != null) {
						// Set dummy var so we can track all parents.
						addClassCompatibilityVar(parentClassObject.getName());
					
						// Add all parent class members.
						for(Obj member : parentClassObject.getType().getMembers()) {
							if(member.getName().startsWith(CLASS_COMPATIBILITY_PREFIX)) { 
								addClassCompatibilityVar(member.getName().substring(CLASS_COMPATIBILITY_PREFIX.length()));
							} else {
								Obj copiedObj = Tab.insert(member.getKind(), SUPER_DOT + member.getName(), member.getType());
								copiedObj.setAdr(member.getAdr());
							}
						}
					}
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Type ::= IDENT 
            {
              Obj RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
				Obj typeNode = Tab.find(typeName);
				if (typeNode == Tab.noObj) {
					parser.semantic_error("type \"" + typeName + "\" not found in symbol table.", typeNameleft);
					RESULT = Tab.noObj;
					currentType = Tab.noType;
				}
				else {
					if (Obj.Type == typeNode.getKind()) {
						RESULT = typeNode;
						currentType = typeNode.getType();
					}
					else {
						parser.semantic_error("\"" + typeName + "\" is not a type.", typeNameleft);
						RESULT = Tab.noObj;
						currentType = Tab.noType;
					}
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OneVar ::= IDENT L_INDEXER R_INDEXER 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 
 				parser.incrementVarsCount(true);
 				addVariableToSymbolTable(varName, varNameleft, true); 
 			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OneVar",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OneVar ::= IDENT 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
				parser.incrementVarsCount(false); 
				addVariableToSymbolTable(varName, varNameleft, false);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OneVar",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VarsElementsList ::= error OneVar 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.VARIABLE, "(2)"); RESULT = Tab.noObj; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarsElementsList",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VarsElementsList ::= OneVar 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarsElementsList",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VarsElementsList ::= error COMMA OneVar 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.VARIABLE, "(1)"); RESULT = Tab.noObj; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarsElementsList",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VarsElementsList ::= VarsElementsList COMMA OneVar 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarsElementsList",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarDecl ::= Type error SEMI 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.VARIABLE, "(3)"); RESULT = Tab.noObj; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VarDecl ::= Type VarsElementsList SEMI 
            {
              Object RESULT =null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj varType = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OneConst ::= BOOL 
            {
              Obj RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean value = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					RESULT = new Obj(Obj.Con, "", boolType);  
		 	    	RESULT.setAdr(value ? 1:0);
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OneConst",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // OneConst ::= CHAR 
            {
              Obj RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character value = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					RESULT = new Obj(Obj.Con, "", Tab.charType);  
		 	    	RESULT.setAdr(value);
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OneConst",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // OneConst ::= NUMBER 
            {
              Obj RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					RESULT = new Obj(Obj.Con, "", Tab.intType);  
 	    			RESULT.setAdr((int)value);
 	    		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OneConst",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ConstList ::= IDENT EQUALS OneConst 
            {
              Object RESULT =null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int currentConstObjectleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int currentConstObjectright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj currentConstObject = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
					parser.constantsCount++; // Counting constants
					addConstantToSymbolTable(constName, currentConstObject.getType(), currentConstObject, currentConstObjectleft);
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstList ::= ConstList COMMA IDENT EQUALS OneConst 
            {
              Object RESULT =null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int currentConstObjectleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int currentConstObjectright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj currentConstObject = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
					parser.constantsCount++; // Counting constants
					addConstantToSymbolTable(constName, currentConstObject.getType(), currentConstObject, currentConstObjectleft); 
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstDecl ::= CONST Type ConstList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ProgramElement ::= NT$2 ClassDecl 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 
					parser.isClassContext = false; // Closing class context
					parser.classDefinitionCount++; 
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramElement",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$2 ::= 
            {
              Object RESULT =null;
 parser.isClassContext = true; // Starting class context 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ProgramElement ::= VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramElement",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ProgramElement ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramElement",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ProgramElementsList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramElementsList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ProgramElementsList ::= ProgramElementsList ProgramElement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramElementsList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ProgName ::= IDENT 
            {
              Obj RESULT =null;
		int programNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int programNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String programName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = addProgramToSymbolTable(programName, programNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgName",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Program ::= PROG ProgName OpenScope ProgramElementsList L_BRACE NT$0 MethodsList R_BRACE NT$1 CloseScope 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
 Tab.chainLocalSymbols(p); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
 parser.isGlobalContext = false; // Closing global context 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CloseScope ::= 
            {
              Object RESULT =null;
		 Tab.closeScope(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CloseScope",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // OpenScope ::= 
            {
              Object RESULT =null;
		 Tab.openScope(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OpenScope",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

