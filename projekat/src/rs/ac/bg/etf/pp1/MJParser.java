
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Feb 01 00:02:11 CET 2017
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.MJParser.ERROR_CODE;
import rs.ac.bg.etf.pp1.MJParser.SYMBOL_TYPE;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;
import rs.etf.pp1.symboltable.visitors.DumpSymbolTableVisitor;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Feb 01 00:02:11 CET 2017
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\226\000\002\002\004\000\002\073\002\000\002\074" +
    "\002\000\002\102\002\000\002\103\002\000\002\002\014" +
    "\000\002\075\003\000\002\003\004\000\002\003\002\000" +
    "\002\005\003\000\002\005\003\000\002\104\002\000\002" +
    "\005\004\000\002\006\006\000\002\011\007\000\002\011" +
    "\005\000\002\076\003\000\002\076\003\000\002\076\003" +
    "\000\002\007\005\000\002\007\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\003\000\002\012\004\000\002" +
    "\013\003\000\002\013\005\000\002\101\003\000\002\105" +
    "\002\000\002\010\014\000\002\100\003\000\002\021\004" +
    "\000\002\021\003\000\002\021\002\000\002\024\004\000" +
    "\002\024\002\000\002\022\005\000\002\022\002\000\002" +
    "\023\004\000\002\023\002\000\002\106\002\000\002\107" +
    "\002\000\002\004\020\000\002\077\003\000\002\014\003" +
    "\000\002\014\002\000\002\015\003\000\002\015\003\000" +
    "\002\110\002\000\002\016\004\000\002\016\002\000\002" +
    "\016\003\000\002\020\006\000\002\020\004\000\002\017" +
    "\004\000\002\017\003\000\002\017\003\000\002\017\004" +
    "\000\002\017\004\000\002\017\003\000\002\017\007\000" +
    "\002\017\010\000\002\017\005\000\002\072\004\000\002" +
    "\072\002\000\002\070\003\000\002\070\002\000\002\071" +
    "\005\000\002\071\003\000\002\067\004\000\002\067\005" +
    "\000\002\025\013\000\002\026\003\000\002\026\002\000" +
    "\002\026\003\000\002\055\007\000\002\055\007\000\002" +
    "\055\011\000\002\055\011\000\002\027\003\000\002\027" +
    "\002\000\002\027\003\000\002\057\004\000\002\061\005" +
    "\000\002\061\002\000\002\060\004\000\002\063\005\000" +
    "\002\063\002\000\002\062\004\000\002\065\004\000\002" +
    "\065\002\000\002\064\003\000\002\064\003\000\002\064" +
    "\003\000\002\064\003\000\002\064\003\000\002\064\003" +
    "\000\002\030\004\000\002\031\004\000\002\033\004\000" +
    "\002\033\002\000\002\034\004\000\002\034\005\000\002" +
    "\034\005\000\002\032\004\000\002\032\004\000\002\032" +
    "\005\000\002\032\003\000\002\032\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\002\000\002\037\005\000" +
    "\002\037\003\000\002\035\005\000\002\042\004\000\002" +
    "\042\002\000\002\043\004\000\002\047\003\000\002\047" +
    "\003\000\002\047\003\000\002\040\003\000\002\040\002" +
    "\000\002\046\003\000\002\046\003\000\002\051\003\000" +
    "\002\051\003\000\002\050\003\000\002\050\003\000\002" +
    "\052\003\000\002\052\003\000\002\054\003\000\002\054" +
    "\003\000\002\054\003\000\002\053\003\000\002\053\003" +
    "\000\002\053\003\000\002\041\004\000\002\045\005\000" +
    "\002\045\002\000\002\044\004\000\002\044\003\000\002" +
    "\044\003\000\002\044\003\000\002\044\005\000\002\044" +
    "\005\000\002\056\005\000\002\056\002\000\002\066\005" +
    "\000\002\066\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\356\000\004\004\005\001\002\000\004\002\360\001" +
    "\002\000\004\062\006\001\002\000\012\005\ufffb\006\ufffb" +
    "\010\ufffb\062\ufffb\001\002\000\012\005\000\006\000\010" +
    "\000\062\000\001\002\000\012\005\ufff9\006\ufff9\010\ufff9" +
    "\062\ufff9\001\002\000\012\005\ufff6\006\012\010\021\062" +
    "\017\001\002\000\004\062\017\001\002\000\012\005\ufff8" +
    "\006\ufff8\010\ufff8\062\ufff8\001\002\000\004\005\322\001" +
    "\002\000\006\003\307\062\050\001\002\000\012\005\ufff7" +
    "\006\ufff7\010\ufff7\062\ufff7\001\002\000\070\003\uffe6\010" +
    "\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\035\uffe6" +
    "\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044" +
    "\uffe6\045\uffe6\046\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6" +
    "\055\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6\001" +
    "\002\000\012\005\ufffa\006\ufffa\010\ufffa\062\ufffa\001\002" +
    "\000\012\011\ufffe\021\ufffe\022\ufffe\062\ufffe\001\002\000" +
    "\012\011\uffda\021\uffda\022\uffda\062\uffda\001\002\000\012" +
    "\011\025\021\uffd9\022\uffd9\062\uffd9\001\002\000\012\011" +
    "\uffdb\021\uffdb\022\uffdb\062\uffdb\001\002\000\004\002\ufffd" +
    "\001\002\000\010\021\027\022\uffd4\062\uffd4\001\002\000" +
    "\006\022\uffd5\062\uffd5\001\002\000\006\022\033\062\017" +
    "\001\002\000\004\062\034\001\002\000\004\062\uffd3\001" +
    "\002\000\004\062\uffd2\001\002\000\004\012\uffd6\001\002" +
    "\000\004\012\000\001\002\000\004\012\037\001\002\000" +
    "\010\003\040\013\uffcf\062\uffd1\001\002\000\004\013\uffce" +
    "\001\002\000\004\013\054\001\002\000\004\062\017\001" +
    "\002\000\004\062\050\001\002\000\006\013\uffd0\015\045" +
    "\001\002\000\004\062\017\001\002\000\004\062\050\001" +
    "\002\000\006\013\uffcd\015\uffcd\001\002\000\012\013\uffe8" +
    "\014\uffe8\015\uffe8\016\051\001\002\000\004\017\052\001" +
    "\002\000\010\013\uffe7\014\uffe7\015\uffe7\001\002\000\006" +
    "\013\uffcc\015\uffcc\001\002\000\006\010\uffde\062\uffde\001" +
    "\002\000\006\010\057\062\017\001\002\000\010\010\uffdf" +
    "\011\uffdf\062\uffdf\001\002\000\026\010\uffc1\011\uffc1\027" +
    "\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\047\uffc1" +
    "\062\uffc1\001\002\000\026\010\077\011\066\027\064\030" +
    "\074\031\061\032\075\033\100\034\076\047\071\062\062" +
    "\001\002\000\004\012\301\001\002\000\074\007\uff9d\012" +
    "\uff9d\013\uff9d\014\uff9d\015\uff9d\016\uff9d\017\uff9d\023\uff9d" +
    "\024\uff9d\025\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041" +
    "\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\051\uff9d" +
    "\052\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d\060" +
    "\uff9d\061\uff9d\001\002\000\030\010\uffc6\011\uffc6\027\uffc6" +
    "\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\047\uffc6\050" +
    "\uffc6\062\uffc6\001\002\000\004\012\254\001\002\000\024" +
    "\007\246\012\245\024\240\025\242\037\142\040\140\044" +
    "\134\045\130\046\125\001\002\000\012\011\uffd8\021\uffd8" +
    "\022\uffd8\062\uffd8\001\002\000\030\010\uffc9\011\uffc9\027" +
    "\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\047\uffc9" +
    "\050\uffc9\062\uffc9\001\002\000\030\010\uffca\011\uffca\027" +
    "\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca\047\uffca" +
    "\050\uffca\062\uffca\001\002\000\004\012\201\001\002\000" +
    "\004\014\200\001\002\000\026\010\uffc2\011\uffc2\027\uffc2" +
    "\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\047\uffc2\062" +
    "\uffc2\001\002\000\004\012\167\001\002\000\004\014\166" +
    "\001\002\000\022\012\uff87\014\107\026\uff87\036\106\061" +
    "\uff87\062\uff87\063\uff87\064\uff87\001\002\000\026\010\uffc1" +
    "\011\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034" +
    "\uffc1\047\uffc1\062\uffc1\001\002\000\004\014\101\001\002" +
    "\000\030\010\uffc8\011\uffc8\027\uffc8\030\uffc8\031\uffc8\032" +
    "\uffc8\033\uffc8\034\uffc8\047\uffc8\050\uffc8\062\uffc8\001\002" +
    "\000\026\010\077\011\103\027\064\030\074\031\061\032" +
    "\075\033\100\034\076\047\071\062\062\001\002\000\030" +
    "\010\uffc3\011\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033" +
    "\uffc3\034\uffc3\047\uffc3\050\uffc3\062\uffc3\001\002\000\016" +
    "\012\117\026\112\061\114\062\062\063\120\064\111\001" +
    "\002\000\004\014\110\001\002\000\016\012\uff88\026\uff88" +
    "\061\uff88\062\uff88\063\uff88\064\uff88\001\002\000\030\010" +
    "\uffbc\011\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc" +
    "\034\uffbc\047\uffbc\050\uffbc\062\uffbc\001\002\000\030\010" +
    "\uffbb\011\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb" +
    "\034\uffbb\047\uffbb\050\uffbb\062\uffbb\001\002\000\060\013" +
    "\uff72\014\uff72\015\uff72\017\uff72\035\uff72\036\uff72\037\uff72" +
    "\040\uff72\041\uff72\042\uff72\043\uff72\044\uff72\045\uff72\046" +
    "\uff72\051\uff72\052\uff72\053\uff72\054\uff72\055\uff72\056\uff72" +
    "\057\uff72\060\uff72\061\uff72\001\002\000\004\062\017\001" +
    "\002\000\062\012\150\013\uff6e\014\uff6e\015\uff6e\017\uff6e" +
    "\035\uff6e\036\uff6e\037\uff6e\040\uff6e\041\uff6e\042\uff6e\043" +
    "\uff6e\044\uff6e\045\uff6e\046\uff6e\051\uff6e\052\uff6e\053\uff6e" +
    "\054\uff6e\055\uff6e\056\uff6e\057\uff6e\060\uff6e\061\uff6e\001" +
    "\002\000\060\013\uff74\014\uff74\015\uff74\017\uff74\035\uff74" +
    "\036\uff74\037\uff74\040\uff74\041\uff74\042\uff74\043\uff74\044" +
    "\uff74\045\uff74\046\uff74\051\uff74\052\uff74\053\uff74\054\uff74" +
    "\055\uff74\056\uff74\057\uff74\060\uff74\061\uff74\001\002\000" +
    "\044\013\uff8d\014\uff8d\015\uff8d\017\uff8d\035\uff8d\036\uff8d" +
    "\037\uff8d\040\uff8d\051\uff8d\052\uff8d\053\uff8d\054\uff8d\055" +
    "\uff8d\056\uff8d\057\uff8d\060\uff8d\061\uff8d\001\002\000\060" +
    "\013\uff76\014\uff76\015\uff76\017\uff76\035\uff76\036\uff76\037" +
    "\uff76\040\uff76\041\uff76\042\uff76\043\uff76\044\uff76\045\uff76" +
    "\046\uff76\051\uff76\052\uff76\053\uff76\054\uff76\055\uff76\056" +
    "\uff76\057\uff76\060\uff76\061\uff76\001\002\000\020\012\uff87" +
    "\026\uff87\036\106\061\uff87\062\uff87\063\uff87\064\uff87\001" +
    "\002\000\060\013\uff73\014\uff73\015\uff73\017\uff73\035\uff73" +
    "\036\uff73\037\uff73\040\uff73\041\uff73\042\uff73\043\uff73\044" +
    "\uff73\045\uff73\046\uff73\051\uff73\052\uff73\053\uff73\054\uff73" +
    "\055\uff73\056\uff73\057\uff73\060\uff73\061\uff73\001\002\000" +
    "\004\013\122\001\002\000\060\013\uff70\014\uff70\015\uff70" +
    "\017\uff70\035\uff70\036\uff70\037\uff70\040\uff70\041\uff70\042" +
    "\uff70\043\uff70\044\uff70\045\uff70\046\uff70\051\uff70\052\uff70" +
    "\053\uff70\054\uff70\055\uff70\056\uff70\057\uff70\060\uff70\061" +
    "\uff70\001\002\000\060\013\uff78\014\uff78\015\uff78\017\uff78" +
    "\035\uff78\036\uff78\037\uff78\040\uff78\041\126\042\124\043" +
    "\127\044\134\045\130\046\125\051\uff78\052\uff78\053\uff78" +
    "\054\uff78\055\uff78\056\uff78\057\uff78\060\uff78\061\uff78\001" +
    "\002\000\016\012\uff7d\026\uff7d\061\uff7d\062\uff7d\063\uff7d" +
    "\064\uff7d\001\002\000\022\003\uff79\012\uff79\026\uff79\036" +
    "\uff79\061\uff79\062\uff79\063\uff79\064\uff79\001\002\000\016" +
    "\012\uff7e\026\uff7e\061\uff7e\062\uff7e\063\uff7e\064\uff7e\001" +
    "\002\000\016\012\uff7c\026\uff7c\061\uff7c\062\uff7c\063\uff7c" +
    "\064\uff7c\001\002\000\022\003\uff7a\012\uff7a\026\uff7a\036" +
    "\uff7a\061\uff7a\062\uff7a\063\uff7a\064\uff7a\001\002\000\016" +
    "\012\uff7f\026\uff7f\061\uff7f\062\uff7f\063\uff7f\064\uff7f\001" +
    "\002\000\016\012\uff80\026\uff80\061\uff80\062\uff80\063\uff80" +
    "\064\uff80\001\002\000\016\012\117\026\112\061\114\062" +
    "\062\063\120\064\111\001\002\000\022\003\uff7b\012\uff7b" +
    "\026\uff7b\036\uff7b\061\uff7b\062\uff7b\063\uff7b\064\uff7b\001" +
    "\002\000\060\013\uff77\014\uff77\015\uff77\017\uff77\035\uff77" +
    "\036\uff77\037\uff77\040\uff77\041\uff77\042\uff77\043\uff77\044" +
    "\uff77\045\uff77\046\uff77\051\uff77\052\uff77\053\uff77\054\uff77" +
    "\055\uff77\056\uff77\057\uff77\060\uff77\061\uff77\001\002\000" +
    "\044\013\uff8f\014\uff8f\015\uff8f\017\uff8f\035\137\036\143" +
    "\037\142\040\140\051\uff8f\052\uff8f\053\uff8f\054\uff8f\055" +
    "\uff8f\056\uff8f\057\uff8f\060\uff8f\061\uff8f\001\002\000\016" +
    "\012\uff84\026\uff84\061\uff84\062\uff84\063\uff84\064\uff84\001" +
    "\002\000\022\003\uff81\012\uff81\026\uff81\036\uff81\061\uff81" +
    "\062\uff81\063\uff81\064\uff81\001\002\000\016\012\uff85\026" +
    "\uff85\061\uff85\062\uff85\063\uff85\064\uff85\001\002\000\022" +
    "\003\uff82\012\uff82\026\uff82\036\uff82\061\uff82\062\uff82\063" +
    "\uff82\064\uff82\001\002\000\016\012\uff83\026\uff83\061\uff83" +
    "\062\uff83\063\uff83\064\uff83\001\002\000\016\012\uff86\026" +
    "\uff86\061\uff86\062\uff86\063\uff86\064\uff86\001\002\000\044" +
    "\013\uff8e\014\uff8e\015\uff8e\017\uff8e\035\uff8e\036\uff8e\037" +
    "\uff8e\040\uff8e\051\uff8e\052\uff8e\053\uff8e\054\uff8e\055\uff8e" +
    "\056\uff8e\057\uff8e\060\uff8e\061\uff8e\001\002\000\016\012" +
    "\117\026\112\061\114\062\062\063\120\064\111\001\002" +
    "\000\044\013\uff8c\014\uff8c\015\uff8c\017\uff8c\035\uff8c\036" +
    "\uff8c\037\uff8c\040\uff8c\051\uff8c\052\uff8c\053\uff8c\054\uff8c" +
    "\055\uff8c\056\uff8c\057\uff8c\060\uff8c\061\uff8c\001\002\000" +
    "\024\003\152\012\uff87\013\uff92\026\uff87\036\106\061\uff87" +
    "\062\uff87\063\uff87\064\uff87\001\002\000\060\013\uff75\014" +
    "\uff75\015\uff75\017\uff75\035\uff75\036\uff75\037\uff75\040\uff75" +
    "\041\uff75\042\uff75\043\uff75\044\uff75\045\uff75\046\uff75\051" +
    "\uff75\052\uff75\053\uff75\054\uff75\055\uff75\056\uff75\057\uff75" +
    "\060\uff75\061\uff75\001\002\000\004\013\uff93\001\002\000" +
    "\006\013\uff94\015\157\001\002\000\006\013\uff90\015\uff90" +
    "\001\002\000\004\013\156\001\002\000\060\013\uff6f\014" +
    "\uff6f\015\uff6f\017\uff6f\035\uff6f\036\uff6f\037\uff6f\040\uff6f" +
    "\041\uff6f\042\uff6f\043\uff6f\044\uff6f\045\uff6f\046\uff6f\051" +
    "\uff6f\052\uff6f\053\uff6f\054\uff6f\055\uff6f\056\uff6f\057\uff6f" +
    "\060\uff6f\061\uff6f\001\002\000\020\012\uff87\026\uff87\036" +
    "\106\061\uff87\062\uff87\063\uff87\064\uff87\001\002\000\006" +
    "\013\uff91\015\uff91\001\002\000\062\013\uff6c\014\uff6c\015" +
    "\uff6c\016\162\017\uff6c\035\uff6c\036\uff6c\037\uff6c\040\uff6c" +
    "\041\uff6c\042\uff6c\043\uff6c\044\uff6c\045\uff6c\046\uff6c\051" +
    "\uff6c\052\uff6c\053\uff6c\054\uff6c\055\uff6c\056\uff6c\057\uff6c" +
    "\060\uff6c\061\uff6c\001\002\000\020\012\uff87\026\uff87\036" +
    "\106\061\uff87\062\uff87\063\uff87\064\uff87\001\002\000\060" +
    "\013\uff71\014\uff71\015\uff71\017\uff71\035\uff71\036\uff71\037" +
    "\uff71\040\uff71\041\uff71\042\uff71\043\uff71\044\uff71\045\uff71" +
    "\046\uff71\051\uff71\052\uff71\053\uff71\054\uff71\055\uff71\056" +
    "\uff71\057\uff71\060\uff71\061\uff71\001\002\000\004\017\165" +
    "\001\002\000\060\013\uff6d\014\uff6d\015\uff6d\017\uff6d\035" +
    "\uff6d\036\uff6d\037\uff6d\040\uff6d\041\uff6d\042\uff6d\043\uff6d" +
    "\044\uff6d\045\uff6d\046\uff6d\051\uff6d\052\uff6d\053\uff6d\054" +
    "\uff6d\055\uff6d\056\uff6d\057\uff6d\060\uff6d\061\uff6d\001\002" +
    "\000\030\010\uffc7\011\uffc7\027\uffc7\030\uffc7\031\uffc7\032" +
    "\uffc7\033\uffc7\034\uffc7\047\uffc7\050\uffc7\062\uffc7\001\002" +
    "\000\020\012\uff87\026\uff87\036\106\061\uff87\062\uff87\063" +
    "\uff87\064\uff87\001\002\000\006\013\uffbf\061\172\001\002" +
    "\000\004\013\176\001\002\000\006\013\uffbd\014\uffbd\001" +
    "\002\000\006\013\uffc0\014\174\001\002\000\004\061\175" +
    "\001\002\000\006\013\uffbe\014\uffbe\001\002\000\004\014" +
    "\177\001\002\000\030\010\uffc4\011\uffc4\027\uffc4\030\uffc4" +
    "\031\uffc4\032\uffc4\033\uffc4\034\uffc4\047\uffc4\050\uffc4\062" +
    "\uffc4\001\002\000\030\010\uffcb\011\uffcb\027\uffcb\030\uffcb" +
    "\031\uffcb\032\uffcb\033\uffcb\034\uffcb\047\uffcb\050\uffcb\062" +
    "\uffcb\001\002\000\022\003\203\012\uff87\026\uff87\036\106" +
    "\061\uff87\062\uff87\063\uff87\064\uff87\001\002\000\010\013" +
    "\uffad\014\uffad\052\uffad\001\002\000\004\013\227\001\002" +
    "\000\026\013\uffa7\014\uffa7\051\uffa7\052\uffa7\053\220\054" +
    "\216\055\221\056\222\057\223\060\225\001\002\000\012" +
    "\013\uffaa\014\uffaa\051\uffaa\052\uffaa\001\002\000\004\013" +
    "\207\001\002\000\024\010\077\027\064\030\074\031\061" +
    "\032\075\033\100\034\076\047\071\062\062\001\002\000" +
    "\030\010\uffb6\011\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6" +
    "\033\uffb6\034\uffb6\047\uffb6\050\211\062\uffb6\001\002\000" +
    "\024\010\077\027\064\030\074\031\061\032\075\033\100" +
    "\034\076\047\071\062\062\001\002\000\030\010\uffb4\011" +
    "\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4" +
    "\047\uffb4\050\uffb4\062\uffb4\001\002\000\012\013\uffac\014" +
    "\uffac\051\214\052\uffac\001\002\000\020\012\uff87\026\uff87" +
    "\036\106\061\uff87\062\uff87\063\uff87\064\uff87\001\002\000" +
    "\012\013\uffab\014\uffab\051\uffab\052\uffab\001\002\000\020" +
    "\012\uffa5\026\uffa5\036\uffa5\061\uffa5\062\uffa5\063\uffa5\064" +
    "\uffa5\001\002\000\020\012\uff87\026\uff87\036\106\061\uff87" +
    "\062\uff87\063\uff87\064\uff87\001\002\000\020\012\uffa6\026" +
    "\uffa6\036\uffa6\061\uffa6\062\uffa6\063\uffa6\064\uffa6\001\002" +
    "\000\020\012\uffa4\026\uffa4\036\uffa4\061\uffa4\062\uffa4\063" +
    "\uffa4\064\uffa4\001\002\000\020\012\uffa3\026\uffa3\036\uffa3" +
    "\061\uffa3\062\uffa3\063\uffa3\064\uffa3\001\002\000\020\012" +
    "\uffa2\026\uffa2\036\uffa2\061\uffa2\062\uffa2\063\uffa2\064\uffa2" +
    "\001\002\000\012\013\uffa9\014\uffa9\051\uffa9\052\uffa9\001" +
    "\002\000\020\012\uffa1\026\uffa1\036\uffa1\061\uffa1\062\uffa1" +
    "\063\uffa1\064\uffa1\001\002\000\012\013\uffa8\014\uffa8\051" +
    "\uffa8\052\uffa8\001\002\000\024\010\077\027\064\030\074" +
    "\031\061\032\075\033\100\034\076\047\071\062\062\001" +
    "\002\000\030\010\uffb5\011\uffb5\027\uffb5\030\uffb5\031\uffb5" +
    "\032\uffb5\033\uffb5\034\uffb5\047\uffb5\050\231\062\uffb5\001" +
    "\002\000\024\010\077\027\064\030\074\031\061\032\075" +
    "\033\100\034\076\047\071\062\062\001\002\000\030\010" +
    "\uffb3\011\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3" +
    "\034\uffb3\047\uffb3\050\uffb3\062\uffb3\001\002\000\010\013" +
    "\uffaf\014\uffaf\052\234\001\002\000\020\012\uff87\026\uff87" +
    "\036\106\061\uff87\062\uff87\063\uff87\064\uff87\001\002\000" +
    "\010\013\uffae\014\uffae\052\uffae\001\002\000\012\011\uffff" +
    "\021\uffff\022\uffff\062\uffff\001\002\000\012\011\uffd7\021" +
    "\uffd7\022\uffd7\062\uffd7\001\002\000\006\013\uff96\014\uff96" +
    "\001\002\000\022\003\252\012\uff87\026\uff87\036\106\061" +
    "\uff87\062\uff87\063\uff87\064\uff87\001\002\000\006\013\uff95" +
    "\014\uff95\001\002\000\006\013\uffa0\014\uffa0\001\002\000" +
    "\022\003\uff89\012\uff89\026\uff89\036\uff89\061\uff89\062\uff89" +
    "\063\uff89\064\uff89\001\002\000\024\003\152\012\uff87\013" +
    "\uff92\026\uff87\036\106\061\uff87\062\uff87\063\uff87\064\uff87" +
    "\001\002\000\022\003\uff8b\012\uff8b\026\uff8b\036\uff8b\061" +
    "\uff8b\062\uff8b\063\uff8b\064\uff8b\001\002\000\022\003\uff8a" +
    "\012\uff8a\026\uff8a\036\uff8a\061\uff8a\062\uff8a\063\uff8a\064" +
    "\uff8a\001\002\000\004\013\251\001\002\000\006\013\uff97" +
    "\014\uff97\001\002\000\006\013\uff98\014\uff98\001\002\000" +
    "\006\013\uff99\014\uff99\001\002\000\010\003\256\014\uffb8" +
    "\062\062\001\002\000\004\014\260\001\002\000\006\013" +
    "\uffb7\014\uffb7\001\002\000\006\013\uffb9\014\uffb9\001\002" +
    "\000\024\003\261\012\uff87\014\uffb1\026\uff87\036\106\061" +
    "\uff87\062\uff87\063\uff87\064\uff87\001\002\000\004\014\uffb0" +
    "\001\002\000\004\014\264\001\002\000\004\014\uffb2\001" +
    "\002\000\010\003\256\013\uffb8\062\062\001\002\000\004" +
    "\013\266\001\002\000\024\010\077\027\064\030\074\031" +
    "\061\032\075\033\100\034\076\047\071\062\062\001\002" +
    "\000\030\010\uffba\011\uffba\027\uffba\030\uffba\031\uffba\032" +
    "\uffba\033\uffba\034\uffba\047\uffba\050\uffba\062\uffba\001\002" +
    "\000\074\007\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f\016" +
    "\272\017\uff9f\023\273\024\uff9f\025\uff9f\035\uff9f\036\uff9f" +
    "\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045" +
    "\uff9f\046\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f" +
    "\056\uff9f\057\uff9f\060\uff9f\061\uff9f\001\002\000\074\007" +
    "\uff9e\012\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e\017\uff9e" +
    "\023\uff9e\024\uff9e\025\uff9e\035\uff9e\036\uff9e\037\uff9e\040" +
    "\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e" +
    "\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e\056\uff9e\057" +
    "\uff9e\060\uff9e\061\uff9e\001\002\000\022\003\275\012\uff87" +
    "\026\uff87\036\106\061\uff87\062\uff87\063\uff87\064\uff87\001" +
    "\002\000\004\062\274\001\002\000\074\007\uff9c\012\uff9c" +
    "\013\uff9c\014\uff9c\015\uff9c\016\uff9c\017\uff9c\023\uff9c\024" +
    "\uff9c\025\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c" +
    "\042\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c\051\uff9c\052" +
    "\uff9c\053\uff9c\054\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c" +
    "\061\uff9c\001\002\000\004\017\300\001\002\000\004\017" +
    "\277\001\002\000\074\007\uff9b\012\uff9b\013\uff9b\014\uff9b" +
    "\015\uff9b\016\uff9b\017\uff9b\023\uff9b\024\uff9b\025\uff9b\035" +
    "\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b" +
    "\044\uff9b\045\uff9b\046\uff9b\051\uff9b\052\uff9b\053\uff9b\054" +
    "\uff9b\055\uff9b\056\uff9b\057\uff9b\060\uff9b\061\uff9b\001\002" +
    "\000\074\007\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a\016" +
    "\uff9a\017\uff9a\023\uff9a\024\uff9a\025\uff9a\035\uff9a\036\uff9a" +
    "\037\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045" +
    "\uff9a\046\uff9a\051\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a" +
    "\056\uff9a\057\uff9a\060\uff9a\061\uff9a\001\002\000\004\062" +
    "\062\001\002\000\004\013\303\001\002\000\004\014\304" +
    "\001\002\000\030\010\uffc5\011\uffc5\027\uffc5\030\uffc5\031" +
    "\uffc5\032\uffc5\033\uffc5\034\uffc5\047\uffc5\050\uffc5\062\uffc5" +
    "\001\002\000\004\002\uffff\001\002\000\004\002\ufffc\001" +
    "\002\000\010\014\317\015\315\062\050\001\002\000\006" +
    "\014\uffea\015\uffea\001\002\000\006\014\313\015\312\001" +
    "\002\000\004\062\050\001\002\000\014\005\uffee\006\uffee" +
    "\010\uffee\011\uffee\062\uffee\001\002\000\006\014\uffec\015" +
    "\uffec\001\002\000\004\062\050\001\002\000\006\014\uffe9" +
    "\015\uffe9\001\002\000\014\005\uffed\006\uffed\010\uffed\011" +
    "\uffed\062\uffed\001\002\000\006\014\uffeb\015\uffeb\001\002" +
    "\000\012\005\ufff5\006\ufff5\010\ufff5\062\ufff5\001\002\000" +
    "\004\062\324\001\002\000\010\003\000\010\000\020\000" +
    "\001\002\000\010\003\uffe3\010\uffe3\020\uffe3\001\002\000" +
    "\010\003\330\010\uffe0\020\327\001\002\000\004\010\332" +
    "\001\002\000\004\062\017\001\002\000\004\010\uffe1\001" +
    "\002\000\004\010\uffe2\001\002\000\010\010\uffde\011\uffde" +
    "\062\uffde\001\002\000\010\010\335\011\uffdc\062\017\001" +
    "\002\000\004\011\340\001\002\000\012\011\uffda\021\uffda" +
    "\022\uffda\062\uffda\001\002\000\012\011\337\021\uffd9\022" +
    "\uffd9\062\uffd9\001\002\000\004\011\uffdd\001\002\000\012" +
    "\005\uffe5\006\uffe5\010\uffe5\062\uffe5\001\002\000\012\005" +
    "\uffff\006\uffff\010\uffff\062\uffff\001\002\000\012\005\uffe4" +
    "\006\uffe4\010\uffe4\062\uffe4\001\002\000\004\062\344\001" +
    "\002\000\004\007\356\001\002\000\006\014\347\015\346" +
    "\001\002\000\004\062\350\001\002\000\012\005\ufff4\006" +
    "\ufff4\010\ufff4\062\ufff4\001\002\000\004\007\351\001\002" +
    "\000\010\061\353\063\355\064\354\001\002\000\006\014" +
    "\ufff3\015\ufff3\001\002\000\006\014\ufff1\015\ufff1\001\002" +
    "\000\006\014\uffef\015\uffef\001\002\000\006\014\ufff0\015" +
    "\ufff0\001\002\000\010\061\353\063\355\064\354\001\002" +
    "\000\006\014\ufff2\015\ufff2\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\356\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\075\006\001\001\000\002\001\001\000\004\073\007" +
    "\001\001\000\004\003\010\001\001\000\014\005\017\006" +
    "\012\007\015\101\014\104\013\001\001\000\004\101\342" +
    "\001\001\000\002\001\001\000\004\010\320\001\001\000" +
    "\006\012\310\013\307\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\102\021\001\001\000" +
    "\004\023\022\001\001\000\006\004\023\106\025\001\001" +
    "\000\002\001\001\000\004\103\304\001\001\000\004\014" +
    "\027\001\001\000\002\001\001\000\006\015\030\101\031" +
    "\001\001\000\004\077\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\073\035\001\001" +
    "\000\002\001\001\000\006\016\040\110\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\043\101\042" +
    "\001\001\000\004\013\052\001\001\000\002\001\001\000" +
    "\004\101\045\001\001\000\004\013\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\054\001\001\000\006" +
    "\007\055\101\014\001\001\000\002\001\001\000\004\072" +
    "\057\001\001\000\016\017\072\025\066\030\071\031\064" +
    "\055\067\067\062\001\001\000\002\001\001\000\004\033" +
    "\267\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\032\242\047\240\050\246\053\243\001\001\000\004\107" +
    "\235\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\035\104\040\103\001\001" +
    "\000\004\072\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\017\072\025\066\030\071\031\064\055\067" +
    "\067\062\001\001\000\002\001\001\000\010\031\112\041" +
    "\114\044\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\101\160\001\001\000\004\056\150\001\001\000\002" +
    "\001\001\000\004\042\135\001\001\000\004\045\122\001" +
    "\001\000\006\035\120\040\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\052\132\053" +
    "\130\054\131\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\031\112\044\134" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\043" +
    "\144\046\145\050\140\051\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\031\112\041\146\044\115\001\001\000\002\001\001\000" +
    "\012\035\153\036\154\037\152\040\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\035\157" +
    "\040\103\001\001\000\002\001\001\000\004\066\162\001" +
    "\001\000\006\035\163\040\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\035\167\040\103\001\001\000\006\070\170\071\172" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\035\203\040" +
    "\103\057\205\060\201\062\204\001\001\000\004\061\232" +
    "\001\001\000\002\001\001\000\006\064\216\065\223\001" +
    "\001\000\004\063\212\001\001\000\002\001\001\000\016" +
    "\017\207\025\066\030\071\031\064\055\067\067\062\001" +
    "\001\000\002\001\001\000\016\017\211\025\066\030\071" +
    "\031\064\055\067\067\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\035\203\040\103\062\214\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\035\225\040" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\017\227\025\066\030\071" +
    "\031\064\055\067\067\062\001\001\000\002\001\001\000" +
    "\016\017\231\025\066\030\071\031\064\055\067\067\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\035" +
    "\203\040\103\060\234\062\204\001\001\000\002\001\001" +
    "\000\004\074\236\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\035\252\040\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\035\153\036" +
    "\247\037\152\040\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\026\254\030\256\031\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\027\261\035\203\040\103\057\262\060\201" +
    "\062\204\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\026\264\030\256\031\064\001\001" +
    "\000\002\001\001\000\016\017\266\025\066\030\071\031" +
    "\064\055\067\067\062\001\001\000\002\001\001\000\004" +
    "\034\270\001\001\000\002\001\001\000\006\035\275\040" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\301\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\074\305\001\001\000" +
    "\002\001\001\000\004\013\315\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\313\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\317\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\100\322\001\001\000\004\073\324\001\001" +
    "\000\002\001\001\000\004\021\325\001\001\000\002\001" +
    "\001\000\004\101\330\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\332\001\001\000\010\007\055\022" +
    "\333\101\014\001\001\000\002\001\001\000\004\023\335" +
    "\001\001\000\006\004\023\106\025\001\001\000\002\001" +
    "\001\000\004\105\340\001\001\000\004\074\341\001\001" +
    "\000\002\001\001\000\004\011\344\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\076\351\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\076\356\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	Tab.init();
	Tab.currentScope.addToLocals(new Obj(Obj.Type, "bool", CUP$MJParser$actions.boolType));

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;

    }



	public enum ERROR_CODE {
		VARIABLE,
		ASSIGN,
		FORMAL_PARAMETERS,
		IF,
		FOR,
		INDEXING,
		EXTENDS,
		PARAMETERS
	}
	
	public enum LOG_TYPE {
		DEBUG,
		INFO,
		ERROR
	}

	public enum SYMBOL_TYPE {
		CONSTANT,
		VARIABLE,
		METHOD,
		PROGRAM,
		CLASS_TYPE
	}
	
	private static final String MAIN = "main";
	private static final String error_recovery_string = "Error recovery successful: ";

	// Counting variables
	int constantsCount = 0;
	int globalVarsCount = 0;
	int globalArrayVarsCount = 0;
	int classGlobalVarsCount = 0;
	int mainFunctionVarsCount = 0;
	int globalFuncCount = 0;
	int globalStaticFuncCount = 0;
	int classFuncCount = 0;
	int classStaticFuncCount = 0;
	int statementsBlockCount = 0;
	int mainMethodFunctionCallsCount = 0;
	int functionFormParsCount = 0;
	int classDefinitionCount = 0;
	
	boolean isGlobalContext = true;
	boolean isClassContext = false;
	boolean isMethodContext = false;
	boolean isStaticContext = false;
	boolean isFormalParametersContext = false;
	String currentMethodName = "";
	Struct currentClassType = Tab.noType;
	
	Logger log = Logger.getLogger(getClass());
     
	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatal error, parsing is terminated", cur_token);
    }

	public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report(message, info, LOG_TYPE.ERROR);
    }
  
    public void syntax_error(Symbol cur_token) {
        report("Syntax error", cur_token, LOG_TYPE.ERROR);
    }
  	
  	public void semantic_error(String message, int line) {
        report("Semantic error on line " + line + ": " + message, null, LOG_TYPE.ERROR);
    }
  
  	public void semantic_info(String message, int line) {
		report("Semantic info on line " + line + ": " + message, null, LOG_TYPE.DEBUG);
	}
	
	public void log_symbol_detected(Obj object, String message, int line) {
		DumpSymbolTableVisitor visitor = new DumpSymbolTableVisitor();
		visitor.visitObjNode(object);
        
 		semantic_info(message + " [ " + visitor.getOutput() + "]", line);
	}
	
    public void report(String message, Object info, LOG_TYPE logType) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol) {
			msg.append (" on line ").append(((Symbol)info).left).append(", column ").append(((Symbol)info).right);
        }

		switch(logType) {
			case DEBUG:
		    	log.debug(msg.toString());
		    	break;
		    	
			case INFO:
		    	log.info(msg.toString());
		    	break;
		    	
			case ERROR:
		    	log.error(msg.toString());
		    	break;
		 }
    }
    
    // Increments proper var count. Called for every var.
    public void incrementVarsCount(boolean isArray) {
    	if(isFormalParametersContext) { return; }
    
    	// Counting variables
		if(isClassContext) {
			// Counting only class global variables, not the class method variables.
			if(!isMethodContext) {
				classGlobalVarsCount++;
			}
		} else if(isGlobalContext) {
			if(isArray) {
				globalArrayVarsCount++;
			} else {
				globalVarsCount++;
			}
		} else {
			if(isMainMethod()) {
				mainFunctionVarsCount++;
			}
		}
    }
    
    // Increments proper methods count. Called for every method.
    public void incrementMethodsCount() {
    	if(isStaticContext) {
    		if(isClassContext) {
    			classStaticFuncCount++;
    		} else {
    			globalStaticFuncCount++;
    		}
    	} else {
    		if(isClassContext) {
    			classFuncCount++;
    		} else {
    			globalFuncCount++;
    		}
    	}
    }
    
    public boolean isMainMethod() {
    	return isMethodContext && MAIN.equals(currentMethodName);
    }
    
    public void trackSyntaxErrorRecovery(ERROR_CODE error, String additionalInfo) {
    	String message = error_recovery_string;
    	switch (error) {
    		case VARIABLE:
    			String context = isGlobalContext ? isClassContext ? "Class" : "Global" : "Local";
    			message += context + " variable declaration error "; 
    			break;
    			
    		case ASSIGN:
    			message += "Assign operator error ";
    			break;
    			
    		case FORMAL_PARAMETERS:
    			message += "Formal parameters declaration error ";
    			break;	
    		
    		case IF:
    			message += "If statement condition error ";
    			break;
    		
    		case FOR:
    			message += "For loop condition error ";
    			break;	
    		
    		case INDEXING:
    			message += "Indexing array error ";
    			break;
    			
    		case EXTENDS:
    			message += "Extends clause error ";
    			break;
    			
    		case PARAMETERS:
    			message += "Parameters list error ";
    			break;
    		    			
    		default:
    			message += "Unknown syntax error ";
    			break;
    	}
    	
    	log.debug(message + additionalInfo);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {


	public static final Struct boolType = new Struct(Struct.Bool);
		
	Struct currentType = Tab.noType;
	boolean isVoidMethod = false;
	
	// Semantic methods
    private boolean doesSymbolAlreadyExist(String name, int line) {
    	boolean doesSymbolExist = Tab.currentScope.findSymbol(name) != null;
    	if(doesSymbolExist) {
			parser.semantic_error("identificator with name \"" + name + "\" already exists.", line);
		}
		return doesSymbolExist;
    }
    
    private boolean doesTypeMatchWithCurrent(Struct type, int line) {
    	boolean doesTypeMatch = type == currentType;
    	if(!doesTypeMatch) {
    		parser.semantic_error("type mismatch.", line);
		}
		return doesTypeMatch;
    }
    
    private void isClassExtensionValid(Struct parentClassType, int line) {
		// Check if class tries to extend itself.
		if(parentClassType == parser.currentClassType && parentClassType != Tab.noType) {
			parser.semantic_error("class tried to extend itself.", line);
		} 
		// Check if class tried to extend primitive or non-existing type.
		else if(parentClassType.getKind() != Struct.Class) {
			parser.semantic_error("class tried to extend primitive or non-existing type.", line);
		}
    }
    
	private Obj addConstantToSymbolTable(String name, Struct currentObjectType, Obj currentObject, int line) {
		if(currentObjectType == null || currentObjectType == Tab.noType) {
			// Failsafe.
			parser.semantic_error("Constant \"" + name + "\" doesn't have a type defined.", line);
		} else if(!doesSymbolAlreadyExist(name, line)){
			// Symbol doesn't exist, check if type is correct.
			if(doesTypeMatchWithCurrent(currentObjectType, line)) {
				// Do the insertion.
				Obj createdObject = insertToTable(SYMBOL_TYPE.CONSTANT, name, currentObjectType, line);
				// Copy value.
				createdObject.setAdr(currentObject.getAdr());
				
				return createdObject;
			}
		}
		
		return null;
	}
		
	private Obj addVariableToSymbolTable(String name, int line) {
		if(parser.isFormalParametersContext) { return null; }
		
		if(!doesSymbolAlreadyExist(name, line)){
			// Symbol doesn't exist, do the insertion.
			return insertToTable(SYMBOL_TYPE.VARIABLE, name, currentType, line);
		}
		
		return null;
	}
	
	private Obj addMethodToSymbolTable(String name, int line) {
		// If it's a main method check if it is void. 
		if(parser.isMainMethod() && !isVoidMethod) {
			parser.semantic_error("main method must have void as a return type.", line);
		}
		Struct methodType = isVoidMethod ? Tab.noType : currentType;
		
		return insertToTable(SYMBOL_TYPE.METHOD, name, methodType, line);
	}
	
	private Obj addProgramToSymbolTable(String name, int line) {
		return insertToTable(SYMBOL_TYPE.PROGRAM, name, Tab.noType, line);
	}
	
	private Obj addClassTypeToSymbolTable(String name, int line) {
		return insertToTable(SYMBOL_TYPE.CLASS_TYPE, name, new Struct(Struct.Class), line);
	}
	
	private Obj insertToTable(SYMBOL_TYPE symbolType, String name, Struct currentObjectType, int line) {
		int objectType;
		String message;
		
		switch (symbolType) {
			case CONSTANT:
				objectType = Obj.Con;
				message = "added constant \"" + name + "\" to symbol table.";
				break;
				
			case VARIABLE:
				objectType = Obj.Var;
				String context = parser.isGlobalContext ? parser.isClassContext ? "class" : "global" : "local";
				message = "added " + context + " variable \"" + name + "\" to symbol table.";
				break;
				
			case METHOD:
				objectType = Obj.Meth;
				message = "added method \"" + name + "\" to symbol table.";
				break;
				
			case PROGRAM:
				objectType = Obj.Prog;
				message = "added program \"" + name + "\" to symbol table.";
				break;
				
			case CLASS_TYPE:
				objectType = Obj.Type;
				message = "added class type \"" + name + "\" to symbol table.";
				break;
				
			default:
				objectType = Obj.NO_VALUE;
				message = "UNKNOWN SYMBOL TYPE";
				parser.semantic_error(message, line);
				break;
		}
		
		// Insert object to table.
		Obj createdObject = Tab.insert(objectType, name, currentObjectType);
				
		// Create object node string.
		parser.log_symbol_detected(createdObject, message, line);
		
		return createdObject;
	}

  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // NewArrayType ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NewArrayType",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // NewArrayType ::= L_INDEXER Expr R_INDEXER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NewArrayType",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ActParsListOptional ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsListOptional",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ActParsListOptional ::= L_PAREN ActParsList R_PAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsListOptional",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Factor ::= L_PAREN Expr R_PAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Factor ::= NEW Type NewArrayType 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Factor ::= BOOL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Factor ::= CHAR 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Factor ::= NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Factor ::= Designator ActParsListOptional 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // MultiplyFactorList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MultiplyFactorList",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // MultiplyFactorList ::= MultiplyFactorList MulOp Factor 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MultiplyFactorList",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Term ::= Factor MultiplyFactorList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // MulOpRight ::= MODULATE_EQUALS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOpRight",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // MulOpRight ::= DIVIDE_EQUALS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOpRight",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // MulOpRight ::= MULTIPLY_EQUALS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOpRight",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // MulOpLeft ::= MODULATE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOpLeft",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // MulOpLeft ::= DIVIDE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOpLeft",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // MulOpLeft ::= MULTIPLY 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOpLeft",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // MulOp ::= MulOpRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOp",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // MulOp ::= MulOpLeft 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOp",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // AddOpRight ::= MINUS_EQUALS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddOpRight",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // AddOpRight ::= PLUS_EQUALS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddOpRight",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // AddOpLeft ::= MINUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddOpLeft",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // AddOpLeft ::= PLUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddOpLeft",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // AddOp ::= AddOpRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddOp",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // AddOp ::= AddOpLeft 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddOp",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Negation ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Negation",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Negation ::= MINUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Negation",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // AssignOp ::= MulOpRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignOp",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // AssignOp ::= AddOpRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignOp",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // AssignOp ::= EQUALS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignOp",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // AddOneTerm ::= AddOp Term 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddOneTerm",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // AddTermList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddTermList",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // AddTermList ::= AddTermList AddOneTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddTermList",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Expr ::= Negation Term AddTermList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ActPars ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ActPars ::= ActPars COMMA Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ActParsList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsList",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ActParsList ::= error 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.PARAMETERS, "(1)"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsList",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ActParsList ::= ActPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsList",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // DesignatorStatementOptions ::= DECREMENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOptions",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // DesignatorStatementOptions ::= INCREMENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOptions",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DesignatorStatementOptions ::= L_PAREN ActParsList R_PAREN 
            {
              Object RESULT =null;
		 
									if(parser.isMainMethod()) {
										parser.mainMethodFunctionCallsCount++;
									}
								
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOptions",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DesignatorStatementOptions ::= AssignOp error 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.ASSIGN, "(1)"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOptions",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // DesignatorStatementOptions ::= AssignOp Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOptions",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OneDesignatorOption ::= L_INDEXER error R_INDEXER 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.INDEXING, "(1)"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OneDesignatorOption",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OneDesignatorOption ::= L_INDEXER Expr R_INDEXER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OneDesignatorOption",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OneDesignatorOption ::= DOT IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OneDesignatorOption",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DesignatorOptions ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorOptions",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DesignatorOptions ::= DesignatorOptions OneDesignatorOption 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorOptions",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Designator ::= IDENT DesignatorOptions 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DesignatorStatement ::= Designator DesignatorStatementOptions 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // RelOp ::= LESS_EQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelOp",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // RelOp ::= LESS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelOp",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // RelOp ::= GREATER_EQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelOp",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // RelOp ::= GREATER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelOp",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // RelOp ::= NOT_EQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelOp",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // RelOp ::= EQUALITY 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelOp",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // RelOpExprList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelOpExprList",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // RelOpExprList ::= RelOp Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelOpExprList",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CondFact ::= Expr RelOpExprList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CondFactList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFactList",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CondFactList ::= CondFactList AND CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFactList",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CondTerm ::= CondFact CondFactList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CondTermList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTermList",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CondTermList ::= CondTermList OR CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTermList",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Condition ::= CondTerm CondTermList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OptionalCondition ::= error 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.FOR, "(2)"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptionalCondition",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OptionalCondition ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptionalCondition",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OptionalCondition ::= Condition 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptionalCondition",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // IfStatement ::= IF L_PAREN error R_PAREN Statement ELSE Statement 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.IF, "(2)"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IfStatement",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // IfStatement ::= IF L_PAREN Condition R_PAREN Statement ELSE Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IfStatement",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // IfStatement ::= IF L_PAREN error R_PAREN Statement 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.IF, "(1)"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IfStatement",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // IfStatement ::= IF L_PAREN Condition R_PAREN Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IfStatement",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OptionalDesignatorStatement ::= error 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.FOR, "(1)"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptionalDesignatorStatement",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OptionalDesignatorStatement ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptionalDesignatorStatement",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OptionalDesignatorStatement ::= DesignatorStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptionalDesignatorStatement",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ForStatement ::= FOR L_PAREN OptionalDesignatorStatement SEMI OptionalCondition SEMI OptionalDesignatorStatement R_PAREN Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForStatement",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Return ::= RETURN Expr SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Return",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Return ::= RETURN SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Return",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OneNumber ::= NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OneNumber",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OneNumber ::= OneNumber SEMI NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OneNumber",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NumbersList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NumbersList",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NumbersList ::= OneNumber 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NumbersList",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // StatementsList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementsList",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // StatementsList ::= StatementsList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementsList",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Statement ::= L_BRACE StatementsList R_BRACE 
            {
              Object RESULT =null;
		 parser.statementsBlockCount++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Statement ::= PRINT L_PAREN Expr NumbersList R_PAREN SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Statement ::= READ L_PAREN Designator R_PAREN SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Statement ::= Return 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Statement ::= CONTINUE SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Statement ::= BREAK SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Statement ::= ForStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Statement ::= IfStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Statement ::= DesignatorStatement SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FormParsList ::= Type OneVar 
            {
              Object RESULT =null;
		 parser.functionFormParsCount++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsList",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FormParsList ::= FormParsList COMMA Type OneVar 
            {
              Object RESULT =null;
		 parser.functionFormParsCount++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsList",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FormPars ::= error 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.FORMAL_PARAMETERS, "(1)"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FormPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FormPars ::= NT$6 FormParsList 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.isFormalParametersContext = false; // Starting form pars context 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$6 ::= 
            {
              Object RESULT =null;
 parser.isFormalParametersContext = true; // Starting form pars context 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$6",70, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // VoidType ::= VOID 
            {
              Object RESULT =null;
		 isVoidMethod = true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VoidType",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // VoidType ::= Type 
            {
              Object RESULT =null;
		 isVoidMethod = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VoidType",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // StaticDeclarator ::= 
            {
              Object RESULT =null;
		 parser.isStaticContext = false; // Closing static context 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StaticDeclarator",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // StaticDeclarator ::= STATIC 
            {
              Object RESULT =null;
		 parser.isStaticContext = true; // Starting static context 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StaticDeclarator",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MethodName ::= IDENT 
            {
              Obj RESULT =null;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					parser.currentMethodName = methodName; // Save method name so we can detect main function later
					RESULT = addMethodToSymbolTable(methodName, methodNameleft);
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodName",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // MethodsDecl ::= NT$4 StaticDeclarator VoidType MethodName OpenScope L_PAREN FormPars R_PAREN VarsList L_BRACE StatementsList R_BRACE NT$5 CloseScope 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).right;
		Obj m = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodsDecl",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-13)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		Obj m = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
 
					parser.incrementMethodsCount();
					parser.isMethodContext = false; // Closing method context
					Tab.chainLocalSymbols(m); 
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$5",69, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$4 ::= 
            {
              Object RESULT =null;
 parser.isMethodContext = true; // Starting method context 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$4",68, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MethodsList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodsList",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MethodsList ::= MethodsList MethodsDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodsList",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // MethodsSection ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodsSection",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // MethodsSection ::= L_BRACE MethodsList R_BRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodsSection",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VarsList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarsList",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VarsList ::= VarsList VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarsList",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ClassExtender ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassExtender",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ClassExtender ::= error 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.EXTENDS, "(1)"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassExtender",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ClassExtender ::= EXTENDS Type 
            {
              Object RESULT =null;
		int parentClassTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int parentClassTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct parentClassType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 isClassExtensionValid(parentClassType, parentClassTypeleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassExtender",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ClassName ::= IDENT 
            {
              Obj RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
					Obj classSymbol = addClassTypeToSymbolTable(className, classNameleft); 
					parser.currentClassType = classSymbol.getType();		
					RESULT = classSymbol;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassName",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ClassDecl ::= CLASS ClassName OpenScope ClassExtender L_BRACE VarsList MethodsSection R_BRACE NT$3 CloseScope 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		Obj c = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$3 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		Obj c = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
 
					parser.currentClassType = Tab.noType;
					Tab.chainLocalSymbols(c);
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3",67, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Type ::= IDENT 
            {
              Struct RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
				Obj typeNode = Tab.find(typeName);
				if (typeNode == Tab.noObj) {
					parser.semantic_error("type \"" + typeName + "\" not found in symbol table.", typeNameleft);
					RESULT = Tab.noType;
					currentType = Tab.noType;
				}
				else {
					if (Obj.Type == typeNode.getKind()) {
						RESULT = typeNode.getType();
						currentType = typeNode.getType();
					}
					else {
						parser.semantic_error("\"" + typeName + "\" is not a type.", typeNameleft);
						RESULT = Tab.noType;
						currentType = Tab.noType;
					}
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OneVar ::= IDENT L_INDEXER R_INDEXER 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 
 				parser.incrementVarsCount(true);
 				addVariableToSymbolTable(varName, varNameleft); 
 			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OneVar",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OneVar ::= IDENT 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
				parser.incrementVarsCount(false); 
				addVariableToSymbolTable(varName, varNameleft);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OneVar",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VarsElementsList ::= error OneVar 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.VARIABLE, "(2)"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarsElementsList",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VarsElementsList ::= OneVar 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarsElementsList",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VarsElementsList ::= error COMMA OneVar 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.VARIABLE, "(1)"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarsElementsList",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VarsElementsList ::= VarsElementsList COMMA OneVar 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarsElementsList",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarDecl ::= Type error SEMI 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.VARIABLE, "(3)"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VarDecl ::= Type VarsElementsList SEMI 
            {
              Object RESULT =null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct varType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OneConst ::= BOOL 
            {
              Obj RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean value = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					RESULT = new Obj(Obj.Con, "", boolType);  
		 	    	RESULT.setAdr(value ? 1:0);
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OneConst",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // OneConst ::= CHAR 
            {
              Obj RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character value = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					RESULT = new Obj(Obj.Con, "", Tab.charType);  
		 	    	RESULT.setAdr(value);
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OneConst",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // OneConst ::= NUMBER 
            {
              Obj RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					RESULT = new Obj(Obj.Con, "", Tab.intType);  
 	    			RESULT.setAdr((int)value);
 	    		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OneConst",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ConstList ::= IDENT EQUALS OneConst 
            {
              Object RESULT =null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int currentConstObjectleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int currentConstObjectright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj currentConstObject = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
					parser.constantsCount++; // Counting constants
					addConstantToSymbolTable(constName, currentConstObject.getType(), currentConstObject, currentConstObjectleft);
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstList ::= ConstList COMMA IDENT EQUALS OneConst 
            {
              Object RESULT =null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int currentConstObjectleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int currentConstObjectright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj currentConstObject = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
					parser.constantsCount++; // Counting constants
					addConstantToSymbolTable(constName, currentConstObject.getType(), currentConstObject, currentConstObjectleft); 
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstDecl ::= CONST Type ConstList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ProgramElement ::= NT$2 ClassDecl 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 
					parser.isClassContext = false; // Closing class context
					parser.classDefinitionCount++; 
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramElement",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$2 ::= 
            {
              Object RESULT =null;
 parser.isClassContext = true; // Starting class context 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",66, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ProgramElement ::= VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramElement",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ProgramElement ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramElement",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ProgramElementsList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramElementsList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ProgramElementsList ::= ProgramElementsList ProgramElement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramElementsList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ProgName ::= IDENT 
            {
              Obj RESULT =null;
		int programNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int programNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String programName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = addProgramToSymbolTable(programName, programNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgName",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Program ::= PROG ProgName OpenScope ProgramElementsList L_BRACE NT$0 MethodsList R_BRACE NT$1 CloseScope 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
 Tab.chainLocalSymbols(p); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",65, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
 parser.isGlobalContext = false; // Closing global context 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CloseScope ::= 
            {
              Object RESULT =null;
		 Tab.closeScope(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CloseScope",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // OpenScope ::= 
            {
              Object RESULT =null;
		 Tab.openScope(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OpenScope",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

