
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Feb 02 23:25:41 CET 2017
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.MJParser.ERROR_CODE;
import rs.ac.bg.etf.pp1.MJParser.SYMBOL_TYPE;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;
import rs.etf.pp1.symboltable.visitors.DumpSymbolTableVisitor;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Feb 02 23:25:41 CET 2017
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\223\000\002\002\004\000\002\064\002\000\002\065" +
    "\002\000\002\100\002\000\002\101\002\000\002\002\014" +
    "\000\002\066\003\000\002\003\004\000\002\003\002\000" +
    "\002\005\003\000\002\005\003\000\002\102\002\000\002" +
    "\005\004\000\002\006\006\000\002\011\007\000\002\011" +
    "\005\000\002\067\003\000\002\067\003\000\002\067\003" +
    "\000\002\007\005\000\002\007\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\003\000\002\012\004\000\002" +
    "\013\003\000\002\013\005\000\002\072\003\000\002\103" +
    "\002\000\002\010\014\000\002\077\003\000\002\021\004" +
    "\000\002\021\003\000\002\021\002\000\002\024\004\000" +
    "\002\024\002\000\002\022\005\000\002\022\002\000\002" +
    "\023\004\000\002\023\002\000\002\104\002\000\002\105" +
    "\002\000\002\004\022\000\002\070\003\000\002\014\003" +
    "\000\002\014\002\000\002\015\003\000\002\015\003\000" +
    "\002\106\002\000\002\016\004\000\002\016\002\000\002" +
    "\016\003\000\002\020\006\000\002\020\004\000\002\017" +
    "\004\000\002\017\003\000\002\017\003\000\002\017\004" +
    "\000\002\017\004\000\002\017\003\000\002\017\007\000" +
    "\002\017\010\000\002\017\005\000\002\063\004\000\002" +
    "\063\002\000\002\061\003\000\002\061\002\000\002\062" +
    "\005\000\002\062\003\000\002\060\004\000\002\060\005" +
    "\000\002\025\013\000\002\026\003\000\002\026\002\000" +
    "\002\026\003\000\002\047\007\000\002\047\007\000\002" +
    "\047\011\000\002\047\011\000\002\027\003\000\002\027" +
    "\002\000\002\027\003\000\002\051\004\000\002\053\005" +
    "\000\002\053\002\000\002\052\004\000\002\055\005\000" +
    "\002\055\002\000\002\054\004\000\002\057\004\000\002" +
    "\057\002\000\002\056\003\000\002\056\003\000\002\056" +
    "\003\000\002\056\003\000\002\056\003\000\002\056\003" +
    "\000\002\030\004\000\002\071\003\000\002\071\005\000" +
    "\002\071\005\000\002\071\006\000\002\071\006\000\002" +
    "\031\004\000\002\031\004\000\002\031\005\000\002\031" +
    "\003\000\002\031\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\002\000\002\033\005\000\002\033\003\000" +
    "\002\075\005\000\002\035\004\000\002\035\002\000\002" +
    "\036\004\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\034\003\000\002\034\002\000\002\040\003" +
    "\000\002\040\003\000\002\043\003\000\002\043\003\000" +
    "\002\042\003\000\002\042\003\000\002\044\003\000\002" +
    "\044\003\000\002\046\003\000\002\046\003\000\002\046" +
    "\003\000\002\045\003\000\002\045\003\000\002\045\003" +
    "\000\002\074\004\000\002\037\005\000\002\037\002\000" +
    "\002\073\004\000\002\073\003\000\002\073\005\000\002" +
    "\073\005\000\002\050\005\000\002\050\002\000\002\076" +
    "\005\000\002\076\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\357\000\004\004\005\001\002\000\004\002\361\001" +
    "\002\000\004\063\006\001\002\000\012\005\ufffb\007\ufffb" +
    "\011\ufffb\063\ufffb\001\002\000\012\005\000\007\000\011" +
    "\000\063\000\001\002\000\012\005\ufff9\007\ufff9\011\ufff9" +
    "\063\ufff9\001\002\000\012\005\ufff6\007\012\011\021\063" +
    "\017\001\002\000\004\063\017\001\002\000\012\005\ufff8" +
    "\007\ufff8\011\ufff8\063\ufff8\001\002\000\004\005\326\001" +
    "\002\000\006\003\313\063\050\001\002\000\012\005\ufff7" +
    "\007\ufff7\011\ufff7\063\ufff7\001\002\000\070\003\uffe6\011" +
    "\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\036\uffe6" +
    "\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045" +
    "\uffe6\046\uffe6\047\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6" +
    "\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\001" +
    "\002\000\012\005\ufffa\007\ufffa\011\ufffa\063\ufffa\001\002" +
    "\000\012\012\ufffe\022\ufffe\023\ufffe\063\ufffe\001\002\000" +
    "\012\012\uffda\022\uffda\023\uffda\063\uffda\001\002\000\012" +
    "\012\025\022\uffd9\023\uffd9\063\uffd9\001\002\000\012\012" +
    "\uffdb\022\uffdb\023\uffdb\063\uffdb\001\002\000\004\002\ufffd" +
    "\001\002\000\010\022\027\023\uffd4\063\uffd4\001\002\000" +
    "\006\023\uffd5\063\uffd5\001\002\000\006\023\033\063\017" +
    "\001\002\000\004\063\034\001\002\000\004\063\uffd3\001" +
    "\002\000\004\063\uffd2\001\002\000\004\013\uffd6\001\002" +
    "\000\004\013\000\001\002\000\004\013\037\001\002\000" +
    "\010\003\040\014\uffcf\063\uffd1\001\002\000\004\014\uffce" +
    "\001\002\000\004\014\054\001\002\000\004\063\017\001" +
    "\002\000\004\063\050\001\002\000\006\014\uffd0\016\045" +
    "\001\002\000\004\063\017\001\002\000\004\063\050\001" +
    "\002\000\006\014\uffcd\016\uffcd\001\002\000\012\014\uffe8" +
    "\015\uffe8\016\uffe8\017\051\001\002\000\004\020\052\001" +
    "\002\000\010\014\uffe7\015\uffe7\016\uffe7\001\002\000\006" +
    "\014\uffcc\016\uffcc\001\002\000\006\011\000\063\000\001" +
    "\002\000\006\011\uffde\063\uffde\001\002\000\006\011\060" +
    "\063\017\001\002\000\010\011\uffdf\012\uffdf\063\uffdf\001" +
    "\002\000\030\006\uffc1\011\uffc1\012\uffc1\030\uffc1\031\uffc1" +
    "\032\uffc1\033\uffc1\034\uffc1\035\uffc1\050\uffc1\063\uffc1\001" +
    "\002\000\030\006\076\011\101\012\067\030\065\031\075" +
    "\032\062\033\077\034\102\035\100\050\072\063\063\001" +
    "\002\000\004\013\305\001\002\000\074\010\uff9f\013\uff9f" +
    "\014\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f\024\uff9f\025" +
    "\uff9f\026\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f" +
    "\043\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f\052\uff9f\053" +
    "\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f\060\uff9f\061\uff9f" +
    "\062\uff9f\001\002\000\032\006\uffc6\011\uffc6\012\uffc6\030" +
    "\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\050\uffc6" +
    "\051\uffc6\063\uffc6\001\002\000\004\013\271\001\002\000" +
    "\030\010\263\013\262\017\153\024\156\025\255\026\257" +
    "\040\146\041\143\045\137\046\133\047\130\001\002\000" +
    "\012\012\uffff\022\uffff\023\uffff\063\uffff\001\002\000\032" +
    "\006\uffc9\011\uffc9\012\uffc9\030\uffc9\031\uffc9\032\uffc9\033" +
    "\uffc9\034\uffc9\035\uffc9\050\uffc9\051\uffc9\063\uffc9\001\002" +
    "\000\032\006\uffca\011\uffca\012\uffca\030\uffca\031\uffca\032" +
    "\uffca\033\uffca\034\uffca\035\uffca\050\uffca\051\uffca\063\uffca" +
    "\001\002\000\004\013\215\001\002\000\004\015\214\001" +
    "\002\000\030\006\uffc2\011\uffc2\012\uffc2\030\uffc2\031\uffc2" +
    "\032\uffc2\033\uffc2\034\uffc2\035\uffc2\050\uffc2\063\uffc2\001" +
    "\002\000\004\013\203\001\002\000\004\024\201\001\002" +
    "\000\004\015\200\001\002\000\024\006\uff88\013\uff88\015" +
    "\110\027\uff88\037\111\062\uff88\063\uff88\064\uff88\065\uff88" +
    "\001\002\000\030\006\uffc1\011\uffc1\012\uffc1\030\uffc1\031" +
    "\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\050\uffc1\063\uffc1" +
    "\001\002\000\004\015\103\001\002\000\032\006\uffc8\011" +
    "\uffc8\012\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8" +
    "\035\uffc8\050\uffc8\051\uffc8\063\uffc8\001\002\000\030\006" +
    "\076\011\101\012\105\030\065\031\075\032\062\033\077" +
    "\034\102\035\100\050\072\063\063\001\002\000\032\006" +
    "\uffc3\011\uffc3\012\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3" +
    "\034\uffc3\035\uffc3\050\uffc3\051\uffc3\063\uffc3\001\002\000" +
    "\020\006\076\013\122\027\113\062\116\063\063\064\123" +
    "\065\114\001\002\000\004\015\112\001\002\000\032\006" +
    "\uffbc\011\uffbc\012\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc" +
    "\034\uffbc\035\uffbc\050\uffbc\051\uffbc\063\uffbc\001\002\000" +
    "\020\006\uff89\013\uff89\027\uff89\062\uff89\063\uff89\064\uff89" +
    "\065\uff89\001\002\000\032\006\uffbb\011\uffbb\012\uffbb\030" +
    "\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\050\uffbb" +
    "\051\uffbb\063\uffbb\001\002\000\004\063\017\001\002\000" +
    "\060\014\uffef\015\uffef\016\uffef\020\uffef\036\uffef\037\uffef" +
    "\040\uffef\041\uffef\042\uffef\043\uffef\044\uffef\045\uffef\046" +
    "\uffef\047\uffef\052\uffef\053\uffef\054\uffef\055\uffef\056\uffef" +
    "\057\uffef\060\uffef\061\uffef\062\uffef\001\002\000\066\013" +
    "\154\014\uff71\015\uff71\016\uff71\017\153\020\uff71\024\156" +
    "\036\uff71\037\uff71\040\uff71\041\uff71\042\uff71\043\uff71\044" +
    "\uff71\045\uff71\046\uff71\047\uff71\052\uff71\053\uff71\054\uff71" +
    "\055\uff71\056\uff71\057\uff71\060\uff71\061\uff71\062\uff71\001" +
    "\002\000\060\014\ufff1\015\ufff1\016\ufff1\020\ufff1\036\ufff1" +
    "\037\ufff1\040\ufff1\041\ufff1\042\ufff1\043\ufff1\044\ufff1\045" +
    "\ufff1\046\ufff1\047\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1" +
    "\056\ufff1\057\ufff1\060\ufff1\061\ufff1\062\ufff1\001\002\000" +
    "\060\014\uff75\015\uff75\016\uff75\020\uff75\036\uff75\037\uff75" +
    "\040\uff75\041\uff75\042\uff75\043\uff75\044\uff75\045\uff75\046" +
    "\uff75\047\uff75\052\uff75\053\uff75\054\uff75\055\uff75\056\uff75" +
    "\057\uff75\060\uff75\061\uff75\062\uff75\001\002\000\044\014" +
    "\uff8e\015\uff8e\016\uff8e\020\uff8e\036\uff8e\037\uff8e\040\uff8e" +
    "\041\uff8e\052\uff8e\053\uff8e\054\uff8e\055\uff8e\056\uff8e\057" +
    "\uff8e\060\uff8e\061\uff8e\062\uff8e\001\002\000\060\014\uff77" +
    "\015\uff77\016\uff77\020\uff77\036\uff77\037\uff77\040\uff77\041" +
    "\uff77\042\uff77\043\uff77\044\uff77\045\uff77\046\uff77\047\uff77" +
    "\052\uff77\053\uff77\054\uff77\055\uff77\056\uff77\057\uff77\060" +
    "\uff77\061\uff77\062\uff77\001\002\000\022\006\uff88\013\uff88" +
    "\027\uff88\037\111\062\uff88\063\uff88\064\uff88\065\uff88\001" +
    "\002\000\060\014\ufff0\015\ufff0\016\ufff0\020\ufff0\036\ufff0" +
    "\037\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0\045" +
    "\ufff0\046\ufff0\047\ufff0\052\ufff0\053\ufff0\054\ufff0\055\ufff0" +
    "\056\ufff0\057\ufff0\060\ufff0\061\ufff0\062\ufff0\001\002\000" +
    "\004\014\125\001\002\000\060\014\uff73\015\uff73\016\uff73" +
    "\020\uff73\036\uff73\037\uff73\040\uff73\041\uff73\042\uff73\043" +
    "\uff73\044\uff73\045\uff73\046\uff73\047\uff73\052\uff73\053\uff73" +
    "\054\uff73\055\uff73\056\uff73\057\uff73\060\uff73\061\uff73\062" +
    "\uff73\001\002\000\060\014\uff79\015\uff79\016\uff79\020\uff79" +
    "\036\uff79\037\uff79\040\uff79\041\uff79\042\131\043\127\044" +
    "\132\045\137\046\133\047\130\052\uff79\053\uff79\054\uff79" +
    "\055\uff79\056\uff79\057\uff79\060\uff79\061\uff79\062\uff79\001" +
    "\002\000\020\006\uff7e\013\uff7e\027\uff7e\062\uff7e\063\uff7e" +
    "\064\uff7e\065\uff7e\001\002\000\024\003\uff7a\006\uff7a\013" +
    "\uff7a\027\uff7a\037\uff7a\062\uff7a\063\uff7a\064\uff7a\065\uff7a" +
    "\001\002\000\020\006\uff7f\013\uff7f\027\uff7f\062\uff7f\063" +
    "\uff7f\064\uff7f\065\uff7f\001\002\000\020\006\uff7d\013\uff7d" +
    "\027\uff7d\062\uff7d\063\uff7d\064\uff7d\065\uff7d\001\002\000" +
    "\024\003\uff7b\006\uff7b\013\uff7b\027\uff7b\037\uff7b\062\uff7b" +
    "\063\uff7b\064\uff7b\065\uff7b\001\002\000\020\006\uff80\013" +
    "\uff80\027\uff80\062\uff80\063\uff80\064\uff80\065\uff80\001\002" +
    "\000\020\006\uff81\013\uff81\027\uff81\062\uff81\063\uff81\064" +
    "\uff81\065\uff81\001\002\000\020\006\076\013\122\027\113" +
    "\062\116\063\063\064\123\065\114\001\002\000\024\003" +
    "\uff7c\006\uff7c\013\uff7c\027\uff7c\037\uff7c\062\uff7c\063\uff7c" +
    "\064\uff7c\065\uff7c\001\002\000\060\014\uff78\015\uff78\016" +
    "\uff78\020\uff78\036\uff78\037\uff78\040\uff78\041\uff78\042\uff78" +
    "\043\uff78\044\uff78\045\uff78\046\uff78\047\uff78\052\uff78\053" +
    "\uff78\054\uff78\055\uff78\056\uff78\057\uff78\060\uff78\061\uff78" +
    "\062\uff78\001\002\000\044\014\uff90\015\uff90\016\uff90\020" +
    "\uff90\036\142\037\145\040\146\041\143\052\uff90\053\uff90" +
    "\054\uff90\055\uff90\056\uff90\057\uff90\060\uff90\061\uff90\062" +
    "\uff90\001\002\000\020\006\uff85\013\uff85\027\uff85\062\uff85" +
    "\063\uff85\064\uff85\065\uff85\001\002\000\024\003\uff82\006" +
    "\uff82\013\uff82\027\uff82\037\uff82\062\uff82\063\uff82\064\uff82" +
    "\065\uff82\001\002\000\020\006\uff86\013\uff86\027\uff86\062" +
    "\uff86\063\uff86\064\uff86\065\uff86\001\002\000\020\006\uff84" +
    "\013\uff84\027\uff84\062\uff84\063\uff84\064\uff84\065\uff84\001" +
    "\002\000\024\003\uff83\006\uff83\013\uff83\027\uff83\037\uff83" +
    "\062\uff83\063\uff83\064\uff83\065\uff83\001\002\000\020\006" +
    "\uff87\013\uff87\027\uff87\062\uff87\063\uff87\064\uff87\065\uff87" +
    "\001\002\000\020\006\076\013\122\027\113\062\116\063" +
    "\063\064\123\065\114\001\002\000\044\014\uff8f\015\uff8f" +
    "\016\uff8f\020\uff8f\036\uff8f\037\uff8f\040\uff8f\041\uff8f\052" +
    "\uff8f\053\uff8f\054\uff8f\055\uff8f\056\uff8f\057\uff8f\060\uff8f" +
    "\061\uff8f\062\uff8f\001\002\000\044\014\uff8d\015\uff8d\016" +
    "\uff8d\020\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\052\uff8d" +
    "\053\uff8d\054\uff8d\055\uff8d\056\uff8d\057\uff8d\060\uff8d\061" +
    "\uff8d\062\uff8d\001\002\000\024\003\167\006\uff88\013\uff88" +
    "\027\uff88\037\111\062\uff88\063\uff88\064\uff88\065\uff88\001" +
    "\002\000\026\003\161\006\uff88\013\uff88\014\uff93\027\uff88" +
    "\037\111\062\uff88\063\uff88\064\uff88\065\uff88\001\002\000" +
    "\060\014\uff76\015\uff76\016\uff76\020\uff76\036\uff76\037\uff76" +
    "\040\uff76\041\uff76\042\uff76\043\uff76\044\uff76\045\uff76\046" +
    "\uff76\047\uff76\052\uff76\053\uff76\054\uff76\055\uff76\056\uff76" +
    "\057\uff76\060\uff76\061\uff76\062\uff76\001\002\000\004\063" +
    "\157\001\002\000\074\010\uff9d\013\uff9d\014\uff9d\015\uff9d" +
    "\016\uff9d\017\uff9d\020\uff9d\024\uff9d\025\uff9d\026\uff9d\036" +
    "\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d" +
    "\045\uff9d\046\uff9d\047\uff9d\052\uff9d\053\uff9d\054\uff9d\055" +
    "\uff9d\056\uff9d\057\uff9d\060\uff9d\061\uff9d\062\uff9d\001\002" +
    "\000\006\014\uff95\016\165\001\002\000\004\014\uff94\001" +
    "\002\000\006\014\uff91\016\uff91\001\002\000\004\014\164" +
    "\001\002\000\060\014\uff72\015\uff72\016\uff72\020\uff72\036" +
    "\uff72\037\uff72\040\uff72\041\uff72\042\uff72\043\uff72\044\uff72" +
    "\045\uff72\046\uff72\047\uff72\052\uff72\053\uff72\054\uff72\055" +
    "\uff72\056\uff72\057\uff72\060\uff72\061\uff72\062\uff72\001\002" +
    "\000\022\006\uff88\013\uff88\027\uff88\037\111\062\uff88\063" +
    "\uff88\064\uff88\065\uff88\001\002\000\006\014\uff92\016\uff92" +
    "\001\002\000\004\020\172\001\002\000\004\020\171\001" +
    "\002\000\074\010\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c" +
    "\017\uff9c\020\uff9c\024\uff9c\025\uff9c\026\uff9c\036\uff9c\037" +
    "\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c" +
    "\046\uff9c\047\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c\056" +
    "\uff9c\057\uff9c\060\uff9c\061\uff9c\062\uff9c\001\002\000\074" +
    "\010\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b\020" +
    "\uff9b\024\uff9b\025\uff9b\026\uff9b\036\uff9b\037\uff9b\040\uff9b" +
    "\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047" +
    "\uff9b\052\uff9b\053\uff9b\054\uff9b\055\uff9b\056\uff9b\057\uff9b" +
    "\060\uff9b\061\uff9b\062\uff9b\001\002\000\062\014\uff6f\015" +
    "\uff6f\016\uff6f\017\174\020\uff6f\036\uff6f\037\uff6f\040\uff6f" +
    "\041\uff6f\042\uff6f\043\uff6f\044\uff6f\045\uff6f\046\uff6f\047" +
    "\uff6f\052\uff6f\053\uff6f\054\uff6f\055\uff6f\056\uff6f\057\uff6f" +
    "\060\uff6f\061\uff6f\062\uff6f\001\002\000\022\006\uff88\013" +
    "\uff88\027\uff88\037\111\062\uff88\063\uff88\064\uff88\065\uff88" +
    "\001\002\000\060\014\uff74\015\uff74\016\uff74\020\uff74\036" +
    "\uff74\037\uff74\040\uff74\041\uff74\042\uff74\043\uff74\044\uff74" +
    "\045\uff74\046\uff74\047\uff74\052\uff74\053\uff74\054\uff74\055" +
    "\uff74\056\uff74\057\uff74\060\uff74\061\uff74\062\uff74\001\002" +
    "\000\004\020\177\001\002\000\060\014\uff70\015\uff70\016" +
    "\uff70\020\uff70\036\uff70\037\uff70\040\uff70\041\uff70\042\uff70" +
    "\043\uff70\044\uff70\045\uff70\046\uff70\047\uff70\052\uff70\053" +
    "\uff70\054\uff70\055\uff70\056\uff70\057\uff70\060\uff70\061\uff70" +
    "\062\uff70\001\002\000\032\006\uffc7\011\uffc7\012\uffc7\030" +
    "\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\050\uffc7" +
    "\051\uffc7\063\uffc7\001\002\000\004\063\202\001\002\000" +
    "\074\010\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e\017\uff9e" +
    "\020\uff9e\024\uff9e\025\uff9e\026\uff9e\036\uff9e\037\uff9e\040" +
    "\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e" +
    "\047\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e\056\uff9e\057" +
    "\uff9e\060\uff9e\061\uff9e\062\uff9e\001\002\000\022\006\uff88" +
    "\013\uff88\027\uff88\037\111\062\uff88\063\uff88\064\uff88\065" +
    "\uff88\001\002\000\006\014\uffbf\062\206\001\002\000\004" +
    "\014\212\001\002\000\006\014\uffbd\015\uffbd\001\002\000" +
    "\006\014\uffc0\015\210\001\002\000\004\062\211\001\002" +
    "\000\006\014\uffbe\015\uffbe\001\002\000\004\015\213\001" +
    "\002\000\032\006\uffc4\011\uffc4\012\uffc4\030\uffc4\031\uffc4" +
    "\032\uffc4\033\uffc4\034\uffc4\035\uffc4\050\uffc4\051\uffc4\063" +
    "\uffc4\001\002\000\032\006\uffcb\011\uffcb\012\uffcb\030\uffcb" +
    "\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\050\uffcb\051" +
    "\uffcb\063\uffcb\001\002\000\024\003\217\006\uff88\013\uff88" +
    "\027\uff88\037\111\062\uff88\063\uff88\064\uff88\065\uff88\001" +
    "\002\000\010\014\uffad\015\uffad\053\uffad\001\002\000\004" +
    "\014\243\001\002\000\026\014\uffa7\015\uffa7\052\uffa7\053" +
    "\uffa7\054\234\055\232\056\235\057\236\060\237\061\241" +
    "\001\002\000\012\014\uffaa\015\uffaa\052\uffaa\053\uffaa\001" +
    "\002\000\004\014\223\001\002\000\026\006\076\011\101" +
    "\030\065\031\075\032\062\033\077\034\102\035\100\050" +
    "\072\063\063\001\002\000\032\006\uffb6\011\uffb6\012\uffb6" +
    "\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\050" +
    "\uffb6\051\225\063\uffb6\001\002\000\026\006\076\011\101" +
    "\030\065\031\075\032\062\033\077\034\102\035\100\050" +
    "\072\063\063\001\002\000\032\006\uffb4\011\uffb4\012\uffb4" +
    "\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\050" +
    "\uffb4\051\uffb4\063\uffb4\001\002\000\012\014\uffac\015\uffac" +
    "\052\230\053\uffac\001\002\000\022\006\uff88\013\uff88\027" +
    "\uff88\037\111\062\uff88\063\uff88\064\uff88\065\uff88\001\002" +
    "\000\012\014\uffab\015\uffab\052\uffab\053\uffab\001\002\000" +
    "\022\006\uffa5\013\uffa5\027\uffa5\037\uffa5\062\uffa5\063\uffa5" +
    "\064\uffa5\065\uffa5\001\002\000\022\006\uff88\013\uff88\027" +
    "\uff88\037\111\062\uff88\063\uff88\064\uff88\065\uff88\001\002" +
    "\000\022\006\uffa6\013\uffa6\027\uffa6\037\uffa6\062\uffa6\063" +
    "\uffa6\064\uffa6\065\uffa6\001\002\000\022\006\uffa4\013\uffa4" +
    "\027\uffa4\037\uffa4\062\uffa4\063\uffa4\064\uffa4\065\uffa4\001" +
    "\002\000\022\006\uffa3\013\uffa3\027\uffa3\037\uffa3\062\uffa3" +
    "\063\uffa3\064\uffa3\065\uffa3\001\002\000\022\006\uffa2\013" +
    "\uffa2\027\uffa2\037\uffa2\062\uffa2\063\uffa2\064\uffa2\065\uffa2" +
    "\001\002\000\012\014\uffa9\015\uffa9\052\uffa9\053\uffa9\001" +
    "\002\000\022\006\uffa1\013\uffa1\027\uffa1\037\uffa1\062\uffa1" +
    "\063\uffa1\064\uffa1\065\uffa1\001\002\000\012\014\uffa8\015" +
    "\uffa8\052\uffa8\053\uffa8\001\002\000\026\006\076\011\101" +
    "\030\065\031\075\032\062\033\077\034\102\035\100\050" +
    "\072\063\063\001\002\000\032\006\uffb5\011\uffb5\012\uffb5" +
    "\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\050" +
    "\uffb5\051\245\063\uffb5\001\002\000\026\006\076\011\101" +
    "\030\065\031\075\032\062\033\077\034\102\035\100\050" +
    "\072\063\063\001\002\000\032\006\uffb3\011\uffb3\012\uffb3" +
    "\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\050" +
    "\uffb3\051\uffb3\063\uffb3\001\002\000\010\014\uffaf\015\uffaf" +
    "\053\250\001\002\000\022\006\uff88\013\uff88\027\uff88\037" +
    "\111\062\uff88\063\uff88\064\uff88\065\uff88\001\002\000\010" +
    "\014\uffae\015\uffae\053\uffae\001\002\000\012\012\uffd8\022" +
    "\uffd8\023\uffd8\063\uffd8\001\002\000\012\012\uffff\022\uffff" +
    "\023\uffff\063\uffff\001\002\000\012\012\uffd7\022\uffd7\023" +
    "\uffd7\063\uffd7\001\002\000\006\014\uff97\015\uff97\001\002" +
    "\000\024\003\267\006\uff88\013\uff88\027\uff88\037\111\062" +
    "\uff88\063\uff88\064\uff88\065\uff88\001\002\000\006\014\uff96" +
    "\015\uff96\001\002\000\006\014\uffa0\015\uffa0\001\002\000" +
    "\024\003\uff8a\006\uff8a\013\uff8a\027\uff8a\037\uff8a\062\uff8a" +
    "\063\uff8a\064\uff8a\065\uff8a\001\002\000\026\003\161\006" +
    "\uff88\013\uff88\014\uff93\027\uff88\037\111\062\uff88\063\uff88" +
    "\064\uff88\065\uff88\001\002\000\024\003\uff8c\006\uff8c\013" +
    "\uff8c\027\uff8c\037\uff8c\062\uff8c\063\uff8c\064\uff8c\065\uff8c" +
    "\001\002\000\024\003\uff8b\006\uff8b\013\uff8b\027\uff8b\037" +
    "\uff8b\062\uff8b\063\uff8b\064\uff8b\065\uff8b\001\002\000\004" +
    "\014\266\001\002\000\006\014\uff98\015\uff98\001\002\000" +
    "\006\014\uff99\015\uff99\001\002\000\006\014\uff9a\015\uff9a" +
    "\001\002\000\012\003\272\006\076\015\uffb8\063\063\001" +
    "\002\000\006\014\uffb7\015\uffb7\001\002\000\004\015\275" +
    "\001\002\000\006\014\uffb9\015\uffb9\001\002\000\026\003" +
    "\276\006\uff88\013\uff88\015\uffb1\027\uff88\037\111\062\uff88" +
    "\063\uff88\064\uff88\065\uff88\001\002\000\004\015\uffb0\001" +
    "\002\000\004\015\301\001\002\000\004\015\uffb2\001\002" +
    "\000\012\003\272\006\076\014\uffb8\063\063\001\002\000" +
    "\004\014\303\001\002\000\026\006\076\011\101\030\065" +
    "\031\075\032\062\033\077\034\102\035\100\050\072\063" +
    "\063\001\002\000\032\006\uffba\011\uffba\012\uffba\030\uffba" +
    "\031\uffba\032\uffba\033\uffba\034\uffba\035\uffba\050\uffba\051" +
    "\uffba\063\uffba\001\002\000\006\006\076\063\063\001\002" +
    "\000\010\014\307\017\153\024\156\001\002\000\004\015" +
    "\310\001\002\000\032\006\uffc5\011\uffc5\012\uffc5\030\uffc5" +
    "\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\050\uffc5\051" +
    "\uffc5\063\uffc5\001\002\000\004\002\uffff\001\002\000\004" +
    "\002\ufffc\001\002\000\010\015\323\016\321\063\050\001" +
    "\002\000\006\015\uffea\016\uffea\001\002\000\006\015\317" +
    "\016\316\001\002\000\004\063\050\001\002\000\014\005" +
    "\uffee\007\uffee\011\uffee\012\uffee\063\uffee\001\002\000\006" +
    "\015\uffec\016\uffec\001\002\000\004\063\050\001\002\000" +
    "\006\015\uffe9\016\uffe9\001\002\000\014\005\uffed\007\uffed" +
    "\011\uffed\012\uffed\063\uffed\001\002\000\006\015\uffeb\016" +
    "\uffeb\001\002\000\012\005\ufff5\007\ufff5\011\ufff5\063\ufff5" +
    "\001\002\000\004\063\330\001\002\000\010\003\000\011" +
    "\000\021\000\001\002\000\010\003\uffe3\011\uffe3\021\uffe3" +
    "\001\002\000\010\003\334\011\uffe0\021\333\001\002\000" +
    "\004\011\336\001\002\000\004\063\017\001\002\000\004" +
    "\011\uffe1\001\002\000\004\011\uffe2\001\002\000\010\011" +
    "\uffde\012\uffde\063\uffde\001\002\000\010\011\341\012\uffdc" +
    "\063\017\001\002\000\004\012\344\001\002\000\012\012" +
    "\uffda\022\uffda\023\uffda\063\uffda\001\002\000\012\012\343" +
    "\022\uffd9\023\uffd9\063\uffd9\001\002\000\004\012\uffdd\001" +
    "\002\000\012\005\uffe5\007\uffe5\011\uffe5\063\uffe5\001\002" +
    "\000\012\005\uffff\007\uffff\011\uffff\063\uffff\001\002\000" +
    "\012\005\uffe4\007\uffe4\011\uffe4\063\uffe4\001\002\000\004" +
    "\063\350\001\002\000\004\010\357\001\002\000\006\015" +
    "\353\016\352\001\002\000\004\063\354\001\002\000\012" +
    "\005\ufff4\007\ufff4\011\ufff4\063\ufff4\001\002\000\004\010" +
    "\355\001\002\000\010\062\116\064\123\065\114\001\002" +
    "\000\006\015\ufff3\016\ufff3\001\002\000\010\062\116\064" +
    "\123\065\114\001\002\000\006\015\ufff2\016\ufff2\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\357\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\066\006\001\001\000\002\001\001\000\004\064\007" +
    "\001\001\000\004\003\010\001\001\000\014\005\017\006" +
    "\012\007\015\072\014\102\013\001\001\000\004\072\346" +
    "\001\001\000\002\001\001\000\004\010\324\001\001\000" +
    "\006\012\314\013\313\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\100\021\001\001\000" +
    "\004\023\022\001\001\000\006\004\023\104\025\001\001" +
    "\000\002\001\001\000\004\101\310\001\001\000\004\014" +
    "\027\001\001\000\002\001\001\000\006\015\030\072\031" +
    "\001\001\000\004\070\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\064\035\001\001" +
    "\000\002\001\001\000\006\016\040\106\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\043\072\042" +
    "\001\001\000\004\013\052\001\001\000\002\001\001\000" +
    "\004\072\045\001\001\000\004\013\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\064\054\001\001\000\004" +
    "\024\055\001\001\000\006\007\056\072\014\001\001\000" +
    "\002\001\001\000\004\063\060\001\001\000\016\017\073" +
    "\025\067\030\072\047\070\060\063\071\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\031\257\041\255\042\263\045\260\001" +
    "\001\000\004\065\251\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\034\105\075\106\001\001\000\004\063\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\017\073" +
    "\025\067\030\072\047\070\060\063\071\065\001\001\000" +
    "\002\001\001\000\012\067\116\071\114\073\120\074\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\072\172\001\001\000\002" +
    "\001\001\000\004\050\154\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\140\001\001\000\004\037\125" +
    "\001\001\000\006\034\105\075\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\044\135" +
    "\045\133\046\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\067\116\071" +
    "\114\073\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\036\150\040\147\042\143\043\146\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\067" +
    "\116\071\114\073\120\074\151\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\034\105\075\167\001\001\000" +
    "\012\032\162\033\157\034\105\075\161\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\034\105\075\165\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\076\174\001\001\000" +
    "\006\034\105\075\175\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\034\105\075\203\001\001" +
    "\000\006\061\204\062\206\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\034\105\051\221\052\215\054\220\075\217" +
    "\001\001\000\004\053\246\001\001\000\002\001\001\000" +
    "\006\056\232\057\237\001\001\000\004\055\226\001\001" +
    "\000\002\001\001\000\016\017\223\025\067\030\072\047" +
    "\070\060\063\071\065\001\001\000\002\001\001\000\016" +
    "\017\225\025\067\030\072\047\070\060\063\071\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\034\105" +
    "\054\230\075\217\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\034\105\075\241\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\017\243\025\067\030\072\047\070\060\063\071\065\001" +
    "\001\000\002\001\001\000\016\017\245\025\067\030\072" +
    "\047\070\060\063\071\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\034\105\052\250\054\220\075\217" +
    "\001\001\000\002\001\001\000\004\105\252\001\001\000" +
    "\004\065\253\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\034\105\075\267\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\032\264\033\157" +
    "\034\105\075\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\026\272\030\273\071\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\027\276\034\105\051\277\052\215\054\220\075" +
    "\217\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\026\301\030\273\071\065\001\001\000" +
    "\002\001\001\000\016\017\303\025\067\030\072\047\070" +
    "\060\063\071\065\001\001\000\002\001\001\000\004\071" +
    "\305\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\065\311\001\001\000\002\001\001\000" +
    "\004\013\321\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\317\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\323\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\077" +
    "\326\001\001\000\004\064\330\001\001\000\002\001\001" +
    "\000\004\021\331\001\001\000\002\001\001\000\004\072" +
    "\334\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\336\001\001\000\010\007\056\022\337\072\014\001" +
    "\001\000\002\001\001\000\004\023\341\001\001\000\006" +
    "\004\023\104\025\001\001\000\002\001\001\000\004\103" +
    "\344\001\001\000\004\065\345\001\001\000\002\001\001" +
    "\000\004\011\350\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\067\355\001\001\000\002\001\001\000\004\067" +
    "\357\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	Tab.init();
	Tab.currentScope.addToLocals(new Obj(Obj.Type, "bool", CUP$MJParser$actions.boolType));

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;

    }



	public enum ERROR_CODE {
		VARIABLE,
		ASSIGN,
		FORMAL_PARAMETERS,
		IF,
		FOR,
		INDEXING,
		EXTENDS,
		PARAMETERS
	}
	
	public enum LOG_TYPE {
		DEBUG,
		INFO,
		ERROR
	}

	public enum SYMBOL_TYPE {
		CONSTANT,
		VARIABLE,
		METHOD,
		PROGRAM,
		CLASS,
		ARRAY
	}
	
	private static final String MAIN = "main";
	
	private static final String error_recovery_string = "Error recovery successful: ";

	// Counting variables
	int constantsCount = 0;
	int globalVarsCount = 0;
	int globalArrayVarsCount = 0;
	int classGlobalVarsCount = 0;
	int mainFunctionVarsCount = 0;
	int globalFuncCount = 0;
	int globalStaticFuncCount = 0;
	int classFuncCount = 0;
	int classStaticFuncCount = 0;
	int statementsBlockCount = 0;
	int mainMethodFunctionCallsCount = 0;
	int functionFormParsCount = 0;
	int classDefinitionCount = 0;
	
	boolean isGlobalContext = true;
	boolean isClassContext = false;
	boolean isMethodContext = false;
	boolean isStaticContext = false;
	boolean isFormalParametersContext = false;
	String currentMethodName = "";
	Obj currentClass = Tab.noObj;
	
	Logger log = Logger.getLogger(getClass());
     
	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatal error, parsing is terminated", cur_token);
    }

	public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report(message, info, LOG_TYPE.ERROR);
    }
  
    public void syntax_error(Symbol cur_token) {
        report("Syntax error", cur_token, LOG_TYPE.ERROR);
    }
  	
  	public void semantic_error(String message, int line) {
        report("Semantic error on line " + line + ": " + message, null, LOG_TYPE.ERROR);
    }

  	public void usage_info(Obj usedObject, String message, int line) {
  		String visitorMessage = "";
  		if(usedObject != null) {
	  		DumpSymbolTableVisitor visitor = new DumpSymbolTableVisitor();
			visitor.visitObjNode(usedObject);
			visitorMessage = " [ " + visitor.getOutput() + "]"; 
		}
		report("Usage info on line " + line + ": " + message + visitorMessage, null, LOG_TYPE.DEBUG);
	}

  	public void semantic_info(String message, int line) {
		report("Semantic info on line " + line + ": " + message, null, LOG_TYPE.DEBUG);
	}
	
	public void log_symbol_detected(Obj object, String message, int line) {
		DumpSymbolTableVisitor visitor = new DumpSymbolTableVisitor();
		visitor.visitObjNode(object);
        
 		semantic_info(message + " [ " + visitor.getOutput() + "]", line);
	}
	
    public void report(String message, Object info, LOG_TYPE logType) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol) {
			msg.append (" on line ").append(((Symbol)info).left).append(", column ").append(((Symbol)info).right);
        }

		switch(logType) {
			case DEBUG:
		    	log.debug(msg.toString());
		    	break;
		    	
			case INFO:
		    	log.info(msg.toString());
		    	break;
		    	
			case ERROR:
		    	log.error(msg.toString());
		    	break;
		 }
    }
    
    // Increments proper var count. Called for every var.
    public void incrementVarsCount(boolean isArray) {
    	if(isFormalParametersContext) { return; }
    
    	// Counting variables
		if(isClassContext) {
			// Counting only class global variables, not the class method variables.
			if(!isMethodContext) {
				classGlobalVarsCount++;
			}
		} else if(isGlobalContext) {
			if(isArray) {
				globalArrayVarsCount++;
			} else {
				globalVarsCount++;
			}
		} else {
			if(isMainMethod()) {
				mainFunctionVarsCount++;
			}
		}
    }
    
    // Increments proper methods count. Called for every method.
    public void incrementMethodsCount() {
    	if(isStaticContext) {
    		if(isClassContext) {
    			classStaticFuncCount++;
    		} else {
    			globalStaticFuncCount++;
    		}
    	} else {
    		if(isClassContext) {
    			classFuncCount++;
    		} else {
    			globalFuncCount++;
    		}
    	}
    }
    
    public boolean isMainMethod() {
    	return isMethodContext && MAIN.equals(currentMethodName);
    }
    
	public String getContextStringForDeclaration() {
		return isFormalParametersContext ? "formal parameter" : isMethodContext ? "local" : isClassContext ? "class" : "global";
	}
	
    public void trackSyntaxErrorRecovery(ERROR_CODE error, String additionalInfo) {
    	String message = error_recovery_string;
    	switch (error) {
    		case VARIABLE:
    			message += getContextStringForDeclaration() + " variable declaration error "; 
    			break;
    			
    		case ASSIGN:
    			message += "Assign operator error ";
    			break;
    			
    		case FORMAL_PARAMETERS:
    			message += "Formal parameters declaration error ";
    			break;	
    		
    		case IF:
    			message += "If statement condition error ";
    			break;
    		
    		case FOR:
    			message += "For loop condition error ";
    			break;	
    		
    		case INDEXING:
    			message += "Indexing array error ";
    			break;
    			
    		case EXTENDS:
    			message += "Extends clause error ";
    			break;
    			
    		case PARAMETERS:
    			message += "Parameters list error ";
    			break;
    		    			
    		default:
    			message += "Unknown syntax error ";
    			break;
    	}
    	
    	log.debug(message + additionalInfo);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {


	// private static final String SUPER_DOT_STRING = "super.";
	
	public static final Struct boolType = new Struct(Struct.Bool);
		
	Struct currentType = Tab.noType;
	boolean isVoidMethod = false;
	
	// Semantic methods

	// Only global/local. Class object usage is set in findClassMemberWithName.
	private String getContextStringForUsage(String identifier) {
		Obj currentObject = Tab.currentScope.findSymbol(identifier);
		boolean isInCurrentScope = currentObject != null;
		if(isInCurrentScope) {
			return "local";
		}
		currentObject = Tab.currentScope.getOuter().findSymbol(identifier);
		
		boolean isInOuterScope = currentObject != null;
		if(isInOuterScope) {
			return "formal parameter";
		}
		
		return "global";
	}

	// Find object with identifier name.
	private Obj findObjectWithName(String identifier, int line) {
		Obj result = Tab.find(identifier);
		
		// Check if field is supper class.
		// No super in specification.
		// for(int retry = 10; retry > 0 && result == Tab.noObj; retry--) {
			// ident = SUPER_DOT_STRING + ident;
			// result = Tab.find(ident);
		// }
		
		if(result == Tab.noObj) {
			parser.semantic_error("tried to used non-existing identifier \"" + identifier + "\"", line);
		} else {
			String objectKind = "";
			switch (result.getKind()) {
				case Obj.Var:
					objectKind = getContextStringForUsage(identifier) + " variable";
					break;
					
				case Obj.Con:
					objectKind = "constant";
					break;
					
				case Obj.Meth:
					objectKind = "global method";
					break;
				
				case Obj.Fld:
					objectKind = "class variable";
					break;
				
				case Obj.Type:
					parser.semantic_error("tried to use class name ("+ identifier +") as a variable name", line);
					break;
				
				default:
					parser.semantic_error("unknown object kind ("+ result.getKind() +") of the identifier \"" + identifier + "\"", line);
					break;
			}
			
			if(objectKind.length() > 0) {
				parser.usage_info(result, objectKind + " \"" + identifier + "\" used.", line);
			}
		}
		
		return result;
	}
		
	private Obj findClassMemberWithName(Obj classObj, String identifier, int line) {
		Obj result = Tab.noObj;
		if(classObj == null) {
			parser.semantic_error("class object is null.", line);
			return result;
		}
		
		for(Obj fld : classObj.getType().getMembers()) {
  			if(fld.getName().equals(identifier)) {
  				result = fld;
  				break;
  			}
		}
		
		if(result == Tab.noObj) {
			parser.semantic_error("tried to used non-existing class member \"" + identifier + "\"", line);
		} else {
			String memberType = "UNKNOWN";
			if(result.getKind() == Obj.Meth) {
				memberType = "method";
			} 
			else if(result.getKind() == Obj.Fld) {
				memberType = "field";
			} else {
				parser.semantic_error("unknown class member type \"" + identifier + "\"", line);
			}
			
			parser.usage_info(result, "class " + memberType + " \"" + identifier + "\" of class instance \"" + classObj.getName() + "\" used.", line);
		}
		
		return result;
	}
	
	private boolean isThisAvailable(String identifier, int line) {
		if(!parser.isClassContext) {
			parser.semantic_error("tried to use \"this\" outside of class. (" + identifier + ")", line);
		} else if(parser.isStaticContext) {
			parser.semantic_error("tried to use \"this\" in static function. (" + identifier + ")", line);
		}
		
		return parser.isClassContext && !parser.isStaticContext;
	}
	
    private boolean doesSymbolAlreadyExist(String name, int line) {
    	boolean doesSymbolExist = Tab.currentScope.findSymbol(name) != null;
    	if(doesSymbolExist) {
			parser.semantic_error("identifier with name \"" + name + "\" already exists.", line);
		}
		return doesSymbolExist;
    }
    
    private boolean doesTypeMatchWithCurrent(Struct type, int line) {
    	boolean doesTypeMatch = type == currentType;
    	if(!doesTypeMatch) {
    		parser.semantic_error("type mismatch.", line);
		}
		return doesTypeMatch;
    }
    
    private void isClassExtensionValid(Struct parentClassType, int line) {
		// Check if class tries to extend itself.
		if(parentClassType == parser.currentClass.getType() && parentClassType != Tab.noType) {
			parser.semantic_error("class tried to extend itself.", line);
		} 
		// Check if class tried to extend primitive or non-existing type.
		else if(parentClassType.getKind() != Struct.Class) {
			parser.semantic_error("class tried to extend primitive or non-existing type.", line);
		}
    }
    
	private Obj addConstantToSymbolTable(String name, Struct currentObjectType, Obj currentObject, int line) {
		if(currentObjectType == null || currentObjectType == Tab.noType) {
			// Failsafe.
			parser.semantic_error("Constant \"" + name + "\" doesn't have a type defined.", line);
			return Tab.noObj;
		} 

		// Check if something with that name exists and if types match.
		if(doesSymbolAlreadyExist(name, line) || !doesTypeMatchWithCurrent(currentObjectType, line)){
			return Tab.noObj;
		}
		
		// Do the insertion.
		Obj createdObject = insertToTable(SYMBOL_TYPE.CONSTANT, name, currentObjectType, line);
		// Copy value.
		createdObject.setAdr(currentObject.getAdr());

		return createdObject;
	}
		
	private Obj addVariableToSymbolTable(String name, int line, boolean isArray) {
		if(doesSymbolAlreadyExist(name, line)){
			return Tab.noObj;
		}
		
		// Symbol doesn't exist, do the insertion.
		SYMBOL_TYPE type = isArray ? SYMBOL_TYPE.ARRAY : SYMBOL_TYPE.VARIABLE;
		return insertToTable(type, name, currentType, line);
	}
	
	private Obj addMethodToSymbolTable(String name, int line) {
		// If it's a main method check if it is void. 
		if(parser.isMainMethod() && !isVoidMethod) {
			parser.semantic_error("main method must have void as a return type.", line);
			return Tab.noObj;
		} 
		// Only class methods can be static.
		else if(parser.isStaticContext && !parser.isClassContext)
		{
			parser.semantic_error("global methods can't be static.", line);
			return Tab.noObj;
		} 
		// Check if some symbol with same name already exist.
		if(doesSymbolAlreadyExist(name, line)){
			return Tab.noObj;
		}
				
		Struct methodType = isVoidMethod ? Tab.noType : currentType;
		return insertToTable(SYMBOL_TYPE.METHOD, name, methodType, line);	
	}
	
	private Obj addProgramToSymbolTable(String name, int line) {
		return insertToTable(SYMBOL_TYPE.PROGRAM, name, Tab.noType, line);
	}
	
	private Obj addClassTypeToSymbolTable(String name, int line) {
		return insertToTable(SYMBOL_TYPE.CLASS, name, new Struct(Struct.Class), line);
	}
	
	private Obj insertToTable(SYMBOL_TYPE symbolType, String name, Struct currentObjectType, int line) {
		int objectKind;
		String message;
		
		switch (symbolType) {
			case CONSTANT:
				objectKind = Obj.Con;
				message = "added constant \"" + name + "\" to symbol table.";
				break;
				
			case VARIABLE:
				objectKind = parser.isClassContext && !parser.isMethodContext ? Obj.Fld : Obj.Var;
				message = "added " + parser.getContextStringForDeclaration() + " variable \"" + name + "\" to symbol table.";
				break;
				
			case ARRAY:
				objectKind = parser.isClassContext && !parser.isMethodContext ? Obj.Fld : Obj.Var;
				message = "added " + parser.getContextStringForDeclaration() + " array variable \"" + name + "\" to symbol table.";
				currentObjectType = new Struct(Struct.Array, currentType);
				break;
				
			case METHOD:
				objectKind = Obj.Meth;
				message = "added method \"" + name + "\" to symbol table.";
				break;
				
			case PROGRAM:
				objectKind = Obj.Prog;
				message = "added program \"" + name + "\" to symbol table.";
				break;
				
			case CLASS:
				objectKind = Obj.Type;
				message = "added class type \"" + name + "\" to symbol table.";
				break;
				
			default:
				objectKind = Obj.NO_VALUE;
				message = "UNKNOWN SYMBOL TYPE";
				parser.semantic_error(message, line);
				break;
		}
		
		// Insert object to table.
		Obj createdObject = Tab.insert(objectKind, name, currentObjectType);
				
		// Create object node string.
		parser.log_symbol_detected(createdObject, message, line);
		
		return createdObject;
	}

  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // NewArrayType ::= 
            {
              Struct RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NewArrayType",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // NewArrayType ::= L_INDEXER Expr R_INDEXER 
            {
              Struct RESULT =null;
		 RESULT = new Struct(Struct.Array, currentType); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NewArrayType",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ActParsListOptional ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsListOptional",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ActParsListOptional ::= L_PAREN ActParsList R_PAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsListOptional",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Factor ::= L_PAREN Expr R_PAREN 
            {
              Struct RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT = e; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Factor ::= NEW Type NewArrayType 
            {
              Struct RESULT =null;
		int typeObjectleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int typeObjectright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj typeObject = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int arrayTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int arrayTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct arrayType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				boolean isArrayType = arrayType != null;
				String objectTypeString = typeObject.getName();
				if(isArrayType) {
					objectTypeString = "array of " + objectTypeString; 
				}
				parser.usage_info(null, "instantiated new object of type \"" + objectTypeString + "\".", typeObjectleft);
				
				RESULT = !isArrayType ? typeObject.getType() : arrayType; 
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Factor ::= OneConst 
            {
              Struct RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj c = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = c.getType(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Factor ::= Designator ActParsListOptional 
            {
              Struct RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // MultiplyFactorList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MultiplyFactorList",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // MultiplyFactorList ::= MultiplyFactorList MulOp Factor 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MultiplyFactorList",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Term ::= Factor MultiplyFactorList 
            {
              Struct RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // MulOpRight ::= MODULATE_EQUALS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOpRight",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // MulOpRight ::= DIVIDE_EQUALS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOpRight",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // MulOpRight ::= MULTIPLY_EQUALS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOpRight",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // MulOpLeft ::= MODULATE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOpLeft",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // MulOpLeft ::= DIVIDE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOpLeft",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // MulOpLeft ::= MULTIPLY 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOpLeft",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // MulOp ::= MulOpRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOp",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // MulOp ::= MulOpLeft 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOp",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // AddOpRight ::= MINUS_EQUALS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddOpRight",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // AddOpRight ::= PLUS_EQUALS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddOpRight",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // AddOpLeft ::= MINUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddOpLeft",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // AddOpLeft ::= PLUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddOpLeft",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // AddOp ::= AddOpRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddOp",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // AddOp ::= AddOpLeft 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddOp",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Negation ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Negation",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Negation ::= MINUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Negation",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // AssignOp ::= MulOpRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignOp",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // AssignOp ::= AddOpRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignOp",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // AssignOp ::= EQUALS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignOp",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // AddOneTerm ::= AddOp Term 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddOneTerm",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // AddTermList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddTermList",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // AddTermList ::= AddTermList AddOneTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddTermList",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Expr ::= Negation Term AddTermList 
            {
              Struct RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ActPars ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ActPars ::= ActPars COMMA Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ActParsList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsList",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ActParsList ::= error 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.PARAMETERS, "(1)"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsList",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ActParsList ::= ActPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsList",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // DesignatorStatementOptions ::= DECREMENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOptions",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DesignatorStatementOptions ::= INCREMENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOptions",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DesignatorStatementOptions ::= L_PAREN ActParsList R_PAREN 
            {
              Object RESULT =null;
		 
									if(parser.isMainMethod()) {
										parser.mainMethodFunctionCallsCount++;
									}
								
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOptions",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // DesignatorStatementOptions ::= AssignOp error 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.ASSIGN, "(1)"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOptions",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // DesignatorStatementOptions ::= AssignOp Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOptions",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Designator ::= Designator L_INDEXER error R_INDEXER 
            {
              Obj RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.INDEXING, "(1)"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Designator ::= Designator L_INDEXER Expr R_INDEXER 
            {
              Obj RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
				 	if (des.getType().getKind() == Struct.Array) {
						RESULT = new Obj(Obj.Elem, "", des.getType().getElemType());
						parser.usage_info(des, "element of array \"" + des.getName() + "\" used.", desleft);
					} else {
						parser.semantic_error("tried to used indexing on a non-array object \"" + des.getName() + "\"", desleft);
					}
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Designator ::= Designator DOT IDENT 
            {
              Obj RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = findClassMemberWithName(des, identifier, identifierleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Designator ::= THIS DOT IDENT 
            {
              Obj RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					if(isThisAvailable(identifier, identifierleft)) {
						RESULT = findClassMemberWithName(parser.currentClass, identifier, identifierleft);
					}
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Designator ::= IDENT 
            {
              Obj RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = findObjectWithName(identifier, identifierleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DesignatorStatement ::= Designator DesignatorStatementOptions 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // RelOp ::= LESS_EQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelOp",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // RelOp ::= LESS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelOp",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // RelOp ::= GREATER_EQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelOp",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // RelOp ::= GREATER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelOp",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // RelOp ::= NOT_EQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelOp",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // RelOp ::= EQUALITY 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelOp",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // RelOpExprList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelOpExprList",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // RelOpExprList ::= RelOp Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelOpExprList",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CondFact ::= Expr RelOpExprList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CondFactList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFactList",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CondFactList ::= CondFactList AND CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFactList",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CondTerm ::= CondFact CondFactList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CondTermList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTermList",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CondTermList ::= CondTermList OR CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTermList",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Condition ::= CondTerm CondTermList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OptionalCondition ::= error 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.FOR, "(2)"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptionalCondition",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OptionalCondition ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptionalCondition",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OptionalCondition ::= Condition 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptionalCondition",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // IfStatement ::= IF L_PAREN error R_PAREN Statement ELSE Statement 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.IF, "(2)"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IfStatement",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // IfStatement ::= IF L_PAREN Condition R_PAREN Statement ELSE Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IfStatement",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // IfStatement ::= IF L_PAREN error R_PAREN Statement 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.IF, "(1)"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IfStatement",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // IfStatement ::= IF L_PAREN Condition R_PAREN Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IfStatement",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OptionalDesignatorStatement ::= error 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.FOR, "(1)"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptionalDesignatorStatement",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OptionalDesignatorStatement ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptionalDesignatorStatement",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OptionalDesignatorStatement ::= DesignatorStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptionalDesignatorStatement",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ForStatement ::= FOR L_PAREN OptionalDesignatorStatement SEMI OptionalCondition SEMI OptionalDesignatorStatement R_PAREN Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForStatement",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Return ::= RETURN Expr SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Return",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Return ::= RETURN SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Return",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OneNumber ::= NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OneNumber",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OneNumber ::= OneNumber SEMI NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OneNumber",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NumbersList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NumbersList",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NumbersList ::= OneNumber 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NumbersList",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // StatementsList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementsList",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // StatementsList ::= StatementsList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementsList",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Statement ::= L_BRACE StatementsList R_BRACE 
            {
              Object RESULT =null;
		 parser.statementsBlockCount++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Statement ::= PRINT L_PAREN Expr NumbersList R_PAREN SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Statement ::= READ L_PAREN Designator R_PAREN SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Statement ::= Return 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Statement ::= CONTINUE SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Statement ::= BREAK SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Statement ::= ForStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Statement ::= IfStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Statement ::= DesignatorStatement SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FormParsList ::= Type OneVar 
            {
              Object RESULT =null;
		 parser.functionFormParsCount++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsList",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FormParsList ::= FormParsList COMMA Type OneVar 
            {
              Object RESULT =null;
		 parser.functionFormParsCount++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsList",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FormPars ::= error 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.FORMAL_PARAMETERS, "(1)"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FormPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FormPars ::= NT$6 FormParsList 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.isFormalParametersContext = false; // Starting form pars context 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$6 ::= 
            {
              Object RESULT =null;
 parser.isFormalParametersContext = true; // Starting form pars context 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$6",68, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // VoidType ::= VOID 
            {
              Object RESULT =null;
		 isVoidMethod = true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VoidType",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // VoidType ::= Type 
            {
              Object RESULT =null;
		 isVoidMethod = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VoidType",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // StaticDeclarator ::= 
            {
              Object RESULT =null;
		 parser.isStaticContext = false; // Closing static context 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StaticDeclarator",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // StaticDeclarator ::= STATIC 
            {
              Object RESULT =null;
		 parser.isStaticContext = true; // Starting static context 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StaticDeclarator",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MethodName ::= IDENT 
            {
              Obj RESULT =null;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					parser.currentMethodName = methodName; // Save method name so we can detect main function later
					RESULT = addMethodToSymbolTable(methodName, methodNameleft);
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodName",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // MethodsDecl ::= NT$4 StaticDeclarator VoidType MethodName OpenScope L_PAREN FormPars R_PAREN OpenScope VarsList L_BRACE StatementsList R_BRACE CloseScope NT$5 CloseScope 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)).right;
		Obj m = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodsDecl",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-15)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-13)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).right;
		Obj m = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).value;
 
					parser.incrementMethodsCount();
					parser.isMethodContext = false; // Closing method context
					Tab.chainLocalSymbols(m); 
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$5",67, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$4 ::= 
            {
              Object RESULT =null;
 parser.isMethodContext = true; // Starting method context 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$4",66, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MethodsList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodsList",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MethodsList ::= MethodsList MethodsDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodsList",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // MethodsSection ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodsSection",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // MethodsSection ::= L_BRACE MethodsList R_BRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodsSection",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VarsList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarsList",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VarsList ::= VarsList VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarsList",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ClassExtender ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassExtender",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ClassExtender ::= error 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.EXTENDS, "(1)"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassExtender",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ClassExtender ::= EXTENDS Type 
            {
              Object RESULT =null;
		int parentClassObjectleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int parentClassObjectright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj parentClassObject = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 isClassExtensionValid(parentClassObject.getType(), parentClassObjectleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassExtender",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ClassName ::= IDENT 
            {
              Struct RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
					parser.currentClass = addClassTypeToSymbolTable(className, classNameleft);
					RESULT = parser.currentClass.getType();
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassName",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ClassDecl ::= CLASS ClassName OpenScope ClassExtender L_BRACE VarsList MethodsSection R_BRACE NT$3 CloseScope 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		Struct c = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$3 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		Struct c = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
 
					parser.currentClass = Tab.noObj;
					Tab.chainLocalSymbols(c);
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3",65, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Type ::= IDENT 
            {
              Obj RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
				Obj typeNode = Tab.find(typeName);
				if (typeNode == Tab.noObj) {
					parser.semantic_error("type \"" + typeName + "\" not found in symbol table.", typeNameleft);
					RESULT = Tab.noObj;
					currentType = Tab.noType;
				}
				else {
					if (Obj.Type == typeNode.getKind()) {
						RESULT = typeNode;
						currentType = typeNode.getType();
					}
					else {
						parser.semantic_error("\"" + typeName + "\" is not a type.", typeNameleft);
						RESULT = Tab.noObj;
						currentType = Tab.noType;
					}
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OneVar ::= IDENT L_INDEXER R_INDEXER 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 
 				parser.incrementVarsCount(true);
 				addVariableToSymbolTable(varName, varNameleft, true); 
 			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OneVar",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OneVar ::= IDENT 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
				parser.incrementVarsCount(false); 
				addVariableToSymbolTable(varName, varNameleft, false);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OneVar",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VarsElementsList ::= error OneVar 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.VARIABLE, "(2)"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarsElementsList",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VarsElementsList ::= OneVar 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarsElementsList",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VarsElementsList ::= error COMMA OneVar 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.VARIABLE, "(1)"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarsElementsList",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VarsElementsList ::= VarsElementsList COMMA OneVar 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarsElementsList",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarDecl ::= Type error SEMI 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.VARIABLE, "(3)"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VarDecl ::= Type VarsElementsList SEMI 
            {
              Object RESULT =null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj varType = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OneConst ::= BOOL 
            {
              Obj RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean value = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					RESULT = new Obj(Obj.Con, "", boolType);  
		 	    	RESULT.setAdr(value ? 1:0);
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OneConst",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // OneConst ::= CHAR 
            {
              Obj RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character value = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					RESULT = new Obj(Obj.Con, "", Tab.charType);  
		 	    	RESULT.setAdr(value);
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OneConst",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // OneConst ::= NUMBER 
            {
              Obj RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					RESULT = new Obj(Obj.Con, "", Tab.intType);  
 	    			RESULT.setAdr((int)value);
 	    		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OneConst",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ConstList ::= IDENT EQUALS OneConst 
            {
              Object RESULT =null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int currentConstObjectleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int currentConstObjectright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj currentConstObject = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
					parser.constantsCount++; // Counting constants
					addConstantToSymbolTable(constName, currentConstObject.getType(), currentConstObject, currentConstObjectleft);
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstList ::= ConstList COMMA IDENT EQUALS OneConst 
            {
              Object RESULT =null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int currentConstObjectleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int currentConstObjectright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj currentConstObject = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
					parser.constantsCount++; // Counting constants
					addConstantToSymbolTable(constName, currentConstObject.getType(), currentConstObject, currentConstObjectleft); 
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstDecl ::= CONST Type ConstList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ProgramElement ::= NT$2 ClassDecl 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 
					parser.isClassContext = false; // Closing class context
					parser.classDefinitionCount++; 
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramElement",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$2 ::= 
            {
              Object RESULT =null;
 parser.isClassContext = true; // Starting class context 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ProgramElement ::= VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramElement",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ProgramElement ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramElement",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ProgramElementsList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramElementsList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ProgramElementsList ::= ProgramElementsList ProgramElement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramElementsList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ProgName ::= IDENT 
            {
              Obj RESULT =null;
		int programNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int programNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String programName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = addProgramToSymbolTable(programName, programNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgName",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Program ::= PROG ProgName OpenScope ProgramElementsList L_BRACE NT$0 MethodsList R_BRACE NT$1 CloseScope 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
 Tab.chainLocalSymbols(p); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
 parser.isGlobalContext = false; // Closing global context 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CloseScope ::= 
            {
              Object RESULT =null;
		 Tab.closeScope(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CloseScope",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // OpenScope ::= 
            {
              Object RESULT =null;
		 Tab.openScope(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OpenScope",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

