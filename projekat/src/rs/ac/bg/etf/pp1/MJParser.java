
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Feb 02 00:02:05 CET 2017
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.MJParser.ERROR_CODE;
import rs.ac.bg.etf.pp1.MJParser.SYMBOL_TYPE;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;
import rs.etf.pp1.symboltable.visitors.DumpSymbolTableVisitor;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Feb 02 00:02:05 CET 2017
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\226\000\002\002\004\000\002\064\002\000\002\065" +
    "\002\000\002\101\002\000\002\102\002\000\002\002\014" +
    "\000\002\066\003\000\002\003\004\000\002\003\002\000" +
    "\002\005\003\000\002\005\003\000\002\103\002\000\002" +
    "\005\004\000\002\006\006\000\002\011\007\000\002\011" +
    "\005\000\002\067\003\000\002\067\003\000\002\067\003" +
    "\000\002\007\005\000\002\007\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\003\000\002\012\004\000\002" +
    "\013\003\000\002\013\005\000\002\074\003\000\002\104" +
    "\002\000\002\010\014\000\002\071\003\000\002\021\004" +
    "\000\002\021\003\000\002\021\002\000\002\024\004\000" +
    "\002\024\002\000\002\022\005\000\002\022\002\000\002" +
    "\023\004\000\002\023\002\000\002\105\002\000\002\106" +
    "\002\000\002\004\020\000\002\070\003\000\002\014\003" +
    "\000\002\014\002\000\002\015\003\000\002\015\003\000" +
    "\002\107\002\000\002\016\004\000\002\016\002\000\002" +
    "\016\003\000\002\020\006\000\002\020\004\000\002\017" +
    "\004\000\002\017\003\000\002\017\003\000\002\017\004" +
    "\000\002\017\004\000\002\017\003\000\002\017\007\000" +
    "\002\017\010\000\002\017\005\000\002\063\004\000\002" +
    "\063\002\000\002\061\003\000\002\061\002\000\002\062" +
    "\005\000\002\062\003\000\002\060\004\000\002\060\005" +
    "\000\002\025\013\000\002\026\003\000\002\026\002\000" +
    "\002\026\003\000\002\047\007\000\002\047\007\000\002" +
    "\047\011\000\002\047\011\000\002\027\003\000\002\027" +
    "\002\000\002\027\003\000\002\051\004\000\002\053\005" +
    "\000\002\053\002\000\002\052\004\000\002\055\005\000" +
    "\002\055\002\000\002\054\004\000\002\057\004\000\002" +
    "\057\002\000\002\056\003\000\002\056\003\000\002\056" +
    "\003\000\002\056\003\000\002\056\003\000\002\056\003" +
    "\000\002\030\004\000\002\072\003\000\002\072\005\000" +
    "\002\072\005\000\002\072\005\000\002\072\006\000\002" +
    "\072\006\000\002\073\005\000\002\073\003\000\002\031" +
    "\004\000\002\031\004\000\002\031\005\000\002\031\003" +
    "\000\002\031\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\002\000\002\033\005\000\002\033\003\000\002" +
    "\077\005\000\002\035\004\000\002\035\002\000\002\036" +
    "\004\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\034\003\000\002\034\002\000\002\040\003\000" +
    "\002\040\003\000\002\043\003\000\002\043\003\000\002" +
    "\042\003\000\002\042\003\000\002\044\003\000\002\044" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\045\003\000\002\045\003\000\002\045\003\000" +
    "\002\076\004\000\002\037\005\000\002\037\002\000\002" +
    "\075\004\000\002\075\003\000\002\075\005\000\002\075" +
    "\005\000\002\050\005\000\002\050\002\000\002\100\005" +
    "\000\002\100\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\364\000\004\004\005\001\002\000\004\002\366\001" +
    "\002\000\004\064\006\001\002\000\012\005\ufffb\010\ufffb" +
    "\012\ufffb\064\ufffb\001\002\000\012\005\000\010\000\012" +
    "\000\064\000\001\002\000\012\005\ufff9\010\ufff9\012\ufff9" +
    "\064\ufff9\001\002\000\012\005\ufff6\010\012\012\021\064" +
    "\017\001\002\000\004\064\017\001\002\000\012\005\ufff8" +
    "\010\ufff8\012\ufff8\064\ufff8\001\002\000\004\005\333\001" +
    "\002\000\006\003\320\064\050\001\002\000\012\005\ufff7" +
    "\010\ufff7\012\ufff7\064\ufff7\001\002\000\070\003\uffe6\012" +
    "\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\037\uffe6" +
    "\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6\046" +
    "\uffe6\047\uffe6\050\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6" +
    "\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\064\uffe6\001" +
    "\002\000\012\005\ufffa\010\ufffa\012\ufffa\064\ufffa\001\002" +
    "\000\012\013\ufffe\023\ufffe\024\ufffe\064\ufffe\001\002\000" +
    "\012\013\uffda\023\uffda\024\uffda\064\uffda\001\002\000\012" +
    "\013\025\023\uffd9\024\uffd9\064\uffd9\001\002\000\012\013" +
    "\uffdb\023\uffdb\024\uffdb\064\uffdb\001\002\000\004\002\ufffd" +
    "\001\002\000\010\023\027\024\uffd4\064\uffd4\001\002\000" +
    "\006\024\uffd5\064\uffd5\001\002\000\006\024\033\064\017" +
    "\001\002\000\004\064\034\001\002\000\004\064\uffd3\001" +
    "\002\000\004\064\uffd2\001\002\000\004\014\uffd6\001\002" +
    "\000\004\014\000\001\002\000\004\014\037\001\002\000" +
    "\010\003\040\015\uffcf\064\uffd1\001\002\000\004\015\uffce" +
    "\001\002\000\004\015\054\001\002\000\004\064\017\001" +
    "\002\000\004\064\050\001\002\000\006\015\uffd0\017\045" +
    "\001\002\000\004\064\017\001\002\000\004\064\050\001" +
    "\002\000\006\015\uffcd\017\uffcd\001\002\000\012\015\uffe8" +
    "\016\uffe8\017\uffe8\020\051\001\002\000\004\021\052\001" +
    "\002\000\010\015\uffe7\016\uffe7\017\uffe7\001\002\000\006" +
    "\015\uffcc\017\uffcc\001\002\000\006\012\uffde\064\uffde\001" +
    "\002\000\006\012\057\064\017\001\002\000\010\012\uffdf" +
    "\013\uffdf\064\uffdf\001\002\000\032\006\uffc1\007\uffc1\012" +
    "\uffc1\013\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1" +
    "\036\uffc1\051\uffc1\064\uffc1\001\002\000\032\006\073\007" +
    "\101\012\072\013\074\031\102\032\077\033\062\034\063" +
    "\035\075\036\066\051\070\064\064\001\002\000\030\011" +
    "\310\014\307\020\200\025\203\026\302\027\304\041\173" +
    "\042\170\046\164\047\160\050\155\001\002\000\004\014" +
    "\276\001\002\000\004\016\275\001\002\000\074\011\uff9f" +
    "\014\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\025" +
    "\uff9f\026\uff9f\027\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f" +
    "\043\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f\053" +
    "\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f\060\uff9f\061\uff9f" +
    "\062\uff9f\063\uff9f\001\002\000\004\016\274\001\002\000" +
    "\026\006\uff85\007\uff85\014\uff85\016\272\030\uff85\040\115" +
    "\063\uff85\064\uff85\065\uff85\066\uff85\001\002\000\034\006" +
    "\uffca\007\uffca\012\uffca\013\uffca\031\uffca\032\uffca\033\uffca" +
    "\034\uffca\035\uffca\036\uffca\051\uffca\052\uffca\064\uffca\001" +
    "\002\000\004\014\256\001\002\000\034\006\uffc9\007\uffc9" +
    "\012\uffc9\013\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035" +
    "\uffc9\036\uffc9\051\uffc9\052\uffc9\064\uffc9\001\002\000\032" +
    "\006\uffc1\007\uffc1\012\uffc1\013\uffc1\031\uffc1\032\uffc1\033" +
    "\uffc1\034\uffc1\035\uffc1\036\uffc1\051\uffc1\064\uffc1\001\002" +
    "\000\004\025\252\001\002\000\012\013\uffd8\023\uffd8\024" +
    "\uffd8\064\uffd8\001\002\000\004\016\247\001\002\000\034" +
    "\006\uffc6\007\uffc6\012\uffc6\013\uffc6\031\uffc6\032\uffc6\033" +
    "\uffc6\034\uffc6\035\uffc6\036\uffc6\051\uffc6\052\uffc6\064\uffc6" +
    "\001\002\000\004\014\236\001\002\000\032\006\uffc2\007" +
    "\uffc2\012\uffc2\013\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2" +
    "\035\uffc2\036\uffc2\051\uffc2\064\uffc2\001\002\000\004\025" +
    "\230\001\002\000\004\014\103\001\002\000\014\003\104" +
    "\006\073\007\101\016\uffb8\064\064\001\002\000\006\015" +
    "\uffb7\016\uffb7\001\002\000\004\016\107\001\002\000\006" +
    "\015\uffb9\016\uffb9\001\002\000\030\003\111\006\uff85\007" +
    "\uff85\014\uff85\016\uffb1\030\uff85\040\115\063\uff85\064\uff85" +
    "\065\uff85\066\uff85\001\002\000\010\015\uffad\016\uffad\054" +
    "\uffad\001\002\000\004\016\uffb0\001\002\000\022\006\073" +
    "\007\101\014\147\030\140\063\143\064\064\065\150\066" +
    "\141\001\002\000\004\016\134\001\002\000\026\015\uffa7" +
    "\016\uffa7\053\uffa7\054\uffa7\055\125\056\123\057\126\060" +
    "\127\061\130\062\132\001\002\000\022\006\uff86\007\uff86" +
    "\014\uff86\030\uff86\063\uff86\064\uff86\065\uff86\066\uff86\001" +
    "\002\000\004\016\uffb2\001\002\000\012\015\uffaa\016\uffaa" +
    "\053\uffaa\054\uffaa\001\002\000\012\015\uffac\016\uffac\053" +
    "\121\054\uffac\001\002\000\024\006\uff85\007\uff85\014\uff85" +
    "\030\uff85\040\115\063\uff85\064\uff85\065\uff85\066\uff85\001" +
    "\002\000\012\015\uffab\016\uffab\053\uffab\054\uffab\001\002" +
    "\000\024\006\uffa5\007\uffa5\014\uffa5\030\uffa5\040\uffa5\063" +
    "\uffa5\064\uffa5\065\uffa5\066\uffa5\001\002\000\024\006\uff85" +
    "\007\uff85\014\uff85\030\uff85\040\115\063\uff85\064\uff85\065" +
    "\uff85\066\uff85\001\002\000\024\006\uffa6\007\uffa6\014\uffa6" +
    "\030\uffa6\040\uffa6\063\uffa6\064\uffa6\065\uffa6\066\uffa6\001" +
    "\002\000\024\006\uffa4\007\uffa4\014\uffa4\030\uffa4\040\uffa4" +
    "\063\uffa4\064\uffa4\065\uffa4\066\uffa4\001\002\000\024\006" +
    "\uffa3\007\uffa3\014\uffa3\030\uffa3\040\uffa3\063\uffa3\064\uffa3" +
    "\065\uffa3\066\uffa3\001\002\000\024\006\uffa2\007\uffa2\014" +
    "\uffa2\030\uffa2\040\uffa2\063\uffa2\064\uffa2\065\uffa2\066\uffa2" +
    "\001\002\000\012\015\uffa9\016\uffa9\053\uffa9\054\uffa9\001" +
    "\002\000\024\006\uffa1\007\uffa1\014\uffa1\030\uffa1\040\uffa1" +
    "\063\uffa1\064\uffa1\065\uffa1\066\uffa1\001\002\000\012\015" +
    "\uffa8\016\uffa8\053\uffa8\054\uffa8\001\002\000\014\003\104" +
    "\006\073\007\101\015\uffb8\064\064\001\002\000\004\015" +
    "\136\001\002\000\030\006\073\007\101\012\072\031\102" +
    "\032\077\033\062\034\063\035\075\036\066\051\070\064" +
    "\064\001\002\000\034\006\uffba\007\uffba\012\uffba\013\uffba" +
    "\031\uffba\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba\051" +
    "\uffba\052\uffba\064\uffba\001\002\000\004\064\017\001\002" +
    "\000\060\015\uffef\016\uffef\017\uffef\021\uffef\037\uffef\040" +
    "\uffef\041\uffef\042\uffef\043\uffef\044\uffef\045\uffef\046\uffef" +
    "\047\uffef\050\uffef\053\uffef\054\uffef\055\uffef\056\uffef\057" +
    "\uffef\060\uffef\061\uffef\062\uffef\063\uffef\001\002\000\066" +
    "\014\201\015\uff6e\016\uff6e\017\uff6e\020\200\021\uff6e\025" +
    "\203\037\uff6e\040\uff6e\041\uff6e\042\uff6e\043\uff6e\044\uff6e" +
    "\045\uff6e\046\uff6e\047\uff6e\050\uff6e\053\uff6e\054\uff6e\055" +
    "\uff6e\056\uff6e\057\uff6e\060\uff6e\061\uff6e\062\uff6e\063\uff6e" +
    "\001\002\000\060\015\ufff1\016\ufff1\017\ufff1\021\ufff1\037" +
    "\ufff1\040\ufff1\041\ufff1\042\ufff1\043\ufff1\044\ufff1\045\ufff1" +
    "\046\ufff1\047\ufff1\050\ufff1\053\ufff1\054\ufff1\055\ufff1\056" +
    "\ufff1\057\ufff1\060\ufff1\061\ufff1\062\ufff1\063\ufff1\001\002" +
    "\000\060\015\uff72\016\uff72\017\uff72\021\uff72\037\uff72\040" +
    "\uff72\041\uff72\042\uff72\043\uff72\044\uff72\045\uff72\046\uff72" +
    "\047\uff72\050\uff72\053\uff72\054\uff72\055\uff72\056\uff72\057" +
    "\uff72\060\uff72\061\uff72\062\uff72\063\uff72\001\002\000\044" +
    "\015\uff8b\016\uff8b\017\uff8b\021\uff8b\037\uff8b\040\uff8b\041" +
    "\uff8b\042\uff8b\053\uff8b\054\uff8b\055\uff8b\056\uff8b\057\uff8b" +
    "\060\uff8b\061\uff8b\062\uff8b\063\uff8b\001\002\000\060\015" +
    "\uff74\016\uff74\017\uff74\021\uff74\037\uff74\040\uff74\041\uff74" +
    "\042\uff74\043\uff74\044\uff74\045\uff74\046\uff74\047\uff74\050" +
    "\uff74\053\uff74\054\uff74\055\uff74\056\uff74\057\uff74\060\uff74" +
    "\061\uff74\062\uff74\063\uff74\001\002\000\024\006\uff85\007" +
    "\uff85\014\uff85\030\uff85\040\115\063\uff85\064\uff85\065\uff85" +
    "\066\uff85\001\002\000\060\015\ufff0\016\ufff0\017\ufff0\021" +
    "\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0" +
    "\045\ufff0\046\ufff0\047\ufff0\050\ufff0\053\ufff0\054\ufff0\055" +
    "\ufff0\056\ufff0\057\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0" +
    "\001\002\000\004\015\152\001\002\000\060\015\uff70\016" +
    "\uff70\017\uff70\021\uff70\037\uff70\040\uff70\041\uff70\042\uff70" +
    "\043\uff70\044\uff70\045\uff70\046\uff70\047\uff70\050\uff70\053" +
    "\uff70\054\uff70\055\uff70\056\uff70\057\uff70\060\uff70\061\uff70" +
    "\062\uff70\063\uff70\001\002\000\060\015\uff76\016\uff76\017" +
    "\uff76\021\uff76\037\uff76\040\uff76\041\uff76\042\uff76\043\156" +
    "\044\154\045\157\046\164\047\160\050\155\053\uff76\054" +
    "\uff76\055\uff76\056\uff76\057\uff76\060\uff76\061\uff76\062\uff76" +
    "\063\uff76\001\002\000\022\006\uff7b\007\uff7b\014\uff7b\030" +
    "\uff7b\063\uff7b\064\uff7b\065\uff7b\066\uff7b\001\002\000\026" +
    "\003\uff77\006\uff77\007\uff77\014\uff77\030\uff77\040\uff77\063" +
    "\uff77\064\uff77\065\uff77\066\uff77\001\002\000\022\006\uff7c" +
    "\007\uff7c\014\uff7c\030\uff7c\063\uff7c\064\uff7c\065\uff7c\066" +
    "\uff7c\001\002\000\022\006\uff7a\007\uff7a\014\uff7a\030\uff7a" +
    "\063\uff7a\064\uff7a\065\uff7a\066\uff7a\001\002\000\026\003" +
    "\uff78\006\uff78\007\uff78\014\uff78\030\uff78\040\uff78\063\uff78" +
    "\064\uff78\065\uff78\066\uff78\001\002\000\022\006\uff7d\007" +
    "\uff7d\014\uff7d\030\uff7d\063\uff7d\064\uff7d\065\uff7d\066\uff7d" +
    "\001\002\000\022\006\uff7e\007\uff7e\014\uff7e\030\uff7e\063" +
    "\uff7e\064\uff7e\065\uff7e\066\uff7e\001\002\000\022\006\073" +
    "\007\101\014\147\030\140\063\143\064\064\065\150\066" +
    "\141\001\002\000\026\003\uff79\006\uff79\007\uff79\014\uff79" +
    "\030\uff79\040\uff79\063\uff79\064\uff79\065\uff79\066\uff79\001" +
    "\002\000\060\015\uff75\016\uff75\017\uff75\021\uff75\037\uff75" +
    "\040\uff75\041\uff75\042\uff75\043\uff75\044\uff75\045\uff75\046" +
    "\uff75\047\uff75\050\uff75\053\uff75\054\uff75\055\uff75\056\uff75" +
    "\057\uff75\060\uff75\061\uff75\062\uff75\063\uff75\001\002\000" +
    "\044\015\uff8d\016\uff8d\017\uff8d\021\uff8d\037\167\040\172" +
    "\041\173\042\170\053\uff8d\054\uff8d\055\uff8d\056\uff8d\057" +
    "\uff8d\060\uff8d\061\uff8d\062\uff8d\063\uff8d\001\002\000\022" +
    "\006\uff82\007\uff82\014\uff82\030\uff82\063\uff82\064\uff82\065" +
    "\uff82\066\uff82\001\002\000\026\003\uff7f\006\uff7f\007\uff7f" +
    "\014\uff7f\030\uff7f\040\uff7f\063\uff7f\064\uff7f\065\uff7f\066" +
    "\uff7f\001\002\000\022\006\uff83\007\uff83\014\uff83\030\uff83" +
    "\063\uff83\064\uff83\065\uff83\066\uff83\001\002\000\022\006" +
    "\uff81\007\uff81\014\uff81\030\uff81\063\uff81\064\uff81\065\uff81" +
    "\066\uff81\001\002\000\026\003\uff80\006\uff80\007\uff80\014" +
    "\uff80\030\uff80\040\uff80\063\uff80\064\uff80\065\uff80\066\uff80" +
    "\001\002\000\022\006\uff84\007\uff84\014\uff84\030\uff84\063" +
    "\uff84\064\uff84\065\uff84\066\uff84\001\002\000\022\006\073" +
    "\007\101\014\147\030\140\063\143\064\064\065\150\066" +
    "\141\001\002\000\044\015\uff8c\016\uff8c\017\uff8c\021\uff8c" +
    "\037\uff8c\040\uff8c\041\uff8c\042\uff8c\053\uff8c\054\uff8c\055" +
    "\uff8c\056\uff8c\057\uff8c\060\uff8c\061\uff8c\062\uff8c\063\uff8c" +
    "\001\002\000\044\015\uff8a\016\uff8a\017\uff8a\021\uff8a\037" +
    "\uff8a\040\uff8a\041\uff8a\042\uff8a\053\uff8a\054\uff8a\055\uff8a" +
    "\056\uff8a\057\uff8a\060\uff8a\061\uff8a\062\uff8a\063\uff8a\001" +
    "\002\000\026\003\214\006\uff85\007\uff85\014\uff85\030\uff85" +
    "\040\115\063\uff85\064\uff85\065\uff85\066\uff85\001\002\000" +
    "\030\003\206\006\uff85\007\uff85\014\uff85\015\uff90\030\uff85" +
    "\040\115\063\uff85\064\uff85\065\uff85\066\uff85\001\002\000" +
    "\060\015\uff73\016\uff73\017\uff73\021\uff73\037\uff73\040\uff73" +
    "\041\uff73\042\uff73\043\uff73\044\uff73\045\uff73\046\uff73\047" +
    "\uff73\050\uff73\053\uff73\054\uff73\055\uff73\056\uff73\057\uff73" +
    "\060\uff73\061\uff73\062\uff73\063\uff73\001\002\000\004\064" +
    "\204\001\002\000\074\011\uff9c\014\uff9c\015\uff9c\016\uff9c" +
    "\017\uff9c\020\uff9c\021\uff9c\025\uff9c\026\uff9c\027\uff9c\037" +
    "\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c" +
    "\046\uff9c\047\uff9c\050\uff9c\053\uff9c\054\uff9c\055\uff9c\056" +
    "\uff9c\057\uff9c\060\uff9c\061\uff9c\062\uff9c\063\uff9c\001\002" +
    "\000\006\015\uff92\017\212\001\002\000\004\015\uff91\001" +
    "\002\000\006\015\uff8e\017\uff8e\001\002\000\004\015\211" +
    "\001\002\000\060\015\uff6f\016\uff6f\017\uff6f\021\uff6f\037" +
    "\uff6f\040\uff6f\041\uff6f\042\uff6f\043\uff6f\044\uff6f\045\uff6f" +
    "\046\uff6f\047\uff6f\050\uff6f\053\uff6f\054\uff6f\055\uff6f\056" +
    "\uff6f\057\uff6f\060\uff6f\061\uff6f\062\uff6f\063\uff6f\001\002" +
    "\000\024\006\uff85\007\uff85\014\uff85\030\uff85\040\115\063" +
    "\uff85\064\uff85\065\uff85\066\uff85\001\002\000\006\015\uff8f" +
    "\017\uff8f\001\002\000\004\021\217\001\002\000\004\021" +
    "\216\001\002\000\074\011\uff9b\014\uff9b\015\uff9b\016\uff9b" +
    "\017\uff9b\020\uff9b\021\uff9b\025\uff9b\026\uff9b\027\uff9b\037" +
    "\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b" +
    "\046\uff9b\047\uff9b\050\uff9b\053\uff9b\054\uff9b\055\uff9b\056" +
    "\uff9b\057\uff9b\060\uff9b\061\uff9b\062\uff9b\063\uff9b\001\002" +
    "\000\074\011\uff9a\014\uff9a\015\uff9a\016\uff9a\017\uff9a\020" +
    "\uff9a\021\uff9a\025\uff9a\026\uff9a\027\uff9a\037\uff9a\040\uff9a" +
    "\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a\047" +
    "\uff9a\050\uff9a\053\uff9a\054\uff9a\055\uff9a\056\uff9a\057\uff9a" +
    "\060\uff9a\061\uff9a\062\uff9a\063\uff9a\001\002\000\062\015" +
    "\uff6c\016\uff6c\017\uff6c\020\221\021\uff6c\037\uff6c\040\uff6c" +
    "\041\uff6c\042\uff6c\043\uff6c\044\uff6c\045\uff6c\046\uff6c\047" +
    "\uff6c\050\uff6c\053\uff6c\054\uff6c\055\uff6c\056\uff6c\057\uff6c" +
    "\060\uff6c\061\uff6c\062\uff6c\063\uff6c\001\002\000\024\006" +
    "\uff85\007\uff85\014\uff85\030\uff85\040\115\063\uff85\064\uff85" +
    "\065\uff85\066\uff85\001\002\000\060\015\uff71\016\uff71\017" +
    "\uff71\021\uff71\037\uff71\040\uff71\041\uff71\042\uff71\043\uff71" +
    "\044\uff71\045\uff71\046\uff71\047\uff71\050\uff71\053\uff71\054" +
    "\uff71\055\uff71\056\uff71\057\uff71\060\uff71\061\uff71\062\uff71" +
    "\063\uff71\001\002\000\004\021\224\001\002\000\060\015" +
    "\uff6d\016\uff6d\017\uff6d\021\uff6d\037\uff6d\040\uff6d\041\uff6d" +
    "\042\uff6d\043\uff6d\044\uff6d\045\uff6d\046\uff6d\047\uff6d\050" +
    "\uff6d\053\uff6d\054\uff6d\055\uff6d\056\uff6d\057\uff6d\060\uff6d" +
    "\061\uff6d\062\uff6d\063\uff6d\001\002\000\010\015\uffaf\016" +
    "\uffaf\054\226\001\002\000\024\006\uff85\007\uff85\014\uff85" +
    "\030\uff85\040\115\063\uff85\064\uff85\065\uff85\066\uff85\001" +
    "\002\000\010\015\uffae\016\uffae\054\uffae\001\002\000\006" +
    "\007\231\064\233\001\002\000\004\025\234\001\002\000" +
    "\074\011\uff9d\014\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d" +
    "\021\uff9d\025\uff9d\026\uff9d\027\uff9d\037\uff9d\040\uff9d\041" +
    "\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d" +
    "\050\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d\060" +
    "\uff9d\061\uff9d\062\uff9d\063\uff9d\001\002\000\074\011\uff98" +
    "\014\uff98\015\uff98\016\uff98\017\uff98\020\uff98\021\uff98\025" +
    "\uff98\026\uff98\027\uff98\037\uff98\040\uff98\041\uff98\042\uff98" +
    "\043\uff98\044\uff98\045\uff98\046\uff98\047\uff98\050\uff98\053" +
    "\uff98\054\uff98\055\uff98\056\uff98\057\uff98\060\uff98\061\uff98" +
    "\062\uff98\063\uff98\001\002\000\006\007\231\064\233\001" +
    "\002\000\074\011\uff99\014\uff99\015\uff99\016\uff99\017\uff99" +
    "\020\uff99\021\uff99\025\uff99\026\uff99\027\uff99\037\uff99\040" +
    "\uff99\041\uff99\042\uff99\043\uff99\044\uff99\045\uff99\046\uff99" +
    "\047\uff99\050\uff99\053\uff99\054\uff99\055\uff99\056\uff99\057" +
    "\uff99\060\uff99\061\uff99\062\uff99\063\uff99\001\002\000\024" +
    "\006\uff85\007\uff85\014\uff85\030\uff85\040\115\063\uff85\064" +
    "\uff85\065\uff85\066\uff85\001\002\000\006\015\uffbf\063\241" +
    "\001\002\000\004\015\245\001\002\000\006\015\uffbd\016" +
    "\uffbd\001\002\000\006\015\uffc0\016\243\001\002\000\004" +
    "\063\244\001\002\000\006\015\uffbe\016\uffbe\001\002\000" +
    "\004\016\246\001\002\000\034\006\uffc4\007\uffc4\012\uffc4" +
    "\013\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036" +
    "\uffc4\051\uffc4\052\uffc4\064\uffc4\001\002\000\034\006\uffc8" +
    "\007\uffc8\012\uffc8\013\uffc8\031\uffc8\032\uffc8\033\uffc8\034" +
    "\uffc8\035\uffc8\036\uffc8\051\uffc8\052\uffc8\064\uffc8\001\002" +
    "\000\012\013\uffff\023\uffff\024\uffff\064\uffff\001\002\000" +
    "\012\013\uffd7\023\uffd7\024\uffd7\064\uffd7\001\002\000\004" +
    "\064\253\001\002\000\074\011\uff9e\014\uff9e\015\uff9e\016" +
    "\uff9e\017\uff9e\020\uff9e\021\uff9e\025\uff9e\026\uff9e\027\uff9e" +
    "\037\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045" +
    "\uff9e\046\uff9e\047\uff9e\050\uff9e\053\uff9e\054\uff9e\055\uff9e" +
    "\056\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e\001" +
    "\002\000\032\006\073\007\101\012\072\013\255\031\102" +
    "\032\077\033\062\034\063\035\075\036\066\051\070\064" +
    "\064\001\002\000\034\006\uffc3\007\uffc3\012\uffc3\013\uffc3" +
    "\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\051" +
    "\uffc3\052\uffc3\064\uffc3\001\002\000\026\003\257\006\uff85" +
    "\007\uff85\014\uff85\030\uff85\040\115\063\uff85\064\uff85\065" +
    "\uff85\066\uff85\001\002\000\004\015\265\001\002\000\004" +
    "\015\261\001\002\000\030\006\073\007\101\012\072\031" +
    "\102\032\077\033\062\034\063\035\075\036\066\051\070" +
    "\064\064\001\002\000\034\006\uffb6\007\uffb6\012\uffb6\013" +
    "\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6" +
    "\051\uffb6\052\263\064\uffb6\001\002\000\030\006\073\007" +
    "\101\012\072\031\102\032\077\033\062\034\063\035\075" +
    "\036\066\051\070\064\064\001\002\000\034\006\uffb4\007" +
    "\uffb4\012\uffb4\013\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4" +
    "\035\uffb4\036\uffb4\051\uffb4\052\uffb4\064\uffb4\001\002\000" +
    "\030\006\073\007\101\012\072\031\102\032\077\033\062" +
    "\034\063\035\075\036\066\051\070\064\064\001\002\000" +
    "\034\006\uffb5\007\uffb5\012\uffb5\013\uffb5\031\uffb5\032\uffb5" +
    "\033\uffb5\034\uffb5\035\uffb5\036\uffb5\051\uffb5\052\267\064" +
    "\uffb5\001\002\000\030\006\073\007\101\012\072\031\102" +
    "\032\077\033\062\034\063\035\075\036\066\051\070\064" +
    "\064\001\002\000\034\006\uffb3\007\uffb3\012\uffb3\013\uffb3" +
    "\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\051" +
    "\uffb3\052\uffb3\064\uffb3\001\002\000\004\016\273\001\002" +
    "\000\034\006\uffbc\007\uffbc\012\uffbc\013\uffbc\031\uffbc\032" +
    "\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\051\uffbc\052\uffbc" +
    "\064\uffbc\001\002\000\034\006\uffbb\007\uffbb\012\uffbb\013" +
    "\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb" +
    "\051\uffbb\052\uffbb\064\uffbb\001\002\000\034\006\uffcb\007" +
    "\uffcb\012\uffcb\013\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb" +
    "\035\uffcb\036\uffcb\051\uffcb\052\uffcb\064\uffcb\001\002\000" +
    "\034\006\uffc7\007\uffc7\012\uffc7\013\uffc7\031\uffc7\032\uffc7" +
    "\033\uffc7\034\uffc7\035\uffc7\036\uffc7\051\uffc7\052\uffc7\064" +
    "\uffc7\001\002\000\010\006\073\007\101\064\064\001\002" +
    "\000\010\015\300\020\200\025\203\001\002\000\004\016" +
    "\301\001\002\000\034\006\uffc5\007\uffc5\012\uffc5\013\uffc5" +
    "\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\051" +
    "\uffc5\052\uffc5\064\uffc5\001\002\000\006\015\uff94\016\uff94" +
    "\001\002\000\026\003\314\006\uff85\007\uff85\014\uff85\030" +
    "\uff85\040\115\063\uff85\064\uff85\065\uff85\066\uff85\001\002" +
    "\000\006\015\uff93\016\uff93\001\002\000\006\015\uffa0\016" +
    "\uffa0\001\002\000\026\003\uff87\006\uff87\007\uff87\014\uff87" +
    "\030\uff87\040\uff87\063\uff87\064\uff87\065\uff87\066\uff87\001" +
    "\002\000\030\003\206\006\uff85\007\uff85\014\uff85\015\uff90" +
    "\030\uff85\040\115\063\uff85\064\uff85\065\uff85\066\uff85\001" +
    "\002\000\026\003\uff89\006\uff89\007\uff89\014\uff89\030\uff89" +
    "\040\uff89\063\uff89\064\uff89\065\uff89\066\uff89\001\002\000" +
    "\026\003\uff88\006\uff88\007\uff88\014\uff88\030\uff88\040\uff88" +
    "\063\uff88\064\uff88\065\uff88\066\uff88\001\002\000\004\015" +
    "\313\001\002\000\006\015\uff95\016\uff95\001\002\000\006" +
    "\015\uff96\016\uff96\001\002\000\006\015\uff97\016\uff97\001" +
    "\002\000\004\002\uffff\001\002\000\004\002\ufffc\001\002" +
    "\000\010\016\330\017\326\064\050\001\002\000\006\016" +
    "\uffea\017\uffea\001\002\000\006\016\324\017\323\001\002" +
    "\000\004\064\050\001\002\000\014\005\uffee\010\uffee\012" +
    "\uffee\013\uffee\064\uffee\001\002\000\006\016\uffec\017\uffec" +
    "\001\002\000\004\064\050\001\002\000\006\016\uffe9\017" +
    "\uffe9\001\002\000\014\005\uffed\010\uffed\012\uffed\013\uffed" +
    "\064\uffed\001\002\000\006\016\uffeb\017\uffeb\001\002\000" +
    "\012\005\ufff5\010\ufff5\012\ufff5\064\ufff5\001\002\000\004" +
    "\064\335\001\002\000\010\003\000\012\000\022\000\001" +
    "\002\000\010\003\uffe3\012\uffe3\022\uffe3\001\002\000\010" +
    "\003\341\012\uffe0\022\340\001\002\000\004\012\343\001" +
    "\002\000\004\064\017\001\002\000\004\012\uffe1\001\002" +
    "\000\004\012\uffe2\001\002\000\010\012\uffde\013\uffde\064" +
    "\uffde\001\002\000\010\012\346\013\uffdc\064\017\001\002" +
    "\000\004\013\351\001\002\000\012\013\uffda\023\uffda\024" +
    "\uffda\064\uffda\001\002\000\012\013\350\023\uffd9\024\uffd9" +
    "\064\uffd9\001\002\000\004\013\uffdd\001\002\000\012\005" +
    "\uffe5\010\uffe5\012\uffe5\064\uffe5\001\002\000\012\005\uffff" +
    "\010\uffff\012\uffff\064\uffff\001\002\000\012\005\uffe4\010" +
    "\uffe4\012\uffe4\064\uffe4\001\002\000\004\064\355\001\002" +
    "\000\004\011\364\001\002\000\006\016\360\017\357\001" +
    "\002\000\004\064\361\001\002\000\012\005\ufff4\010\ufff4" +
    "\012\ufff4\064\ufff4\001\002\000\004\011\362\001\002\000" +
    "\010\063\143\065\150\066\141\001\002\000\006\016\ufff3" +
    "\017\ufff3\001\002\000\010\063\143\065\150\066\141\001" +
    "\002\000\006\016\ufff2\017\ufff2\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\364\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\066\006\001\001\000\002\001\001\000\004\064\007" +
    "\001\001\000\004\003\010\001\001\000\014\005\017\006" +
    "\012\007\015\074\014\103\013\001\001\000\004\074\353" +
    "\001\001\000\002\001\001\000\004\010\331\001\001\000" +
    "\006\012\321\013\320\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\101\021\001\001\000" +
    "\004\023\022\001\001\000\006\004\023\105\025\001\001" +
    "\000\002\001\001\000\004\102\315\001\001\000\004\014" +
    "\027\001\001\000\002\001\001\000\006\015\030\074\031" +
    "\001\001\000\004\070\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\064\035\001\001" +
    "\000\002\001\001\000\006\016\040\107\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\043\074\042" +
    "\001\001\000\004\013\052\001\001\000\002\001\001\000" +
    "\004\074\045\001\001\000\004\013\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\054\001\001\000\006" +
    "\007\055\074\014\001\001\000\002\001\001\000\004\063" +
    "\057\001\001\000\016\017\077\025\070\030\064\047\066" +
    "\060\075\072\060\001\001\000\012\031\304\041\302\042" +
    "\310\045\305\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\034\111\077" +
    "\270\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\063\253\001\001\000\002\001\001\000" +
    "\004\106\247\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\026\104\030\105\072\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\027\112\034\111\051\115\052\107\054\116\077\113" +
    "\001\001\000\004\053\224\001\001\000\002\001\001\000" +
    "\012\067\143\072\141\075\145\076\144\001\001\000\002" +
    "\001\001\000\006\056\123\057\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\055\117\001\001\000\002" +
    "\001\001\000\010\034\111\054\121\077\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\034\111\077\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\026\134\030\105\072\060\001" +
    "\001\000\002\001\001\000\016\017\136\025\070\030\064" +
    "\047\066\060\075\072\060\001\001\000\002\001\001\000" +
    "\004\074\217\001\001\000\002\001\001\000\004\050\201" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\165\001\001\000\004\037\152\001\001\000\006\034\111" +
    "\077\150\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\044\162\045\160\046\161\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\067\143\072\141\075\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\036\175\040\174" +
    "\042\170\043\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\067\143\072\141\075\145\076" +
    "\176\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\034\111\077\214\001\001\000\012\032\207\033\204\034" +
    "\111\077\206\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\034\111\077\212\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\100\221\001\001\000\006\034\111\077\222\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\034\111\052\226\054\116\077" +
    "\113\001\001\000\002\001\001\000\004\073\231\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\073\234\001\001\000\002\001\001\000\006\034\111" +
    "\077\236\001\001\000\006\061\237\062\241\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\065\250\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\017" +
    "\077\025\070\030\064\047\066\060\075\072\060\001\001" +
    "\000\002\001\001\000\014\034\111\051\257\052\107\054" +
    "\116\077\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\017\261\025\070\030\064\047\066\060\075\072" +
    "\060\001\001\000\002\001\001\000\016\017\263\025\070" +
    "\030\064\047\066\060\075\072\060\001\001\000\002\001" +
    "\001\000\016\017\265\025\070\030\064\047\066\060\075" +
    "\072\060\001\001\000\002\001\001\000\016\017\267\025" +
    "\070\030\064\047\066\060\075\072\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\072\276" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\034\111\077\314\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\032\311\033\204\034\111\077\206\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\065\316" +
    "\001\001\000\002\001\001\000\004\013\326\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\324\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\330\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\071\333\001\001\000\004\064" +
    "\335\001\001\000\002\001\001\000\004\021\336\001\001" +
    "\000\002\001\001\000\004\074\341\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\343\001\001\000\010" +
    "\007\055\022\344\074\014\001\001\000\002\001\001\000" +
    "\004\023\346\001\001\000\006\004\023\105\025\001\001" +
    "\000\002\001\001\000\004\104\351\001\001\000\004\065" +
    "\352\001\001\000\002\001\001\000\004\011\355\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\067\362\001\001" +
    "\000\002\001\001\000\004\067\364\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	Tab.init();
	Tab.currentScope.addToLocals(new Obj(Obj.Type, "bool", CUP$MJParser$actions.boolType));

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;

    }



	public enum ERROR_CODE {
		VARIABLE,
		ASSIGN,
		FORMAL_PARAMETERS,
		IF,
		FOR,
		INDEXING,
		EXTENDS,
		PARAMETERS
	}
	
	public enum LOG_TYPE {
		DEBUG,
		INFO,
		ERROR
	}

	public enum SYMBOL_TYPE {
		CONSTANT,
		VARIABLE,
		METHOD,
		PROGRAM,
		CLASS,
		ARRAY
	}
	
	private static final String MAIN = "main";
	
	private static final String error_recovery_string = "Error recovery successful: ";

	// Counting variables
	int constantsCount = 0;
	int globalVarsCount = 0;
	int globalArrayVarsCount = 0;
	int classGlobalVarsCount = 0;
	int mainFunctionVarsCount = 0;
	int globalFuncCount = 0;
	int globalStaticFuncCount = 0;
	int classFuncCount = 0;
	int classStaticFuncCount = 0;
	int statementsBlockCount = 0;
	int mainMethodFunctionCallsCount = 0;
	int functionFormParsCount = 0;
	int classDefinitionCount = 0;
	
	boolean isGlobalContext = true;
	boolean isClassContext = false;
	boolean isMethodContext = false;
	boolean isStaticContext = false;
	boolean isFormalParametersContext = false;
	String currentMethodName = "";
	Obj currentClass = Tab.noObj;
	
	Logger log = Logger.getLogger(getClass());
     
	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatal error, parsing is terminated", cur_token);
    }

	public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report(message, info, LOG_TYPE.ERROR);
    }
  
    public void syntax_error(Symbol cur_token) {
        report("Syntax error", cur_token, LOG_TYPE.ERROR);
    }
  	
  	public void semantic_error(String message, int line) {
        report("Semantic error on line " + line + ": " + message, null, LOG_TYPE.ERROR);
    }
  
  	public void semantic_info(String message, int line) {
		report("Semantic info on line " + line + ": " + message, null, LOG_TYPE.DEBUG);
	}
	
	public void log_symbol_detected(Obj object, String message, int line) {
		DumpSymbolTableVisitor visitor = new DumpSymbolTableVisitor();
		visitor.visitObjNode(object);
        
 		semantic_info(message + " [ " + visitor.getOutput() + "]", line);
	}
	
    public void report(String message, Object info, LOG_TYPE logType) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol) {
			msg.append (" on line ").append(((Symbol)info).left).append(", column ").append(((Symbol)info).right);
        }

		switch(logType) {
			case DEBUG:
		    	log.debug(msg.toString());
		    	break;
		    	
			case INFO:
		    	log.info(msg.toString());
		    	break;
		    	
			case ERROR:
		    	log.error(msg.toString());
		    	break;
		 }
    }
    
    // Increments proper var count. Called for every var.
    public void incrementVarsCount(boolean isArray) {
    	if(isFormalParametersContext) { return; }
    
    	// Counting variables
		if(isClassContext) {
			// Counting only class global variables, not the class method variables.
			if(!isMethodContext) {
				classGlobalVarsCount++;
			}
		} else if(isGlobalContext) {
			if(isArray) {
				globalArrayVarsCount++;
			} else {
				globalVarsCount++;
			}
		} else {
			if(isMainMethod()) {
				mainFunctionVarsCount++;
			}
		}
    }
    
    // Increments proper methods count. Called for every method.
    public void incrementMethodsCount() {
    	if(isStaticContext) {
    		if(isClassContext) {
    			classStaticFuncCount++;
    		} else {
    			globalStaticFuncCount++;
    		}
    	} else {
    		if(isClassContext) {
    			classFuncCount++;
    		} else {
    			globalFuncCount++;
    		}
    	}
    }
    
    public boolean isMainMethod() {
    	return isMethodContext && MAIN.equals(currentMethodName);
    }
    
    public void trackSyntaxErrorRecovery(ERROR_CODE error, String additionalInfo) {
    	String message = error_recovery_string;
    	switch (error) {
    		case VARIABLE:
    			String context = isGlobalContext ? isClassContext ? "Class" : "Global" : "Local";
    			message += context + " variable declaration error "; 
    			break;
    			
    		case ASSIGN:
    			message += "Assign operator error ";
    			break;
    			
    		case FORMAL_PARAMETERS:
    			message += "Formal parameters declaration error ";
    			break;	
    		
    		case IF:
    			message += "If statement condition error ";
    			break;
    		
    		case FOR:
    			message += "For loop condition error ";
    			break;	
    		
    		case INDEXING:
    			message += "Indexing array error ";
    			break;
    			
    		case EXTENDS:
    			message += "Extends clause error ";
    			break;
    			
    		case PARAMETERS:
    			message += "Parameters list error ";
    			break;
    		    			
    		default:
    			message += "Unknown syntax error ";
    			break;
    	}
    	
    	log.debug(message + additionalInfo);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {


	private static final String SUPER_DOT_STRING = "super.";
	
	public static final Struct boolType = new Struct(Struct.Bool);
		
	Struct currentType = Tab.noType;
	boolean isVoidMethod = false;
	
	// Semantic methods
	
	// Find object with identifier name.
	private Obj findObjectWithName(String identifier, int line) {
		String ident = identifier;
		Obj result = Tab.find(ident);
		for(int retry = 10; retry > 0 && result == Tab.noObj; retry--) {
			ident = SUPER_DOT_STRING + ident;
			result = Tab.find(ident);
		}
		
		if(result == Tab.noObj) {
			parser.semantic_error("tried to used non-existing identifier \"" + identifier, line);
		}
		
		return result;
	}
	
	private Obj getClassMember(String identifier, int line) {
		Obj result = Tab.noObj;
		for(Obj fld : parser.currentClass.getType().getMembers()) {
  			if(fld.getName().equals(identifier)) {
  				result = fld;
  				break;
  			}
		}
		
		if(result == Tab.noObj) {
			parser.semantic_error("tried to used non-existing class member \"" + identifier + "\"", line);
		}
		
		return result;
	}
	
	private boolean isThisAvailable(String identifier, int line) {
		if(!parser.isClassContext) {
			parser.semantic_error("tried to use \"this\" outside of class. (" + identifier + ")", line);
		} else if(parser.isStaticContext) {
			parser.semantic_error("tried to use \"this\" in static function. (" + identifier + ")", line);
		}
		
		return parser.isClassContext && !parser.isStaticContext;
	}
	
    private boolean doesSymbolAlreadyExist(String name, int line) {
    	boolean doesSymbolExist = Tab.currentScope.findSymbol(name) != null;
    	if(doesSymbolExist) {
			parser.semantic_error("identifier with name \"" + name + "\" already exists.", line);
		}
		return doesSymbolExist;
    }
    
    private boolean doesTypeMatchWithCurrent(Struct type, int line) {
    	boolean doesTypeMatch = type == currentType;
    	if(!doesTypeMatch) {
    		parser.semantic_error("type mismatch.", line);
		}
		return doesTypeMatch;
    }
    
    private void isClassExtensionValid(Struct parentClassType, int line) {
		// Check if class tries to extend itself.
		if(parentClassType == parser.currentClass.getType() && parentClassType != Tab.noType) {
			parser.semantic_error("class tried to extend itself.", line);
		} 
		// Check if class tried to extend primitive or non-existing type.
		else if(parentClassType.getKind() != Struct.Class) {
			parser.semantic_error("class tried to extend primitive or non-existing type.", line);
		}
    }
    
	private Obj addConstantToSymbolTable(String name, Struct currentObjectType, Obj currentObject, int line) {
		if(currentObjectType == null || currentObjectType == Tab.noType) {
			// Failsafe.
			parser.semantic_error("Constant \"" + name + "\" doesn't have a type defined.", line);
			return Tab.noObj;
		} 

		// Check if something with that name exists and if types match.
		if(doesSymbolAlreadyExist(name, line) || !doesTypeMatchWithCurrent(currentObjectType, line)){
			return Tab.noObj;
		}
		
		// Do the insertion.
		Obj createdObject = insertToTable(SYMBOL_TYPE.CONSTANT, name, currentObjectType, line);
		// Copy value.
		createdObject.setAdr(currentObject.getAdr());
		
		return createdObject;
	}
		
	private Obj addVariableToSymbolTable(String name, int line, boolean isArray) {
		if(parser.isFormalParametersContext) { return Tab.noObj; }
		
		if(doesSymbolAlreadyExist(name, line)){
			return Tab.noObj;
		}
		
		// Symbol doesn't exist, do the insertion.
		SYMBOL_TYPE type = isArray ? SYMBOL_TYPE.ARRAY : SYMBOL_TYPE.VARIABLE;
		return insertToTable(type, name, currentType, line);
	}
	
	private Obj addMethodToSymbolTable(String name, int line) {
		// If it's a main method check if it is void. 
		if(parser.isMainMethod() && !isVoidMethod) {
			parser.semantic_error("main method must have void as a return type.", line);
			return Tab.noObj;
		} 
		// Only class methods can be static.
		else if(parser.isStaticContext && !parser.isClassContext)
		{
			parser.semantic_error("global methods can't be static.", line);
			return Tab.noObj;
		} 
		// Check if some symbol with same name already exist.
		if(doesSymbolAlreadyExist(name, line)){
			return Tab.noObj;
		}
				
		Struct methodType = isVoidMethod ? Tab.noType : currentType;
		return insertToTable(SYMBOL_TYPE.METHOD, name, methodType, line);	
	}
	
	private Obj addProgramToSymbolTable(String name, int line) {
		return insertToTable(SYMBOL_TYPE.PROGRAM, name, Tab.noType, line);
	}
	
	private Obj addClassTypeToSymbolTable(String name, int line) {
		return insertToTable(SYMBOL_TYPE.CLASS, name, new Struct(Struct.Class), line);
	}
	
	private Obj insertToTable(SYMBOL_TYPE symbolType, String name, Struct currentObjectType, int line) {
		int objectType;
		String message;
		String context;
		
		switch (symbolType) {
			case CONSTANT:
				objectType = Obj.Con;
				message = "added constant \"" + name + "\" to symbol table.";
				break;
				
			case VARIABLE:
				objectType = parser.isClassContext ? Obj.Fld : Obj.Var;
				context = parser.isGlobalContext ? parser.isClassContext ? "class" : "global" : "local";
				message = "added " + context + " variable \"" + name + "\" to symbol table.";
				break;
				
			case ARRAY:
				objectType = parser.isClassContext ? Obj.Fld : Obj.Var;
				context = parser.isGlobalContext ? parser.isClassContext ? "class" : "global" : "local";
				message = "added " + context + " array variable \"" + name + "\" to symbol table.";
				currentObjectType = new Struct(Struct.Array, currentType);
				break;
				
			case METHOD:
				objectType = Obj.Meth;
				message = "added method \"" + name + "\" to symbol table.";
				break;
				
			case PROGRAM:
				objectType = Obj.Prog;
				message = "added program \"" + name + "\" to symbol table.";
				break;
				
			case CLASS:
				objectType = Obj.Type;
				message = "added class type \"" + name + "\" to symbol table.";
				break;
				
			default:
				objectType = Obj.NO_VALUE;
				message = "UNKNOWN SYMBOL TYPE";
				parser.semantic_error(message, line);
				break;
		}
		
		// Insert object to table.
		Obj createdObject = Tab.insert(objectType, name, currentObjectType);
				
		// Create object node string.
		parser.log_symbol_detected(createdObject, message, line);
		
		return createdObject;
	}

  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // NewArrayType ::= 
            {
              Struct RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NewArrayType",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // NewArrayType ::= L_INDEXER Expr R_INDEXER 
            {
              Struct RESULT =null;
		 RESULT = new Struct(Struct.Array, currentType); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NewArrayType",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ActParsListOptional ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsListOptional",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ActParsListOptional ::= L_PAREN ActParsList R_PAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsListOptional",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Factor ::= L_PAREN Expr R_PAREN 
            {
              Struct RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT = e; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Factor ::= NEW Type NewArrayType 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int arrayTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int arrayTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct arrayType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = arrayType == null ? t : arrayType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Factor ::= OneConst 
            {
              Struct RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj c = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = c.getType(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Factor ::= Designator ActParsListOptional 
            {
              Struct RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // MultiplyFactorList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MultiplyFactorList",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // MultiplyFactorList ::= MultiplyFactorList MulOp Factor 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MultiplyFactorList",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Term ::= Factor MultiplyFactorList 
            {
              Struct RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // MulOpRight ::= MODULATE_EQUALS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOpRight",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // MulOpRight ::= DIVIDE_EQUALS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOpRight",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // MulOpRight ::= MULTIPLY_EQUALS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOpRight",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // MulOpLeft ::= MODULATE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOpLeft",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // MulOpLeft ::= DIVIDE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOpLeft",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // MulOpLeft ::= MULTIPLY 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOpLeft",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // MulOp ::= MulOpRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOp",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // MulOp ::= MulOpLeft 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOp",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // AddOpRight ::= MINUS_EQUALS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddOpRight",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // AddOpRight ::= PLUS_EQUALS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddOpRight",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // AddOpLeft ::= MINUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddOpLeft",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // AddOpLeft ::= PLUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddOpLeft",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // AddOp ::= AddOpRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddOp",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // AddOp ::= AddOpLeft 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddOp",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Negation ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Negation",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Negation ::= MINUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Negation",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // AssignOp ::= MulOpRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignOp",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // AssignOp ::= AddOpRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignOp",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // AssignOp ::= EQUALS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignOp",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // AddOneTerm ::= AddOp Term 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddOneTerm",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // AddTermList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddTermList",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // AddTermList ::= AddTermList AddOneTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddTermList",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Expr ::= Negation Term AddTermList 
            {
              Struct RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ActPars ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ActPars ::= ActPars COMMA Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ActParsList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsList",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ActParsList ::= error 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.PARAMETERS, "(1)"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsList",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ActParsList ::= ActPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsList",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DesignatorStatementOptions ::= DECREMENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOptions",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DesignatorStatementOptions ::= INCREMENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOptions",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // DesignatorStatementOptions ::= L_PAREN ActParsList R_PAREN 
            {
              Object RESULT =null;
		 
									if(parser.isMainMethod()) {
										parser.mainMethodFunctionCallsCount++;
									}
								
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOptions",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // DesignatorStatementOptions ::= AssignOp error 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.ASSIGN, "(1)"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOptions",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DesignatorStatementOptions ::= AssignOp Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOptions",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SuperDesignator ::= IDENT 
            {
              Obj RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SuperDesignator",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SuperDesignator ::= SUPER DOT SuperDesignator 
            {
              Obj RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SuperDesignator",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Designator ::= Designator L_INDEXER error R_INDEXER 
            {
              Obj RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.INDEXING, "(1)"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Designator ::= Designator L_INDEXER Expr R_INDEXER 
            {
              Obj RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Designator ::= Designator DOT IDENT 
            {
              Obj RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Designator ::= SUPER DOT SuperDesignator 
            {
              Obj RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Designator ::= THIS DOT IDENT 
            {
              Obj RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					if(isThisAvailable(identifier, identifierleft)) {
						RESULT = getClassMember(identifier, identifierleft);
					}
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Designator ::= IDENT 
            {
              Obj RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = findObjectWithName(identifier, identifierleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DesignatorStatement ::= Designator DesignatorStatementOptions 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // RelOp ::= LESS_EQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelOp",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // RelOp ::= LESS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelOp",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // RelOp ::= GREATER_EQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelOp",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // RelOp ::= GREATER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelOp",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // RelOp ::= NOT_EQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelOp",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // RelOp ::= EQUALITY 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelOp",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // RelOpExprList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelOpExprList",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // RelOpExprList ::= RelOp Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelOpExprList",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CondFact ::= Expr RelOpExprList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CondFactList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFactList",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CondFactList ::= CondFactList AND CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFactList",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CondTerm ::= CondFact CondFactList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CondTermList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTermList",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CondTermList ::= CondTermList OR CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTermList",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Condition ::= CondTerm CondTermList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OptionalCondition ::= error 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.FOR, "(2)"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptionalCondition",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OptionalCondition ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptionalCondition",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OptionalCondition ::= Condition 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptionalCondition",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // IfStatement ::= IF L_PAREN error R_PAREN Statement ELSE Statement 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.IF, "(2)"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IfStatement",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // IfStatement ::= IF L_PAREN Condition R_PAREN Statement ELSE Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IfStatement",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // IfStatement ::= IF L_PAREN error R_PAREN Statement 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.IF, "(1)"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IfStatement",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // IfStatement ::= IF L_PAREN Condition R_PAREN Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IfStatement",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OptionalDesignatorStatement ::= error 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.FOR, "(1)"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptionalDesignatorStatement",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OptionalDesignatorStatement ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptionalDesignatorStatement",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OptionalDesignatorStatement ::= DesignatorStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptionalDesignatorStatement",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ForStatement ::= FOR L_PAREN OptionalDesignatorStatement SEMI OptionalCondition SEMI OptionalDesignatorStatement R_PAREN Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForStatement",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Return ::= RETURN Expr SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Return",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Return ::= RETURN SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Return",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OneNumber ::= NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OneNumber",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OneNumber ::= OneNumber SEMI NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OneNumber",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NumbersList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NumbersList",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NumbersList ::= OneNumber 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NumbersList",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // StatementsList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementsList",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // StatementsList ::= StatementsList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementsList",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Statement ::= L_BRACE StatementsList R_BRACE 
            {
              Object RESULT =null;
		 parser.statementsBlockCount++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Statement ::= PRINT L_PAREN Expr NumbersList R_PAREN SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Statement ::= READ L_PAREN Designator R_PAREN SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Statement ::= Return 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Statement ::= CONTINUE SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Statement ::= BREAK SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Statement ::= ForStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Statement ::= IfStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Statement ::= DesignatorStatement SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FormParsList ::= Type OneVar 
            {
              Object RESULT =null;
		 parser.functionFormParsCount++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsList",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FormParsList ::= FormParsList COMMA Type OneVar 
            {
              Object RESULT =null;
		 parser.functionFormParsCount++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsList",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FormPars ::= error 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.FORMAL_PARAMETERS, "(1)"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FormPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FormPars ::= NT$6 FormParsList 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.isFormalParametersContext = false; // Starting form pars context 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$6 ::= 
            {
              Object RESULT =null;
 parser.isFormalParametersContext = true; // Starting form pars context 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$6",69, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // VoidType ::= VOID 
            {
              Object RESULT =null;
		 isVoidMethod = true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VoidType",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // VoidType ::= Type 
            {
              Object RESULT =null;
		 isVoidMethod = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VoidType",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // StaticDeclarator ::= 
            {
              Object RESULT =null;
		 parser.isStaticContext = false; // Closing static context 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StaticDeclarator",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // StaticDeclarator ::= STATIC 
            {
              Object RESULT =null;
		 parser.isStaticContext = true; // Starting static context 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StaticDeclarator",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MethodName ::= IDENT 
            {
              Obj RESULT =null;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					parser.currentMethodName = methodName; // Save method name so we can detect main function later
					RESULT = addMethodToSymbolTable(methodName, methodNameleft);
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodName",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // MethodsDecl ::= NT$4 StaticDeclarator VoidType MethodName OpenScope L_PAREN FormPars R_PAREN VarsList L_BRACE StatementsList R_BRACE NT$5 CloseScope 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).right;
		Obj m = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodsDecl",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-13)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		Obj m = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
 
					parser.incrementMethodsCount();
					parser.isMethodContext = false; // Closing method context
					Tab.chainLocalSymbols(m); 
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$5",68, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$4 ::= 
            {
              Object RESULT =null;
 parser.isMethodContext = true; // Starting method context 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$4",67, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MethodsList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodsList",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MethodsList ::= MethodsList MethodsDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodsList",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // MethodsSection ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodsSection",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // MethodsSection ::= L_BRACE MethodsList R_BRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodsSection",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VarsList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarsList",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VarsList ::= VarsList VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarsList",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ClassExtender ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassExtender",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ClassExtender ::= error 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.EXTENDS, "(1)"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassExtender",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ClassExtender ::= EXTENDS Type 
            {
              Object RESULT =null;
		int parentClassTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int parentClassTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct parentClassType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 isClassExtensionValid(parentClassType, parentClassTypeleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassExtender",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ClassName ::= IDENT 
            {
              Obj RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
					parser.currentClass = addClassTypeToSymbolTable(className, classNameleft);
					RESULT = parser.currentClass;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassName",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ClassDecl ::= CLASS ClassName OpenScope ClassExtender L_BRACE VarsList MethodsSection R_BRACE NT$3 CloseScope 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		Obj c = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$3 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		Obj c = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
 
					parser.currentClass = Tab.noObj;
					Tab.chainLocalSymbols(c);
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3",66, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Type ::= IDENT 
            {
              Struct RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
				Obj typeNode = Tab.find(typeName);
				if (typeNode == Tab.noObj) {
					parser.semantic_error("type \"" + typeName + "\" not found in symbol table.", typeNameleft);
					RESULT = Tab.noType;
					currentType = Tab.noType;
				}
				else {
					if (Obj.Type == typeNode.getKind()) {
						RESULT = typeNode.getType();
						currentType = typeNode.getType();
					}
					else {
						parser.semantic_error("\"" + typeName + "\" is not a type.", typeNameleft);
						RESULT = Tab.noType;
						currentType = Tab.noType;
					}
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OneVar ::= IDENT L_INDEXER R_INDEXER 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 
 				parser.incrementVarsCount(true);
 				addVariableToSymbolTable(varName, varNameleft, true); 
 			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OneVar",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OneVar ::= IDENT 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
				parser.incrementVarsCount(false); 
				addVariableToSymbolTable(varName, varNameleft, false);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OneVar",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VarsElementsList ::= error OneVar 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.VARIABLE, "(2)"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarsElementsList",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VarsElementsList ::= OneVar 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarsElementsList",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VarsElementsList ::= error COMMA OneVar 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.VARIABLE, "(1)"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarsElementsList",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VarsElementsList ::= VarsElementsList COMMA OneVar 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarsElementsList",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarDecl ::= Type error SEMI 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.VARIABLE, "(3)"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VarDecl ::= Type VarsElementsList SEMI 
            {
              Object RESULT =null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct varType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OneConst ::= BOOL 
            {
              Obj RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean value = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					RESULT = new Obj(Obj.Con, "", boolType);  
		 	    	RESULT.setAdr(value ? 1:0);
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OneConst",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // OneConst ::= CHAR 
            {
              Obj RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character value = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					RESULT = new Obj(Obj.Con, "", Tab.charType);  
		 	    	RESULT.setAdr(value);
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OneConst",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // OneConst ::= NUMBER 
            {
              Obj RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					RESULT = new Obj(Obj.Con, "", Tab.intType);  
 	    			RESULT.setAdr((int)value);
 	    		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OneConst",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ConstList ::= IDENT EQUALS OneConst 
            {
              Object RESULT =null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int currentConstObjectleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int currentConstObjectright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj currentConstObject = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
					parser.constantsCount++; // Counting constants
					addConstantToSymbolTable(constName, currentConstObject.getType(), currentConstObject, currentConstObjectleft);
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstList ::= ConstList COMMA IDENT EQUALS OneConst 
            {
              Object RESULT =null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int currentConstObjectleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int currentConstObjectright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj currentConstObject = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
					parser.constantsCount++; // Counting constants
					addConstantToSymbolTable(constName, currentConstObject.getType(), currentConstObject, currentConstObjectleft); 
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstDecl ::= CONST Type ConstList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ProgramElement ::= NT$2 ClassDecl 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 
					parser.isClassContext = false; // Closing class context
					parser.classDefinitionCount++; 
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramElement",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$2 ::= 
            {
              Object RESULT =null;
 parser.isClassContext = true; // Starting class context 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",65, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ProgramElement ::= VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramElement",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ProgramElement ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramElement",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ProgramElementsList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramElementsList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ProgramElementsList ::= ProgramElementsList ProgramElement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramElementsList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ProgName ::= IDENT 
            {
              Obj RESULT =null;
		int programNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int programNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String programName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = addProgramToSymbolTable(programName, programNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgName",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Program ::= PROG ProgName OpenScope ProgramElementsList L_BRACE NT$0 MethodsList R_BRACE NT$1 CloseScope 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
 Tab.chainLocalSymbols(p); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
 parser.isGlobalContext = false; // Closing global context 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CloseScope ::= 
            {
              Object RESULT =null;
		 Tab.closeScope(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CloseScope",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // OpenScope ::= 
            {
              Object RESULT =null;
		 Tab.openScope(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OpenScope",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

