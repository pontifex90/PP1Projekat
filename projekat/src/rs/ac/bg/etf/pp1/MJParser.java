
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Feb 11 00:53:01 CET 2017
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import java.util.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.MJParser.ERROR_CODE;
import rs.ac.bg.etf.pp1.MJParser.SYMBOL_TYPE;
import rs.etf.pp1.mj.runtime.Code;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;
import rs.etf.pp1.symboltable.visitors.DumpSymbolTableVisitor;
import org.apache.log4j.xml.DOMConfigurator;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import rs.ac.bg.etf.pp1.util.Log4JUtils;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Feb 11 00:53:01 CET 2017
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\240\000\002\002\004\000\002\034\002\000\002\035" +
    "\002\000\002\071\002\000\002\072\002\000\002\002\014" +
    "\000\002\037\003\000\002\003\004\000\002\003\002\000" +
    "\002\005\003\000\002\005\003\000\002\073\002\000\002" +
    "\005\004\000\002\006\006\000\002\011\007\000\002\011" +
    "\005\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\007\005\000\002\007\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\003\000\002\012\004\000\002" +
    "\013\003\000\002\013\005\000\002\044\003\000\002\074" +
    "\002\000\002\075\002\000\002\010\014\000\002\052\003" +
    "\000\002\051\004\000\002\051\003\000\002\051\002\000" +
    "\002\021\004\000\002\021\002\000\002\017\005\000\002" +
    "\017\002\000\002\020\004\000\002\020\002\000\002\076" +
    "\002\000\002\077\002\000\002\100\002\000\002\101\002" +
    "\000\002\004\022\000\002\042\003\000\002\014\003\000" +
    "\002\014\002\000\002\015\003\000\002\015\003\000\002" +
    "\102\002\000\002\054\004\000\002\054\002\000\002\054" +
    "\003\000\002\055\006\000\002\055\004\000\002\016\004" +
    "\000\002\103\002\000\002\016\004\000\002\104\002\000" +
    "\002\016\004\000\002\016\004\000\002\016\004\000\002" +
    "\016\003\000\002\016\007\000\002\016\010\000\002\016" +
    "\005\000\002\033\004\000\002\033\002\000\002\031\004" +
    "\000\002\031\002\000\002\032\005\000\002\032\003\000" +
    "\002\053\004\000\002\053\005\000\002\105\002\000\002" +
    "\106\002\000\002\107\002\000\002\110\002\000\002\022" +
    "\017\000\002\023\003\000\002\023\002\000\002\023\003" +
    "\000\002\027\007\000\002\027\007\000\002\111\002\000" +
    "\002\027\012\000\002\027\011\000\002\024\003\000\002" +
    "\024\002\000\002\024\003\000\002\030\003\000\002\067" +
    "\003\000\002\112\002\000\002\113\002\000\002\067\007" +
    "\000\002\025\003\000\002\025\005\000\002\026\003\000" +
    "\002\026\005\000\002\070\003\000\002\070\003\000\002" +
    "\070\003\000\002\070\003\000\002\070\003\000\002\070" +
    "\003\000\002\114\002\000\002\036\006\000\002\036\005" +
    "\000\002\036\006\000\002\036\004\000\002\036\004\000" +
    "\002\043\003\000\002\043\005\000\002\043\005\000\002" +
    "\115\002\000\002\043\007\000\002\043\006\000\002\057" +
    "\003\000\002\057\003\000\002\057\002\000\002\060\005" +
    "\000\002\060\003\000\002\040\004\000\002\050\003\000" +
    "\002\116\002\000\002\050\006\000\002\117\002\000\002" +
    "\120\002\000\002\050\007\000\002\121\002\000\002\047" +
    "\006\000\002\122\002\000\002\123\002\000\002\047\007" +
    "\000\002\047\003\000\002\045\004\000\002\045\003\000" +
    "\002\045\005\000\002\045\005\000\002\061\005\000\002" +
    "\061\002\000\002\046\005\000\002\046\002\000\002\062" +
    "\003\000\002\062\003\000\002\062\003\000\002\056\003" +
    "\000\002\056\002\000\002\064\003\000\002\064\003\000" +
    "\002\063\003\000\002\063\003\000\002\066\003\000\002" +
    "\066\003\000\002\066\003\000\002\065\003\000\002\065" +
    "\003\000\002\065\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\374\000\004\004\005\001\002\000\004\002\376\001" +
    "\002\000\004\063\006\001\002\000\012\005\ufffb\007\ufffb" +
    "\011\ufffb\063\ufffb\001\002\000\012\005\000\007\000\011" +
    "\000\063\000\001\002\000\012\005\ufff9\007\ufff9\011\ufff9" +
    "\063\ufff9\001\002\000\012\005\ufff6\007\012\011\021\063" +
    "\017\001\002\000\004\063\017\001\002\000\012\005\ufff8" +
    "\007\ufff8\011\ufff8\063\ufff8\001\002\000\004\005\343\001" +
    "\002\000\006\003\330\063\322\001\002\000\012\005\ufff7" +
    "\007\ufff7\011\ufff7\063\ufff7\001\002\000\066\003\uffe6\011" +
    "\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\036\uffe6" +
    "\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045" +
    "\uffe6\046\uffe6\047\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6" +
    "\056\uffe6\057\uffe6\060\uffe6\061\uffe6\063\uffe6\001\002\000" +
    "\012\005\ufffa\007\ufffa\011\ufffa\063\ufffa\001\002\000\012" +
    "\012\ufffe\022\ufffe\023\ufffe\063\ufffe\001\002\000\012\012" +
    "\uffd9\022\uffd9\023\uffd9\063\uffd9\001\002\000\012\012\024" +
    "\022\uffd8\023\uffd8\063\uffd8\001\002\000\004\002\ufffd\001" +
    "\002\000\012\012\uffda\022\uffda\023\uffda\063\uffda\001\002" +
    "\000\010\022\027\023\uffd1\063\uffd1\001\002\000\006\023" +
    "\uffd2\063\uffd2\001\002\000\006\023\033\063\017\001\002" +
    "\000\004\063\034\001\002\000\004\063\uffd0\001\002\000" +
    "\004\063\uffcf\001\002\000\004\013\uffd3\001\002\000\004" +
    "\013\000\001\002\000\004\013\037\001\002\000\010\003" +
    "\040\014\uffcc\063\uffce\001\002\000\004\014\uffcb\001\002" +
    "\000\004\063\017\001\002\000\004\014\043\001\002\000" +
    "\006\011\uffd7\063\uffd7\001\002\000\006\011\uffdd\063\uffdd" +
    "\001\002\000\006\011\047\063\017\001\002\000\010\011" +
    "\uffde\012\uffde\063\uffde\001\002\000\030\006\uffd6\011\uffd6" +
    "\012\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035" +
    "\uffd6\050\uffd6\063\uffd6\001\002\000\030\006\uffbc\011\uffbc" +
    "\012\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035" +
    "\uffbc\050\uffbc\063\uffbc\001\002\000\030\006\062\011\067" +
    "\012\056\030\uffc5\031\061\032\052\033\063\034\070\035" +
    "\064\050\uffc7\063\053\001\002\000\004\013\311\001\002" +
    "\000\072\010\uff90\013\uff90\014\uff90\015\uff90\016\uff90\017" +
    "\uff90\020\uff90\024\uff90\025\uff90\026\uff90\036\uff90\037\uff90" +
    "\040\uff90\041\uff90\042\uff90\043\uff90\044\uff90\045\uff90\046" +
    "\uff90\047\uff90\052\uff90\053\uff90\054\uff90\055\uff90\056\uff90" +
    "\057\uff90\060\uff90\061\uff90\001\002\000\032\006\uffc1\011" +
    "\uffc1\012\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1" +
    "\035\uffc1\050\uffc1\051\uffc1\063\uffc1\001\002\000\030\010" +
    "\302\013\301\017\176\024\201\025\275\026\277\040\173" +
    "\041\171\045\154\046\155\047\156\001\002\000\012\012" +
    "\uffd5\022\uffd5\023\uffd5\063\uffd5\001\002\000\004\015\272" +
    "\001\002\000\030\006\uffbd\011\uffbd\012\uffbd\030\uffbd\031" +
    "\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\050\uffbd\063\uffbd" +
    "\001\002\000\004\013\260\001\002\000\004\024\256\001" +
    "\002\000\004\015\255\001\002\000\024\006\uff6c\013\uff6c" +
    "\015\253\027\uff6c\037\103\062\uff6c\063\uff6c\064\uff6c\065" +
    "\uff6c\001\002\000\004\030\230\001\002\000\004\050\075" +
    "\001\002\000\030\006\uffbc\011\uffbc\012\uffbc\030\uffbc\031" +
    "\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\050\uffbc\063\uffbc" +
    "\001\002\000\004\015\071\001\002\000\032\006\uffc3\011" +
    "\uffc3\012\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3" +
    "\035\uffc3\050\uffc3\051\uffc3\063\uffc3\001\002\000\030\006" +
    "\062\011\067\012\073\030\uffc5\031\061\032\052\033\063" +
    "\034\070\035\064\050\uffc7\063\053\001\002\000\032\006" +
    "\uffbe\011\uffbe\012\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe" +
    "\034\uffbe\035\uffbe\050\uffbe\051\uffbe\063\uffbe\001\002\000" +
    "\032\006\uffc6\011\uffc6\012\uffc6\030\uffc6\031\uffc6\032\uffc6" +
    "\033\uffc6\034\uffc6\035\uffc6\050\uffc6\051\uffc6\063\uffc6\001" +
    "\002\000\004\013\076\001\002\000\024\003\101\006\uff6c" +
    "\013\uff6c\027\uff6c\037\103\062\uff6c\063\uff6c\064\uff6c\065" +
    "\uff6c\001\002\000\010\014\uffa4\015\uffa4\053\uffa3\001\002" +
    "\000\020\006\062\013\142\027\134\062\136\063\053\064" +
    "\143\065\133\001\002\000\004\014\126\001\002\000\026" +
    "\014\uff9e\015\uff9e\052\uff9e\053\uff9e\054\120\055\116\056" +
    "\121\057\122\060\123\061\124\001\002\000\020\006\uff6d" +
    "\013\uff6d\027\uff6d\062\uff6d\063\uff6d\064\uff6d\065\uff6d\001" +
    "\002\000\004\014\111\001\002\000\004\014\uffa5\001\002" +
    "\000\012\014\uffa0\015\uffa0\052\107\053\uffa0\001\002\000" +
    "\022\006\uff6c\013\uff6c\027\uff6c\037\103\062\uff6c\063\uff6c" +
    "\064\uff6c\065\uff6c\001\002\000\010\014\uff9f\015\uff9f\053" +
    "\uff9f\001\002\000\026\006\062\011\067\030\uffc5\031\061" +
    "\032\052\033\063\034\070\035\064\050\uffc7\063\053\001" +
    "\002\000\032\006\uffad\011\uffad\012\uffad\030\uffad\031\uffad" +
    "\032\uffad\033\uffad\034\uffad\035\uffad\050\uffad\051\113\063" +
    "\uffad\001\002\000\026\006\uffab\011\uffab\030\uffab\031\uffab" +
    "\032\uffab\033\uffab\034\uffab\035\uffab\050\uffab\063\uffab\001" +
    "\002\000\026\006\062\011\067\030\uffc5\031\061\032\052" +
    "\033\063\034\070\035\064\050\uffc7\063\053\001\002\000" +
    "\032\006\uffaa\011\uffaa\012\uffaa\030\uffaa\031\uffaa\032\uffaa" +
    "\033\uffaa\034\uffaa\035\uffaa\050\uffaa\051\uffaa\063\uffaa\001" +
    "\002\000\022\006\uff9b\013\uff9b\027\uff9b\037\uff9b\062\uff9b" +
    "\063\uff9b\064\uff9b\065\uff9b\001\002\000\022\006\uff6c\013" +
    "\uff6c\027\uff6c\037\103\062\uff6c\063\uff6c\064\uff6c\065\uff6c" +
    "\001\002\000\022\006\uff9c\013\uff9c\027\uff9c\037\uff9c\062" +
    "\uff9c\063\uff9c\064\uff9c\065\uff9c\001\002\000\022\006\uff9a" +
    "\013\uff9a\027\uff9a\037\uff9a\062\uff9a\063\uff9a\064\uff9a\065" +
    "\uff9a\001\002\000\022\006\uff99\013\uff99\027\uff99\037\uff99" +
    "\062\uff99\063\uff99\064\uff99\065\uff99\001\002\000\022\006" +
    "\uff98\013\uff98\027\uff98\037\uff98\062\uff98\063\uff98\064\uff98" +
    "\065\uff98\001\002\000\022\006\uff97\013\uff97\027\uff97\037" +
    "\uff97\062\uff97\063\uff97\064\uff97\065\uff97\001\002\000\012" +
    "\014\uff9d\015\uff9d\052\uff9d\053\uff9d\001\002\000\026\006" +
    "\062\011\067\030\uffc5\031\061\032\052\033\063\034\070" +
    "\035\064\050\uffc7\063\053\001\002\000\032\006\uffac\011" +
    "\uffac\012\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac" +
    "\035\uffac\050\uffac\051\130\063\uffac\001\002\000\026\006" +
    "\062\011\067\030\uffc5\031\061\032\052\033\063\034\070" +
    "\035\064\050\uffc7\063\053\001\002\000\032\006\uffa9\011" +
    "\uffa9\012\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9" +
    "\035\uffa9\050\uffa9\051\uffa9\063\uffa9\001\002\000\032\014" +
    "\uff85\015\uff85\016\uff85\020\uff85\052\uff85\053\uff85\054\uff85" +
    "\055\uff85\056\uff85\057\uff85\060\uff85\061\uff85\001\002\000" +
    "\056\014\uffef\015\uffef\016\uffef\020\uffef\036\uffef\037\uffef" +
    "\040\uffef\041\uffef\042\uffef\043\uffef\044\uffef\045\uffef\046" +
    "\uffef\047\uffef\052\uffef\053\uffef\054\uffef\055\uffef\056\uffef" +
    "\057\uffef\060\uffef\061\uffef\001\002\000\004\063\017\001" +
    "\002\000\064\013\177\014\uff73\015\uff73\016\uff73\017\176" +
    "\020\uff73\024\201\036\uff73\037\uff73\040\uff73\041\uff73\042" +
    "\uff73\043\uff73\044\uff73\045\uff73\046\uff73\047\uff73\052\uff73" +
    "\053\uff73\054\uff73\055\uff73\056\uff73\057\uff73\060\uff73\061" +
    "\uff73\001\002\000\056\014\ufff1\015\ufff1\016\ufff1\020\ufff1" +
    "\036\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1\043\ufff1\044" +
    "\ufff1\045\ufff1\046\ufff1\047\ufff1\052\ufff1\053\ufff1\054\ufff1" +
    "\055\ufff1\056\ufff1\057\ufff1\060\ufff1\061\ufff1\001\002\000" +
    "\056\014\uff77\015\uff77\016\uff77\020\uff77\036\uff77\037\uff77" +
    "\040\uff77\041\uff77\042\uff77\043\uff77\044\uff77\045\uff77\046" +
    "\uff77\047\uff77\052\uff77\053\uff77\054\uff77\055\uff77\056\uff77" +
    "\057\uff77\060\uff77\061\uff77\001\002\000\042\014\uff84\015" +
    "\uff84\016\uff84\020\uff84\036\164\037\165\040\uff81\041\uff81" +
    "\052\uff84\053\uff84\054\uff84\055\uff84\056\uff84\057\uff84\060" +
    "\uff84\061\uff84\001\002\000\056\014\uff79\015\uff79\016\uff79" +
    "\020\uff79\036\uff79\037\uff79\040\uff79\041\uff79\042\152\043" +
    "\150\044\147\045\uff7c\046\uff7c\047\uff7c\052\uff79\053\uff79" +
    "\054\uff79\055\uff79\056\uff79\057\uff79\060\uff79\061\uff79\001" +
    "\002\000\022\006\uff6c\013\uff6c\027\uff6c\037\103\062\uff6c" +
    "\063\uff6c\064\uff6c\065\uff6c\001\002\000\056\014\ufff0\015" +
    "\ufff0\016\ufff0\020\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0" +
    "\042\ufff0\043\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0\052" +
    "\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0" +
    "\061\ufff0\001\002\000\004\014\145\001\002\000\056\014" +
    "\uff75\015\uff75\016\uff75\020\uff75\036\uff75\037\uff75\040\uff75" +
    "\041\uff75\042\uff75\043\uff75\044\uff75\045\uff75\046\uff75\047" +
    "\uff75\052\uff75\053\uff75\054\uff75\055\uff75\056\uff75\057\uff75" +
    "\060\uff75\061\uff75\001\002\000\020\006\uff7e\013\uff7e\027" +
    "\uff7e\062\uff7e\063\uff7e\064\uff7e\065\uff7e\001\002\000\020" +
    "\006\uff65\013\uff65\027\uff65\062\uff65\063\uff65\064\uff65\065" +
    "\uff65\001\002\000\020\006\uff66\013\uff66\027\uff66\062\uff66" +
    "\063\uff66\064\uff66\065\uff66\001\002\000\010\045\154\046" +
    "\155\047\156\001\002\000\020\006\uff67\013\uff67\027\uff67" +
    "\062\uff67\063\uff67\064\uff67\065\uff67\001\002\000\020\006" +
    "\uff7b\013\uff7b\027\uff7b\062\uff7b\063\uff7b\064\uff7b\065\uff7b" +
    "\001\002\000\024\003\uff64\006\uff64\013\uff64\027\uff64\037" +
    "\uff64\062\uff64\063\uff64\064\uff64\065\uff64\001\002\000\024" +
    "\003\uff63\006\uff63\013\uff63\027\uff63\037\uff63\062\uff63\063" +
    "\uff63\064\uff63\065\uff63\001\002\000\024\003\uff62\006\uff62" +
    "\013\uff62\027\uff62\037\uff62\062\uff62\063\uff62\064\uff62\065" +
    "\uff62\001\002\000\020\006\062\013\142\027\134\062\136" +
    "\063\053\064\143\065\133\001\002\000\042\014\uff7a\015" +
    "\uff7a\016\uff7a\020\uff7a\036\uff7a\037\uff7a\040\uff7a\041\uff7a" +
    "\052\uff7a\053\uff7a\054\uff7a\055\uff7a\056\uff7a\057\uff7a\060" +
    "\uff7a\061\uff7a\001\002\000\020\006\062\013\142\027\134" +
    "\062\136\063\053\064\143\065\133\001\002\000\042\014" +
    "\uff7d\015\uff7d\016\uff7d\020\uff7d\036\uff7d\037\uff7d\040\uff7d" +
    "\041\uff7d\052\uff7d\053\uff7d\054\uff7d\055\uff7d\056\uff7d\057" +
    "\uff7d\060\uff7d\061\uff7d\001\002\000\006\040\173\041\171" +
    "\001\002\000\020\006\uff6b\013\uff6b\027\uff6b\062\uff6b\063" +
    "\uff6b\064\uff6b\065\uff6b\001\002\000\020\006\uff6a\013\uff6a" +
    "\027\uff6a\062\uff6a\063\uff6a\064\uff6a\065\uff6a\001\002\000" +
    "\020\006\uff83\013\uff83\027\uff83\062\uff83\063\uff83\064\uff83" +
    "\065\uff83\001\002\000\020\006\062\013\142\027\134\062" +
    "\136\063\053\064\143\065\133\001\002\000\032\014\uff82" +
    "\015\uff82\016\uff82\020\uff82\052\uff82\053\uff82\054\uff82\055" +
    "\uff82\056\uff82\057\uff82\060\uff82\061\uff82\001\002\000\024" +
    "\003\uff68\006\uff68\013\uff68\027\uff68\037\uff68\062\uff68\063" +
    "\uff68\064\uff68\065\uff68\001\002\000\020\006\uff80\013\uff80" +
    "\027\uff80\062\uff80\063\uff80\064\uff80\065\uff80\001\002\000" +
    "\024\003\uff69\006\uff69\013\uff69\027\uff69\037\uff69\062\uff69" +
    "\063\uff69\064\uff69\065\uff69\001\002\000\020\006\062\013" +
    "\142\027\134\062\136\063\053\064\143\065\133\001\002" +
    "\000\032\014\uff7f\015\uff7f\016\uff7f\020\uff7f\052\uff7f\053" +
    "\uff7f\054\uff7f\055\uff7f\056\uff7f\057\uff7f\060\uff7f\061\uff7f" +
    "\001\002\000\024\003\213\006\uff8d\013\uff8d\027\uff8d\037" +
    "\uff8d\062\uff8d\063\uff8d\064\uff8d\065\uff8d\001\002\000\026" +
    "\003\204\006\uff6c\013\uff6c\014\uff88\027\uff6c\037\103\062" +
    "\uff6c\063\uff6c\064\uff6c\065\uff6c\001\002\000\056\014\uff78" +
    "\015\uff78\016\uff78\020\uff78\036\uff78\037\uff78\040\uff78\041" +
    "\uff78\042\uff78\043\uff78\044\uff78\045\uff78\046\uff78\047\uff78" +
    "\052\uff78\053\uff78\054\uff78\055\uff78\056\uff78\057\uff78\060" +
    "\uff78\061\uff78\001\002\000\004\063\202\001\002\000\072" +
    "\010\uff8e\013\uff8e\014\uff8e\015\uff8e\016\uff8e\017\uff8e\020" +
    "\uff8e\024\uff8e\025\uff8e\026\uff8e\036\uff8e\037\uff8e\040\uff8e" +
    "\041\uff8e\042\uff8e\043\uff8e\044\uff8e\045\uff8e\046\uff8e\047" +
    "\uff8e\052\uff8e\053\uff8e\054\uff8e\055\uff8e\056\uff8e\057\uff8e" +
    "\060\uff8e\061\uff8e\001\002\000\004\014\uff8a\001\002\000" +
    "\004\014\uff89\001\002\000\006\014\uff86\016\210\001\002" +
    "\000\004\014\207\001\002\000\056\014\uff74\015\uff74\016" +
    "\uff74\020\uff74\036\uff74\037\uff74\040\uff74\041\uff74\042\uff74" +
    "\043\uff74\044\uff74\045\uff74\046\uff74\047\uff74\052\uff74\053" +
    "\uff74\054\uff74\055\uff74\056\uff74\057\uff74\060\uff74\061\uff74" +
    "\001\002\000\022\006\uff6c\013\uff6c\027\uff6c\037\103\062" +
    "\uff6c\063\uff6c\064\uff6c\065\uff6c\001\002\000\004\014\uff87" +
    "\001\002\000\022\006\uff6c\013\uff6c\027\uff6c\037\103\062" +
    "\uff6c\063\uff6c\064\uff6c\065\uff6c\001\002\000\004\020\214" +
    "\001\002\000\072\010\uff8b\013\uff8b\014\uff8b\015\uff8b\016" +
    "\uff8b\017\uff8b\020\uff8b\024\uff8b\025\uff8b\026\uff8b\036\uff8b" +
    "\037\uff8b\040\uff8b\041\uff8b\042\uff8b\043\uff8b\044\uff8b\045" +
    "\uff8b\046\uff8b\047\uff8b\052\uff8b\053\uff8b\054\uff8b\055\uff8b" +
    "\056\uff8b\057\uff8b\060\uff8b\061\uff8b\001\002\000\004\020" +
    "\216\001\002\000\072\010\uff8c\013\uff8c\014\uff8c\015\uff8c" +
    "\016\uff8c\017\uff8c\020\uff8c\024\uff8c\025\uff8c\026\uff8c\036" +
    "\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c\043\uff8c\044\uff8c" +
    "\045\uff8c\046\uff8c\047\uff8c\052\uff8c\053\uff8c\054\uff8c\055" +
    "\uff8c\056\uff8c\057\uff8c\060\uff8c\061\uff8c\001\002\000\060" +
    "\014\uff71\015\uff71\016\uff71\017\220\020\uff71\036\uff71\037" +
    "\uff71\040\uff71\041\uff71\042\uff71\043\uff71\044\uff71\045\uff71" +
    "\046\uff71\047\uff71\052\uff71\053\uff71\054\uff71\055\uff71\056" +
    "\uff71\057\uff71\060\uff71\061\uff71\001\002\000\022\006\uff6c" +
    "\013\uff6c\027\uff6c\037\103\062\uff6c\063\uff6c\064\uff6c\065" +
    "\uff6c\001\002\000\056\014\uff76\015\uff76\016\uff76\020\uff76" +
    "\036\uff76\037\uff76\040\uff76\041\uff76\042\uff76\043\uff76\044" +
    "\uff76\045\uff76\046\uff76\047\uff76\052\uff76\053\uff76\054\uff76" +
    "\055\uff76\056\uff76\057\uff76\060\uff76\061\uff76\001\002\000" +
    "\004\020\223\001\002\000\056\014\uff72\015\uff72\016\uff72" +
    "\020\uff72\036\uff72\037\uff72\040\uff72\041\uff72\042\uff72\043" +
    "\uff72\044\uff72\045\uff72\046\uff72\047\uff72\052\uff72\053\uff72" +
    "\054\uff72\055\uff72\056\uff72\057\uff72\060\uff72\061\uff72\001" +
    "\002\000\004\053\225\001\002\000\022\006\uffa2\013\uffa2" +
    "\027\uffa2\037\uffa2\062\uffa2\063\uffa2\064\uffa2\065\uffa2\001" +
    "\002\000\022\006\uff6c\013\uff6c\027\uff6c\037\103\062\uff6c" +
    "\063\uff6c\064\uff6c\065\uff6c\001\002\000\006\014\uffa1\015" +
    "\uffa1\001\002\000\004\013\232\001\002\000\032\006\uffc4" +
    "\011\uffc4\012\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034" +
    "\uffc4\035\uffc4\050\uffc4\051\uffc4\063\uffc4\001\002\000\012" +
    "\003\233\006\062\015\uffaf\063\053\001\002\000\006\014" +
    "\uffae\015\uffae\001\002\000\004\015\236\001\002\000\006" +
    "\014\uffb0\015\uffb0\001\002\000\026\003\uffb5\006\uffb5\013" +
    "\uffb5\015\uffb5\027\uffb5\037\uffb5\062\uffb5\063\uffb5\064\uffb5" +
    "\065\uffb5\001\002\000\026\003\240\006\uff6c\013\uff6c\015" +
    "\uffa7\027\uff6c\037\103\062\uff6c\063\uff6c\064\uff6c\065\uff6c" +
    "\001\002\000\004\015\uffa6\001\002\000\004\015\243\001" +
    "\002\000\004\015\uffa8\001\002\000\012\003\uffb4\006\uffb4" +
    "\014\uffb4\063\uffb4\001\002\000\012\003\233\006\062\014" +
    "\uffaf\063\053\001\002\000\004\014\uffb3\001\002\000\004" +
    "\014\247\001\002\000\026\006\uffb2\011\uffb2\030\uffb2\031" +
    "\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\050\uffb2\063\uffb2" +
    "\001\002\000\026\006\062\011\067\030\uffc5\031\061\032" +
    "\052\033\063\034\070\035\064\050\uffc7\063\053\001\002" +
    "\000\032\006\uffb1\011\uffb1\012\uffb1\030\uffb1\031\uffb1\032" +
    "\uffb1\033\uffb1\034\uffb1\035\uffb1\050\uffb1\051\uffb1\063\uffb1" +
    "\001\002\000\004\015\254\001\002\000\032\006\uffb7\011" +
    "\uffb7\012\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7" +
    "\035\uffb7\050\uffb7\051\uffb7\063\uffb7\001\002\000\032\006" +
    "\uffb6\011\uffb6\012\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6" +
    "\034\uffb6\035\uffb6\050\uffb6\051\uffb6\063\uffb6\001\002\000" +
    "\032\006\uffc2\011\uffc2\012\uffc2\030\uffc2\031\uffc2\032\uffc2" +
    "\033\uffc2\034\uffc2\035\uffc2\050\uffc2\051\uffc2\063\uffc2\001" +
    "\002\000\004\063\257\001\002\000\072\010\uff8f\013\uff8f" +
    "\014\uff8f\015\uff8f\016\uff8f\017\uff8f\020\uff8f\024\uff8f\025" +
    "\uff8f\026\uff8f\036\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f" +
    "\043\uff8f\044\uff8f\045\uff8f\046\uff8f\047\uff8f\052\uff8f\053" +
    "\uff8f\054\uff8f\055\uff8f\056\uff8f\057\uff8f\060\uff8f\061\uff8f" +
    "\001\002\000\022\006\uff6c\013\uff6c\027\uff6c\037\103\062" +
    "\uff6c\063\uff6c\064\uff6c\065\uff6c\001\002\000\006\014\uffba" +
    "\016\263\001\002\000\004\014\270\001\002\000\004\062" +
    "\265\001\002\000\006\014\uffbb\016\266\001\002\000\006" +
    "\014\uffb8\016\uffb8\001\002\000\004\062\267\001\002\000" +
    "\006\014\uffb9\016\uffb9\001\002\000\004\015\271\001\002" +
    "\000\032\006\uffbf\011\uffbf\012\uffbf\030\uffbf\031\uffbf\032" +
    "\uffbf\033\uffbf\034\uffbf\035\uffbf\050\uffbf\051\uffbf\063\uffbf" +
    "\001\002\000\032\006\uffc8\011\uffc8\012\uffc8\030\uffc8\031" +
    "\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\050\uffc8\051\uffc8" +
    "\063\uffc8\001\002\000\012\012\uffff\022\uffff\023\uffff\063" +
    "\uffff\001\002\000\012\012\uffd4\022\uffd4\023\uffd4\063\uffd4" +
    "\001\002\000\006\014\uff92\015\uff92\001\002\000\024\003" +
    "\307\006\uff96\013\uff96\027\uff96\037\uff96\062\uff96\063\uff96" +
    "\064\uff96\065\uff96\001\002\000\006\014\uff91\015\uff91\001" +
    "\002\000\024\003\uff6e\006\uff6e\013\uff6e\027\uff6e\037\uff6e" +
    "\062\uff6e\063\uff6e\064\uff6e\065\uff6e\001\002\000\026\003" +
    "\204\006\uff6c\013\uff6c\014\uff88\027\uff6c\037\103\062\uff6c" +
    "\063\uff6c\064\uff6c\065\uff6c\001\002\000\024\003\uff70\006" +
    "\uff70\013\uff70\027\uff70\037\uff70\062\uff70\063\uff70\064\uff70" +
    "\065\uff70\001\002\000\024\003\uff6f\006\uff6f\013\uff6f\027" +
    "\uff6f\037\uff6f\062\uff6f\063\uff6f\064\uff6f\065\uff6f\001\002" +
    "\000\004\014\305\001\002\000\006\014\uff93\015\uff93\001" +
    "\002\000\022\006\uff6c\013\uff6c\027\uff6c\037\103\062\uff6c" +
    "\063\uff6c\064\uff6c\065\uff6c\001\002\000\006\014\uff94\015" +
    "\uff94\001\002\000\006\014\uff95\015\uff95\001\002\000\006" +
    "\006\062\063\053\001\002\000\010\014\313\017\176\024" +
    "\201\001\002\000\004\015\314\001\002\000\032\006\uffc0" +
    "\011\uffc0\012\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034" +
    "\uffc0\035\uffc0\050\uffc0\051\uffc0\063\uffc0\001\002\000\004" +
    "\063\322\001\002\000\006\014\uffcd\016\317\001\002\000" +
    "\004\063\017\001\002\000\004\063\322\001\002\000\006" +
    "\014\uffca\016\uffca\001\002\000\012\014\uffe8\015\uffe8\016" +
    "\uffe8\017\323\001\002\000\004\020\324\001\002\000\010" +
    "\014\uffe7\015\uffe7\016\uffe7\001\002\000\006\014\uffc9\016" +
    "\uffc9\001\002\000\004\002\uffff\001\002\000\004\002\ufffc" +
    "\001\002\000\010\015\340\016\336\063\322\001\002\000" +
    "\006\015\uffea\016\uffea\001\002\000\006\015\334\016\333" +
    "\001\002\000\004\063\322\001\002\000\014\005\uffee\007" +
    "\uffee\011\uffee\012\uffee\063\uffee\001\002\000\006\015\uffec" +
    "\016\uffec\001\002\000\004\063\322\001\002\000\006\015" +
    "\uffe9\016\uffe9\001\002\000\014\005\uffed\007\uffed\011\uffed" +
    "\012\uffed\063\uffed\001\002\000\006\015\uffeb\016\uffeb\001" +
    "\002\000\012\005\ufff5\007\ufff5\011\ufff5\063\ufff5\001\002" +
    "\000\004\063\345\001\002\000\010\003\350\011\uffdf\021" +
    "\347\001\002\000\010\003\uffe2\011\uffe2\021\uffe2\001\002" +
    "\000\004\011\uffe5\001\002\000\004\063\017\001\002\000" +
    "\004\011\uffe0\001\002\000\004\011\uffe1\001\002\000\004" +
    "\011\353\001\002\000\010\011\uffdd\012\uffdd\063\uffdd\001" +
    "\002\000\010\011\356\012\uffdb\063\017\001\002\000\004" +
    "\012\361\001\002\000\012\012\uffd9\022\uffd9\023\uffd9\063" +
    "\uffd9\001\002\000\012\012\360\022\uffd8\023\uffd8\063\uffd8" +
    "\001\002\000\004\012\uffdc\001\002\000\012\005\uffe4\007" +
    "\uffe4\011\uffe4\063\uffe4\001\002\000\012\005\uffff\007\uffff" +
    "\011\uffff\063\uffff\001\002\000\012\005\uffe3\007\uffe3\011" +
    "\uffe3\063\uffe3\001\002\000\004\063\365\001\002\000\004" +
    "\010\374\001\002\000\006\015\370\016\367\001\002\000" +
    "\004\063\371\001\002\000\012\005\ufff4\007\ufff4\011\ufff4" +
    "\063\ufff4\001\002\000\004\010\372\001\002\000\010\062" +
    "\136\064\143\065\133\001\002\000\006\015\ufff3\016\ufff3" +
    "\001\002\000\010\062\136\064\143\065\133\001\002\000" +
    "\006\015\ufff2\016\ufff2\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\374\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\037\006\001\001\000\002\001\001\000\004\034\007" +
    "\001\001\000\004\003\010\001\001\000\014\005\017\006" +
    "\012\007\015\044\014\073\013\001\001\000\004\044\363" +
    "\001\001\000\002\001\001\000\004\010\341\001\001\000" +
    "\006\012\331\013\330\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\071\021\001\001\000" +
    "\004\020\022\001\001\000\006\004\024\076\025\001\001" +
    "\000\004\072\325\001\001\000\002\001\001\000\004\014" +
    "\027\001\001\000\002\001\001\000\006\015\030\044\031" +
    "\001\001\000\004\042\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\035\001\001" +
    "\000\002\001\001\000\006\054\041\102\040\001\001\000" +
    "\002\001\001\000\006\044\314\055\315\001\001\000\002" +
    "\001\001\000\004\077\043\001\001\000\004\021\044\001" +
    "\001\000\006\007\045\044\014\001\001\000\002\001\001" +
    "\000\004\100\047\001\001\000\004\033\050\001\001\000" +
    "\016\016\057\036\056\043\054\053\053\103\065\104\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\062\275\063\302\065\277\001\001\000\004" +
    "\101\272\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\040\251\056\077\001\001\000\004\022\230\001\001\000" +
    "\004\027\073\001\001\000\004\033\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\016\057\036\056\043" +
    "\054\053\053\103\065\104\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\025\076\026" +
    "\105\030\103\040\101\056\077\067\104\001\001\000\004" +
    "\112\223\001\001\000\014\041\136\043\134\045\140\047" +
    "\137\050\131\001\001\000\002\001\001\000\004\070\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\025\107\026\105\040\101" +
    "\056\077\001\001\000\002\001\001\000\016\016\111\036" +
    "\056\043\054\053\053\103\065\104\064\001\001\000\002" +
    "\001\001\000\004\111\113\001\001\000\016\016\114\036" +
    "\056\043\054\053\053\103\065\104\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\040\124\056\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\016\126\036\056\043\054\053\053\103\065\104\064" +
    "\001\001\000\002\001\001\000\016\016\130\036\056\043" +
    "\054\053\053\103\065\104\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\216\001" +
    "\001\000\004\061\177\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\064\165\117\162\001\001\000\006\066" +
    "\145\122\150\001\001\000\006\040\143\056\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\160\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\065\152\001\001\000\002\001\001\000\004\123" +
    "\156\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\041\136\043\134\045\140\047\157\001" +
    "\001\000\002\001\001\000\012\041\136\043\134\045\140" +
    "\047\161\001\001\000\002\001\001\000\004\063\171\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\116\166" +
    "\001\001\000\014\041\136\043\134\045\140\047\137\050" +
    "\167\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\120\173\001\001\000\002\001\001\000\014\041\136\043" +
    "\134\045\140\047\137\050\174\001\001\000\002\001\001" +
    "\000\004\115\211\001\001\000\012\040\204\056\077\057" +
    "\205\060\202\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\040\204\056\077\060\210\001\001\000\002\001\001\000" +
    "\006\040\214\056\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\046" +
    "\220\001\001\000\006\040\221\056\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\113\225\001\001\000\014\025\076\026\105" +
    "\040\101\056\077\067\226\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\023\233\036\234" +
    "\043\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\105\236\001\001\000\016\024\240" +
    "\025\076\026\105\040\101\056\077\067\241\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\106\243\001\001\000\010\023\244\036\234\043\054\001" +
    "\001\000\004\107\245\001\001\000\002\001\001\000\004" +
    "\110\247\001\001\000\016\016\250\036\056\043\054\053" +
    "\053\103\065\104\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\040\260" +
    "\056\077\001\001\000\004\031\261\001\001\000\002\001" +
    "\001\000\004\032\263\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\273" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\114" +
    "\305\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\040\204\056\077\057\303\060\202\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\040\307\056\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\311\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\324\001" +
    "\001\000\002\001\001\000\004\044\317\001\001\000\004" +
    "\013\320\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\326\001\001\000\002\001\001\000\004\013\336\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\334" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\340\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\052\343\001\001\000" +
    "\004\051\345\001\001\000\002\001\001\000\004\074\351" +
    "\001\001\000\004\044\350\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\353\001\001" +
    "\000\010\007\045\017\354\044\014\001\001\000\002\001" +
    "\001\000\004\020\356\001\001\000\006\004\024\076\025" +
    "\001\001\000\002\001\001\000\004\075\361\001\001\000" +
    "\004\035\362\001\001\000\002\001\001\000\004\011\365" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\372" +
    "\001\001\000\002\001\001\000\004\041\374\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	Tab.init();
	Tab.currentScope.addToLocals(new Obj(Obj.Type, "bool", CUP$MJParser$actions.boolType));

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;

    }


	static {
		DOMConfigurator.configure(Log4JUtils.instance().findLoggerConfigFile());
		Log4JUtils.instance().prepareLogFile(Logger.getRootLogger());
	}
	
	public static void main(String[] args) throws Exception {
		Logger log = Logger.getLogger(MJParser.class);
		
		if (args.length < 2) {
			log.error("Invalid arguments! Usage: MJParserTest <source-file> <obj-file> ");
			return;
		}
		
		Reader br = null;
		try {
			File sourceCode = new File(args[0]);
			if (!sourceCode.exists()) {
				log.error("File not found: " + sourceCode.getAbsolutePath() + "");
				return;
			}
			
			log.info("Compiling source file: " + sourceCode.getAbsolutePath());

			br = new BufferedReader(new FileReader(sourceCode));
			Yylex lexer = new Yylex(br);
			
			MJParser p = new MJParser(lexer);
	        Symbol s = p.parse();  //pocetak parsiranja
	        Tab.dump();
	        
	        if(!p.wasParsingSuccessful) {
	        	log.error("All error messages follow:" + p.allErrorMessages);
	        	log.error("Parsing finished with ERRORS!");
	        } else {
	        	File objFile = new File(args[1]);
	        	if (objFile.exists()) {
	        		objFile.delete();
	        	}
	        	Code.write(new FileOutputStream(objFile));
	        	log.info("Parsing finished successfully!");
	        }
	        
//	        log.info("\n===============================\nVARS COUNTING:");
//	        log.info("Constants number: " + p.constantsCount);
//	        log.info("Global vars number: " + p.globalVarsCount);
//	        log.info("Global array vars number: " + p.globalArrayVarsCount);
//	        log.info("Class vars number: " + p.classGlobalVarsCount);
//	        log.info("Main function vars number: " + p.mainFunctionVarsCount + "\n===============================\n");
//	        log.info("\n===============================\nFUNCTION CALLS COUNTING:");
//	        log.info("Global function calls: " + p.globalFuncCount);
//	        log.info("Global static function calls: " + p.globalStaticFuncCount);
//	        log.info("Class function calls: " + p.classFuncCount);
//	        log.info("Class static function calls: " + p.classStaticFuncCount);
//	        log.info("Statements block number: " + p.statementsBlockCount);
//	        log.info("Main method function calls number: " + p.mainMethodFunctionCallsCount);
//	        log.info("Function formal parameters number: " + p.functionFormParsCount);
//	        log.info("Class definitions number: " + p.classDefinitionCount);
	        
		} 
		finally {
			if (br != null) try { br.close(); } catch (IOException e1) { log.error(e1.getMessage(), e1); }
		}
	}
	
	public enum ERROR_CODE {
		VARIABLE,
		ASSIGN,
		FORMAL_PARAMETERS,
		IF,
		FOR,
		INDEXING,
		EXTENDS,
		PARAMETERS
	}
	
	public enum LOG_TYPE {
		DEBUG,
		INFO,
		ERROR
	}

	public enum SYMBOL_TYPE {
		CONSTANT,
		VARIABLE,
		METHOD,
		PROGRAM,
		CLASS,
		ARRAY
	}
	
	private static final String MAIN = "main";
	private static final String INT = "int";
	
	private static final String error_recovery_string = "Error recovery successful: ";

	// Counting variables
	int constantsCount = 0;
	int globalVarsCount = 0;
	int globalArrayVarsCount = 0;
	int classGlobalVarsCount = 0;
	int mainFunctionVarsCount = 0;
	int globalFuncCount = 0;
	int globalStaticFuncCount = 0;
	int classFuncCount = 0;
	int classStaticFuncCount = 0;
	int statementsBlockCount = 0;
	int mainMethodFunctionCallsCount = 0;
	int functionFormParsCount = 0;
	int classDefinitionCount = 0;
	String allErrorMessages = "";
	
	boolean wasParsingSuccessful = true;
	boolean isGlobalContext = true;
	boolean isClassContext = false;
	boolean isMethodContext = false;
	boolean isStaticContext = false;
	boolean isFormalParametersContext = false;
	boolean isForContext = false;
	Obj currentMethodObject = Tab.noObj;
	Obj currentClass = Tab.noObj;
	Obj thisObject = Tab.noObj;
	Scope currentClassScope = null;
	
	Stack<Obj> thisObjectsStack = new Stack<Obj>(); 
	
	Logger log = Logger.getLogger(getClass());
     
	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatal error, parsing is terminated", cur_token);
    }

	public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report(message, info, LOG_TYPE.ERROR);
    }
  
    public void syntax_error(Symbol cur_token) {
        report("Syntax error \"" + cur_token.value + "\"", cur_token, LOG_TYPE.ERROR);
    }
  	
  	public void semantic_error(String message, int line) {
        report("Semantic error on line " + line + ", couldn't recognize: " + message, null, LOG_TYPE.ERROR);
    }

  	public void code_generation_error(String message, int line) {
        report("Code generation error on line " + line + ": " + message, null, LOG_TYPE.ERROR);
    }

  	public void usage_info(Obj usedObject, String message, int line) {
  		String visitorMessage = "";
  		if(usedObject != null) {
	  		DumpSymbolTableVisitor visitor = new DumpSymbolTableVisitor();
			//visitor.visitObjNode(usedObject);
			//visitorMessage = " [ " + visitor.getOutput() + "]"; 
		}
		report("Usage info on line " + line + ": " + message + visitorMessage, null, LOG_TYPE.DEBUG);
	}

  	public void semantic_info(String message, int line) {
		report("Semantic info on line " + line + ": " + message, null, LOG_TYPE.DEBUG);
	}
	
	public void log_symbol_detected(Obj object, String message, int line) {
		DumpSymbolTableVisitor visitor = new DumpSymbolTableVisitor();
		//visitor.visitObjNode(object);
        
 		//semantic_info(message + " [ " + visitor.getOutput() + "]", line);
 		semantic_info(message + " [ FIX THIS ]", line);
	}
	
    public void report(String message, Object info, LOG_TYPE logType) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol) {
			msg.append (" on line ").append(((Symbol)info).left).append(", column ").append(((Symbol)info).right);
        }

		switch(logType) {
			case DEBUG:
		    	log.debug(msg.toString());
		    	break;
		    	
			case INFO:
		    	log.info(msg.toString());
		    	break;
		    	
			case ERROR:
		    	log.error(msg.toString());
		    	allErrorMessages += "\n\t\t\t\t" + msg.toString();
		    	
		    	wasParsingSuccessful = false;
		    	break;
		 }
    }
    
    // Increments proper var count. Called for every var.
    public void incrementVarsCount(boolean isArray) {
    	if(isFormalParametersContext) { return; }
    
    	// Counting variables
		if(isClassContext) {
			// Counting only class global variables, not the class method variables.
			if(!isMethodContext) {
				classGlobalVarsCount++;
			}
		} else if(isGlobalContext) {
			if(isArray) {
				globalArrayVarsCount++;
			} else {
				globalVarsCount++;
			}
		} else {
			if(isMainMethod()) {
				mainFunctionVarsCount++;
			}
		}
    }
    
    // Increments proper methods count. Called for every method.
    public void incrementMethodsCount() {
    	if(isStaticContext) {
    		if(isClassContext) {
    			classStaticFuncCount++;
    		} else {
    			globalStaticFuncCount++;
    		}
    	} else {
    		if(isClassContext) {
    			classFuncCount++;
    		} else {
    			globalFuncCount++;
    		}
    	}
    }
    
    public boolean isMainMethod() {
    	return isMethodContext && MAIN.equals(currentMethodObject.getName());
    }
    
	public String getContextStringForDeclaration() {
		return isFormalParametersContext ? "formal parameter" : isMethodContext ? "local" : isClassContext ? "class" : "global";
	}
	
    public void trackSyntaxErrorRecovery(ERROR_CODE error, String additionalInfo) {
    	String message = error_recovery_string;
    	switch (error) {
    		case VARIABLE:
    			message += getContextStringForDeclaration() + " variable declaration error "; 
    			break;
    			
    		case ASSIGN:
    			message += "Assign operator error ";
    			break;
    			
    		case FORMAL_PARAMETERS:
    			message += "Formal parameters declaration error ";
    			break;	
    		
    		case IF:
    			message += "If statement condition error ";
    			break;
    		
    		case FOR:
    			message += "For loop condition error ";
    			break;	
    		
    		case INDEXING:
    			message += "Indexing array error ";
    			break;
    			
    		case EXTENDS:
    			message += "Extends clause error ";
    			break;
    			
    		case PARAMETERS:
    			message += "Parameters list error ";
    			break;
    		    			
    		default:
    			message += "Unknown syntax error ";
    			break;
    	}
    	
    	log.debug(message + additionalInfo);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {


	private static final String SUPER_DOT = "super.";
	
	public static final String CLASS_COMPATIBILITY_PREFIX = "c0mp@tib13_c11@s_";
	public static final String STATIC_METHOD_PREFIX = "st@t1c_m3th0d_";
	public static final Struct boolType = new Struct(Struct.Bool);
		
	Struct currentType = Tab.noType;

	boolean doesReturnExist = false;
	boolean isVoidMethod = false;
	boolean hasUsedLeftOperator = false;
	boolean isClassAndArrayCompatibleRelOp = false;
	
	int numberOfFormalParameters = 0;
	
	// These two represent stack for current if/else and for loop nesting level.
	Stack<Integer> failedConditionsFixupAddresses;
	Stack<Integer> succeededConditionsFixupAddresses;
	// Just need 3 of these to store some jumping addresses.
	Integer branchExitFixupAddress = new Integer(0);
	Integer forLoopLastStatementSkipFixupAddress = new Integer(0);
	Integer forLoopLastStatementFixupAddress = new Integer(0);
	Integer forLoopViolentExitFixupAddress = new Integer(0);
	
	// Following stacks are used to keep track of jumping fixup addresses when nesting if/else and for loops.
	Stack<Stack<Integer>> failedFixupStacks = new Stack<Stack<Integer>>();
	Stack<Stack<Integer>> succeededFixupStacks = new Stack<Stack<Integer>>();
	Stack<Integer> branchExitFixupStack = new Stack<Integer>();
	Stack<Integer> forLoopEndStatementFixupStack = new Stack<Integer>();
	Stack<Integer> forLoopContentFixupStack = new Stack<Integer>();
	Stack<Integer> forLoopViolentExitFixupStack = new Stack<Integer>();
	
	// Semantic methods
	
	// We have to manually link everything to class scope because of usage before last class chaining.
	// For example if class has a variable of that class type.
	private void ChainClassScope () {
		parser.currentClass.getType().setMembers(parser.currentClassScope.getLocals());
	}
	
	private String getContextStringForUsage(String identifier) {
		Obj currentObject = Tab.currentScope.findSymbol(identifier);
		boolean isInCurrentScope = currentObject != null;
		
		if(isInCurrentScope) { 
			if(parser.isMethodContext) {
				// We have to distinguish formal parameters and local vars.
				// We do so by saving numberOfFormalParameters and the going through first numberOfFormalParameters of current scope 
				// to check if this identifier is one of those. 
				int i = 0;
				for (Obj sym : Tab.currentScope().values()) {
					if(i++ >= numberOfFormalParameters) { break; }
					
					if(sym.getName().equals(identifier)) {
						return "formal parameter";	
					}
				}
			}
			return "local";
		}
		
		if(parser.isClassContext) {
			currentObject = Tab.currentScope.getOuter().findSymbol(identifier);
			
			boolean isInClassScope = currentObject != null;
			if(isInClassScope) {
				return "class";
			}
		}
		
		return "global";
	}
	
	private void breakContinueCheck(int line) {
		if(!parser.isForContext) {
			parser.semantic_error("break/continue can be used only inside the for loop.", line);
		}
	}
	
	private boolean isObjectArray(Obj object, int line) {
		boolean isArray = object.getType().getKind() == Struct.Array;
		if(!isArray) {
			parser.semantic_error("tried to use indexing on a non-array object \"" + object.getName() + "\"", line);
		}
		
		return isArray;
	}
	
	private boolean isIndexingTypeValid(Struct expressionType, int line) {
		boolean isValid = expressionType == Tab.intType; 
		if(!isValid) {
			parser.semantic_error("wrong indexing expression type. It must be \"int\"", line);
		} 
		
		return isValid;
	}
	
	private boolean hasMethodAppropriateParams(Obj methodObject, Stack<Struct> actualParams, int line) {
		// Check number of parameters.
		if(methodObject.getLevel() != actualParams.size()) {
			parser.semantic_error("invalid number of parameters for method \"" + methodObject.getName() + "\".", line);
			return false;
		}
		
		// Check type of every parameter.
		for(Obj param : methodObject.getLocalSymbols()) {
			// In methodObject symbols, first there are formal params and then local vars.
			// Since we already checked if number of actual and formal is same, now just check type for every actual param.
			if(actualParams.size() == 0) { break; }
			
   			if(!areCompatibleTypes(param.getType(), actualParams.pop(), line)) {
   				parser.semantic_error("formal (\"" + param.getName() + "\") and actual parameter types mismatch.", line);
   				return false;
   			}
   		}
   		
   		return true;
	}
	
	private boolean isObjectMethod(Obj object, int line) {
		boolean isMethod = object.getKind() == Obj.Meth;
		if(!isMethod && object != Tab.noObj) {
			parser.semantic_error("tried to use field \"" + object.getName() + "\" as a method.", line);
		}
		
		return isMethod;
	}
	
	private boolean isObjectVariable(Obj object, int line) {
		boolean isVariable = object.getKind() == Obj.Con || object.getKind() == Obj.Var 
			|| object.getKind() == Obj.Fld || object.getKind() == Obj.Elem;
		if(!isVariable && object != Tab.noObj) {
			parser.semantic_error("tried to use method \"" + object.getName() + "\" as a variable.", line);
		}
		
		return isVariable;
	}
	
	private boolean isRelOpCompatible(Struct type1, Struct type2, int line) {
		if((type1.getKind() == Struct.Class || type2.getKind() == Struct.Class 
			|| type1.getKind() == Struct.Array || type2.getKind() == Struct.Array
			|| type1 == boolType || type2 == boolType)
			&& !isClassAndArrayCompatibleRelOp) {
			parser.semantic_error("booleans, classes and arrays can only use \"==\" and \"!=\" relative operators.", line);
		}
		
		boolean isCompatible = type1.compatibleWith(type2);
		if(!isCompatible) {
			parser.semantic_error("tried to compare incompatible types.", line);
		}
		
		return isCompatible;
	}
	
	private boolean areCompatibleTypes(Struct type1, Struct type2, int line) {
		return areCompatibleTypes(new Obj(Obj.Var, "", type1), new Obj(Obj.Var, "", type2), false, line);
	}
	
	// First is destination type and second is source.
	private boolean areCompatibleTypes(Obj typeObj1, Obj typeObj2, boolean shouldCheckMethod, int line) {
		if(typeObj1.getKind() == Obj.Con || typeObj1.getKind() == Obj.Type || typeObj1.getKind() == Obj.Prog 
			|| (shouldCheckMethod && typeObj1.getKind() == Obj.Meth)) {
			parser.semantic_error("cannot assign to constant, method, class name or program name.", line);
			return false;
		}
		
		Struct type1 = typeObj1.getType();
		Struct type2 = typeObj2.getType();
		
		if((type1 == Tab.noType) != (type2 == Tab.noType)) { return false; }
		
		boolean areCompatible = type1.compatibleWith(type2) || 
			(type1.getKind() == Struct.Class && type2.getKind() == Struct.Class && areClassesCompatible(type1, type2));
		 
		if(!areCompatible) {
			parser.semantic_error("incompatible types.", line);
		}
	
		return areCompatible;
	}
	
	private boolean areClassesCompatible(Struct type1, Struct type2) {
		// Go through all members and see if other type has a "parent" member.
		// Destination type (Type1) needs to have all "parent" members in Type2 defined. 
		// This is to make sure that if A extends B, b = a is true and a = b is false. 
		boolean found = false;
		for(Obj fld1 : type1.getMembers()) {
			if(!fld1.getName().startsWith(CLASS_COMPATIBILITY_PREFIX)) { continue; }
			
			found = false;
			for(Obj fld2 : type2.getMembers()) {
				if(!fld2.getName().startsWith(CLASS_COMPATIBILITY_PREFIX)) { continue; }
				
	  			if(fld1.getName().equals(fld2.getName()) || fld2.getName().equals(fld1.getName())) {
	  				found = true;
	  			}
	  		}
			
			if(!found) { break; }
		}
		return found;
	}
	
	private void addClassCompatibilityVar(String className) {
		Tab.insert(Obj.Var, CLASS_COMPATIBILITY_PREFIX + className, Tab.noType);
	}
	
	private boolean isAssignableToInt(Obj object, int line) {
		return canBeAssignedTo(object, line) && isInteger(object.getType(), line);
	}
	
	private boolean canBeAssignedTo(Obj object, int line) {
		int kind = object.getKind();
		boolean isAssignable = kind == Obj.Elem || kind == Obj.Var || kind == Obj.Fld ;
		if(!isAssignable) {
			parser.semantic_error("operation can be done only on array elements, variables or class fields.", line);
		}
		
		return isAssignable;
	}
	
	// Primitive types are int, char and bool.
	private boolean isPrimitiveType(Obj object, int line) {
		Struct type = object.getType();
		boolean isPrimitive = type == Tab.intType || type == Tab.charType || type == boolType;
		if(!isPrimitive) {
			parser.semantic_error("operation can be done only on primitive types (int, char and boolean).", line);
		}
		
		return isPrimitive; 
	}
	
	private void checkRightOperatorUsageAvailability(int line) {
		if(hasUsedLeftOperator) {
			parser.semantic_error("can't use right operator after left is used.", line);
		}
	}
	
	private boolean isInteger(Struct type, int line) {
		boolean isInt = type == Tab.intType;
		if(!isInt) {
			parser.semantic_error("operation can be done only with integers.", line);
		}
		
		return isInt;
	}
	
	private Obj instantiateNewObject(Obj typeObject, Obj arrayObject, int line) {
		if(typeObject == Tab.noObj) {
			parser.semantic_error("unknown type", line);		
			return Tab.noObj;
		}
	
		boolean isArrayType = arrayObject != null && arrayObject != Tab.noObj;
		
		if(!isArrayType && typeObject.getType().getKind() != Struct.Class) {
			parser.semantic_error("tried to instantiate a primitive type \"" + typeObject.getName() + "\"", line);
			return Tab.noObj;
		} 
	
		String objectTypeString = typeObject.getName();
		if(isArrayType) {
			objectTypeString = "array of " + objectTypeString; 
		}
		parser.usage_info(null, "instantiated new object of type \"" + objectTypeString + "\".", line);
		
		return isArrayType ? arrayObject : typeObject;
	}

	// Find object with identifier name.
	private Obj findObjectWithName(String identifier, int line) {
		String ident = identifier;
		Obj result = Tab.find(ident);
		// Check if field is in supper class.
		for(int retry = 10; retry > 0 && result == Tab.noObj; retry--) {
			ident = SUPER_DOT + ident;
			result = Tab.find(ident);
		}
		
		if(result == Tab.noObj) {
			parser.semantic_error("tried to used non-existing identifier \"" + identifier + "\"", line);
		} else {
			String objectKind = "";
			switch (result.getKind()) {
				case Obj.Var:
					String contextString = getContextStringForUsage(identifier);
					objectKind = contextString + " variable";
					break;
					
				case Obj.Con:
					objectKind = "constant";
					break;
					
				case Obj.Meth:
					// In static context, only static methods and global variables can be called.
					if(parser.isStaticContext && !isStaticMethod(parser.currentClass, identifier)) {
						parser.semantic_error("tried to use non-static method \"" + identifier + "\" in static method \"" + parser.currentMethodObject.getName() + "\".", line);
					} else {
						objectKind = getContextStringForUsage(identifier) + " method";
					}
					break;
				
				case Obj.Fld:
					// In static context, only static methods and global variables can be called.
					if(parser.isStaticContext) {
						parser.semantic_error("only global variables are allowed in static methods.", line);
					} else {
						objectKind = "class variable";
					}
					break;
				
				case Obj.Type:
					parser.usage_info(result, "static member of \"" + identifier + "\" class used.", line);
					break;
				
				default:
					parser.semantic_error("unknown object kind ("+ result.getKind() +") of the identifier \"" + identifier + "\"", line);
					break;
			}
			
			if(objectKind.length() > 0) {
				parser.usage_info(result, objectKind + " \"" + identifier + "\" used.", line);
			}
		}
		
		return result;
	}
		
	private Obj findClassMemberWithName(Obj classObj, String identifier, boolean isCalledAsThis, int line) {
		Obj result = Tab.noObj;
		
		if(classObj == null) {
			parser.semantic_error("class object is null.", line);
			return result;
		}
		
		if(classObj.getType().getKind() != Struct.Class) {
			parser.semantic_error("tried to use a primitive type as a class object \"" + classObj.getName() + "\"", line);
			return result;
		}
		
		if(isCalledAsThis) {
			// If function is called as "this.identifier", that means we are in a class method and we have to search identifier in class context
			// (we have to skip methods and context).
			Scope classScope = Tab.currentScope.getOuter();
			result = classScope.findSymbol(identifier);
			
			String ident = identifier;
			// Check if field is in supper class.
			for(int retry = 10; retry > 0 && result == null; retry--) {
				ident = SUPER_DOT + ident;
				result = classScope.findSymbol(ident);
			}
			
			if(isStaticMethod(classObj, identifier)) {
				parser.semantic_error("static methods cannot be used with \"this\".", line);
				return Tab.noObj;
			}
		} else {
			// If function is called as "someObject.identifier" search among class object members.
			result = getClassMemberFromSymbols(classObj.getType().getMembers(), identifier);
			
			// Make sure that only static methods can be called outside of class.
			// Usage "SomeClass.someStaticMethod()".
			if(classObj.getKind() == Obj.Type) {
				if(result.getKind() != Obj.Meth || !isStaticMethod(classObj, identifier)) {
					parser.semantic_error("only static methods can be used in this context.", line);
					return Tab.noObj;
				}
			} else if(isStaticMethod(classObj, identifier)){
				// Static methods must be used as "SomeClass.someStaticMethod()" 
				// or only as identifier (if in static context - then findObjectWithName is called)
				parser.semantic_error("static methods must be used as SomeClassName.staticMethod().", line);
				return Tab.noObj;
			}
		}
		if(result == Tab.noObj) {
			parser.semantic_error("tried to used non-existing class member \"" + identifier + "\"", line);
		} else {
			String memberType = "UNKNOWN";
			if(result.getKind() == Obj.Meth) {
				memberType = "method";
			} 
			else if(result.getKind() == Obj.Fld) {
				memberType = "field";
			} else {
				parser.semantic_error("unknown class member type \"" + identifier + "\"", line);
			}
			
			parser.usage_info(result, "class " + memberType + " \"" + identifier + "\" of class \"" + classObj.getName() + "\" used.", line);
		}
		
		return result;
	}
	
	private boolean isStaticMethod(Obj classObject, String identifier) {
		Obj staticMethodObject = getClassMemberFromSymbols(classObject.getType().getMembers(), STATIC_METHOD_PREFIX + identifier);
		return staticMethodObject != Tab.noObj;
	}
		
	private Obj getClassMemberFromSymbols(Collection<Obj> symbols, String identifier) {
		Obj result = findSymbolWithName(symbols, identifier);
		
		// Check if field is in supper class.
		for(int retry = 10; retry > 0 && result == Tab.noObj; retry--) {
			identifier = SUPER_DOT + identifier;
			result = findSymbolWithName(symbols, identifier);
		}
		
		return result;
	}
	
	private Obj findSymbolWithName(Collection<Obj> symbols, String identifier) {
		for(Obj fld : symbols) {
  			if(fld.getName().equals(identifier)) {
  				return fld;
  			}
		}
		return Tab.noObj;
	}
	
	private boolean isThisAvailable(String identifier, int line) {
		if(!parser.isClassContext) {
			parser.semantic_error("tried to use \"this\" outside of class. (" + identifier + ")", line);
		} else if(parser.isStaticContext) {
			parser.semantic_error("tried to use \"this\" in a static function. (" + identifier + ")", line);
		}
		
		return parser.isClassContext && !parser.isStaticContext;
	}
	
    private boolean doesSymbolAlreadyExist(String name, int line) {
    	boolean doesSymbolExist = Tab.currentScope.findSymbol(name) != null;
    	if(doesSymbolExist) {
			parser.semantic_error("identifier with name \"" + name + "\" already exists.", line);
		}
		return doesSymbolExist;
    }
    
    private boolean doesTypeMatchWithCurrent(Struct type, int line) {
    	boolean doesTypeMatch = type == currentType;
    	if(!doesTypeMatch) {
    		parser.semantic_error("type mismatch.", line);
		}
		return doesTypeMatch;
    }
    
    private void isClassExtensionValid(Struct parentClassType, int line) {
		// Check if class tries to extend itself.
		if(parentClassType == parser.currentClass.getType() && parentClassType != Tab.noType) {
			parser.semantic_error("class tried to extend itself.", line);
		} 
		// Check if class tried to extend primitive or non-existing type.
		else if(parentClassType.getKind() != Struct.Class) {
			parser.semantic_error("class tried to extend primitive or non-existing type.", line);
		}
    }
    
	private Obj addConstantToSymbolTable(String name, Struct currentObjectType, Obj currentObject, int line) {
		if(currentObjectType == null || currentObjectType == Tab.noType) {
			// Failsafe.
			parser.semantic_error("Constant \"" + name + "\" doesn't have a type defined.", line);
			return Tab.noObj;
		} 

		// Check if something with that name exists and if types match.
		if(doesSymbolAlreadyExist(name, line) || !doesTypeMatchWithCurrent(currentObjectType, line)){
			return Tab.noObj;
		}
		
		// Do the insertion.
		Obj createdObject = insertToTable(SYMBOL_TYPE.CONSTANT, name, currentObjectType, line);
		// Copy value.
		createdObject.setAdr(currentObject.getAdr());

		return createdObject;
	}
		
	private Obj addVariableToSymbolTable(String name, int line, boolean isArray) {
		if(doesSymbolAlreadyExist(name, line)){
			return Tab.noObj;
		}
		
		// Symbol doesn't exist, do the insertion.
		SYMBOL_TYPE type = isArray ? SYMBOL_TYPE.ARRAY : SYMBOL_TYPE.VARIABLE;
		return insertToTable(type, name, currentType, line);
	}
	
	private Obj addMethodToSymbolTable(String name, int line) {
		// If it's a main method check if it is void. 
		if(parser.isMainMethod() && !isVoidMethod) {
			parser.semantic_error("main method must have void as a return type.", line);
			return Tab.noObj;
		} 
		
		// Check if some symbol with same name already exist.
		if(doesSymbolAlreadyExist(name, line)){
			return Tab.noObj;
		}
		
		// Check if parent class has static method with the same name.
		if(isStaticMethod(parser.currentClass, name)) {
			parser.semantic_error("static methods cannot be overriden.", line);
			return Tab.noObj;
		}
		
		// Static methods.
		if(parser.isStaticContext)
		{
			// Only class methods can be static.
			if(!parser.isClassContext) {
				parser.semantic_error("global methods can't be static.", line);
				return Tab.noObj;
			}
			
			// Add dummy variable so we can track static methods.
			Tab.insert(Obj.Var, STATIC_METHOD_PREFIX + name, Tab.noType);
		} 
				
		Struct methodType = isVoidMethod ? Tab.noType : currentType;
		return insertToTable(SYMBOL_TYPE.METHOD, name, methodType, line);	
	}
	
	private Obj addProgramToSymbolTable(String name, int line) {
		return insertToTable(SYMBOL_TYPE.PROGRAM, name, Tab.noType, line);
	}
	
	private Obj addClassTypeToSymbolTable(String name, int line) {
		return insertToTable(SYMBOL_TYPE.CLASS, name, new Struct(Struct.Class), line);
	}
	
	private Obj insertToTable(SYMBOL_TYPE symbolType, String name, Struct currentObjectType, int line) {
		int objectKind;
		String message;
		
		switch (symbolType) {
			case CONSTANT:
				objectKind = Obj.Con;
				message = "added constant \"" + name + "\" to symbol table.";
				break;
				
			case VARIABLE:
				objectKind = parser.isClassContext && !parser.isMethodContext ? Obj.Fld : Obj.Var;
				message = "added " + parser.getContextStringForDeclaration() + " variable \"" + name + "\" to symbol table.";
				break;
				
			case ARRAY:
				objectKind = parser.isClassContext && !parser.isMethodContext ? Obj.Fld : Obj.Var;
				message = "added " + parser.getContextStringForDeclaration() + " array variable \"" + name + "\" to symbol table.";
				currentObjectType = new Struct(Struct.Array, currentType);
				break;
				
			case METHOD:
				objectKind = Obj.Meth;
				String staticString = parser.isStaticContext ? "static" : "";
				message = "added " + staticString + " method \"" + name + "\" to symbol table.";
				break;
				
			case PROGRAM:
				objectKind = Obj.Prog;
				message = "added program \"" + name + "\" to symbol table.";
				break;
				
			case CLASS:
				objectKind = Obj.Type;
				message = "added class type \"" + name + "\" to symbol table.";
				break;
				
			default:
				objectKind = Obj.NO_VALUE;
				message = "UNKNOWN SYMBOL TYPE";
				parser.semantic_error(message, line);
				break;
		}
		
		// Insert object to table.
		Obj createdObject = Tab.insert(objectKind, name, currentObjectType);
				
		// Create object node string.
		parser.log_symbol_detected(createdObject, message, line);
		
		if(parser.isClassContext && symbolType != SYMBOL_TYPE.CLASS) {
			ChainClassScope();
		}
		
		return createdObject;
	}
	
	// Code generation
	private void generatePrintCall(Struct printingType, int line) {
		if(printingType != Tab.intType && printingType != Tab.charType) { 
			parser.code_generation_error("only char and int types can be printed.", line);
		}
		
		// It is assumed that the thing we're printing is already on stack (ie. Factor ::= is responsible for that)
		
		if (printingType == Tab.intType) {
			// Load message length.
	  	 	Code.loadConst(5);
	  	 	// Set code.
	  	 	Code.put(Code.print);
	  	}
	  	 
	  	if (printingType == Tab.charType) {
	  		// Load message length.
	  		Code.loadConst(1);
	  		// Set code.
	  	 	Code.put(Code.bprint);
	  	}
	}
	
	private void generateReadCall(Obj designatorObject) {
		Code.put(designatorObject.getType() == Tab.charType ? Code.bread : Code.read);
  	 	Code.store(designatorObject);
	}
	
	private void generateMethodStart(int localVarsNumber) {
		parser.currentMethodObject.setAdr(Code.pc);
   		if (parser.isMainMethod()) {
   			Code.mainPc = parser.currentMethodObject.getAdr();
   		}
   		Code.put(Code.enter);
   		Code.put(parser.currentMethodObject.getLevel());
   		Code.put(localVarsNumber);
	}
	
	private void generateMethodEnd() {
		if (parser.currentMethodObject.getType() == Tab.noType) {
			Code.put(Code.exit);
			Code.put(Code.return_);
		} else {
			// Set trap for runtime error if return is skipped in non-void method.
			Code.put(Code.trap);
			Code.put(1);
		} 
	}
	
	// If method is called as designator statement, we have to pop return result so it's not left on stack and nobody uses it.
	private void generateMethodCall(Obj functionObject, boolean popResult) {
		int destAdr = functionObject.getAdr() - Code.pc;
   	    Code.put(Code.call);
   	    Code.put2(destAdr);
   	    if (popResult && functionObject.getType() != Tab.noType) {
    		Code.put(Code.pop);
		}
	}
	
	// Used in expressions like "method(a += 3)".
	private void generateRightOperationForExpression(Obj destinationObject, int operationCode) {
		// Do the operation.
		Code.put(operationCode);
		// Store value.
		Code.store(destinationObject);
		// Push it back to stack so others can use it.
		Code.load(destinationObject);
	}
	
	// Used in designator statements like "a = 3;" or "a *= 5;".
	private void generateAssignOperation(Obj destinationObject, int operationCode) {
		// Check if "+=" or "*=" is called.
		if(operationCode > 0) {
			// Push operation. That will leave result on stack for upcoming expression to pick it up.
			Code.put(operationCode);
		}
		// Expr already set everything we need on stack. Just put to designator.
		Code.store(destinationObject);
	}
	
	// Used when instantiating arrays and class instances.
	private void generateInstantiationCode(Obj arrayObject) {
		boolean isArray = arrayObject != null && arrayObject != Tab.noObj;
		
		if(isArray) {
			Code.put(Code.newarray);
			Code.put(1); // So array is instantiated as array of words (32bytes)
		} else {
			Code.put(Code.new_);
	   		Code.put2(currentType.getNumberOfFields());
		}
	}
	
	private void generateIncrementDecrement(Obj designatorObject, int operationCode) {
		// Load designator object.
		Code.load(designatorObject);
		// Put 1 on stack to prepare it for operation.
		Code.loadConst(1);
		// Put operation code.
		Code.put(operationCode);
		// Store value.
		Code.store(designatorObject);
	}
	
	// Used when "+=" or "*=" are used.
	private void duplicateStackValuesIfNeeded(Obj designatorObject, int operationCode, boolean isForExpression) {
		// We have to load designatorObject as first parameter of the "+=" or "*=" expressions so we can use them for operation.
		// We do it here because of the case when designatorObject is array element and in order to load properly it needs
		// array address and index on stack.
		// We also have to copy last two things from stack (adress and index value) so we can use them for astore and aload.
		if(operationCode > 0) {
			if(designatorObject.getKind() == Obj.Elem) {
				if(isForExpression) {
					// Factor has added Code.load here, but if we are using this array for expression that load is extra and should be removed
					// because it will affect address and index value which are on stack.
					Code.pc--;
				}
				// Duplicate address and index value because we will need it for astore later.
				Code.put(Code.dup2);
				
				if(isForExpression) {
					// In expression, after operation is done, we want to leave result on stack as well for others to take it.
					// We have to prepare address and index value for that as well.
					Code.put(Code.dup2);
				}
			}
			// First push designator to stack so we can do operation on it.
			Code.load(designatorObject);
		}
	}
	
	private void generateJumpForFailure(int operationCode) {
		Code.putFalseJump(operationCode, 0);
		// Store fixup address.
 		failedConditionsFixupAddresses.push(Code.pc - 2);
	}
	
	private void generateJumpForSuccess() {
		// Dummy address. Will be filled later from succeededConditionsFixupAddresses.
		Code.putJump(0);
		// Store fixup address.
		succeededConditionsFixupAddresses.push(Code.pc - 2);
	}
	
	// Used for jumping for successful if branch (to skip unnecessary else) and for jumping back to condition check in for loop.
	private int generateUnconditionalJump() {
		// Dummy address. Will be filled later.
		Code.putJump(0);
		// Store fixup address.
		return Code.pc - 2;
	}
		
	// Fixes up single passed address. This will update jump address for fixupAddress to be location where this method is called.
	private void generateJumpFixup(int fixupAddress) {
		Code.fixup(fixupAddress);
	}
	
	// Fixes up all jumps for passed addresses.
	private void generateJumpFixupAll(Stack<Integer> fixupAddresses) {
		int stackSize = fixupAddresses.size();
		for(int i = 0; i < stackSize; i++) {
			Code.fixup(fixupAddresses.pop());
		}
	}

	// Remember bug with "if(bla) break;" inside the for loop. That was because forLoopViolentExitFixupStack was cleared becasuse of that if.
	private void InitiateFixupForLoop() {
		forLoopEndStatementFixupStack.push(forLoopLastStatementSkipFixupAddress);
		forLoopContentFixupStack.push(forLoopLastStatementFixupAddress);
		forLoopViolentExitFixupStack.push(forLoopViolentExitFixupAddress);
		
		InitiateFixupStacksForNewLevel();
	}
	
	// Used for tracking jump addresses in nested ifs and fors.
	private void InitiateFixupStacksForNewLevel() {
		succeededFixupStacks.push(succeededConditionsFixupAddresses);
		succeededConditionsFixupAddresses = new Stack<Integer>();
		
		failedFixupStacks.push(failedConditionsFixupAddresses);
		failedConditionsFixupAddresses = new Stack<Integer>();
		
		branchExitFixupStack.push(branchExitFixupAddress);	
	}
	
	private void ReleaseFixupForLoop() {
		if(succeededFixupStacks.size() > 1 && failedFixupStacks.size() > 1) {
			forLoopLastStatementSkipFixupAddress = forLoopEndStatementFixupStack.pop();
			forLoopLastStatementFixupAddress = forLoopContentFixupStack.pop();
			forLoopViolentExitFixupAddress = forLoopViolentExitFixupStack.pop();
		} else {
			forLoopLastStatementSkipFixupAddress = 0;
			forLoopLastStatementFixupAddress = 0;
			forLoopViolentExitFixupAddress = 0;
			
			forLoopEndStatementFixupStack.clear();
			forLoopContentFixupStack.clear();
			forLoopViolentExitFixupStack.clear();
		}
		
		ReleaseFixupStacksForLevel();
	}
	
	// When if or for is finished we need to clear fixup addresses stacks.
	private void ReleaseFixupStacksForLevel() {
		if(succeededFixupStacks.size() > 1 && failedFixupStacks.size() > 1) {
			succeededConditionsFixupAddresses = succeededFixupStacks.pop();
			failedConditionsFixupAddresses = failedFixupStacks.pop();  
			branchExitFixupAddress = branchExitFixupStack.pop();
		} else {
			// It's last if, clear everything.
			succeededConditionsFixupAddresses = null;
			failedConditionsFixupAddresses = null;
			branchExitFixupAddress = 0;
			
			succeededFixupStacks.clear();
			failedFixupStacks.clear();
			branchExitFixupStack.clear();
		}
	}

  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // MulOpRight ::= MODULATE_EQUALS 
            {
              Integer RESULT =null;
		 RESULT = Code.rem; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOpRight",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // MulOpRight ::= DIVIDE_EQUALS 
            {
              Integer RESULT =null;
		 RESULT = Code.div; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOpRight",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // MulOpRight ::= MULTIPLY_EQUALS 
            {
              Integer RESULT =null;
		 RESULT = Code.mul; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOpRight",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // MulOpLeft ::= MODULATE 
            {
              Integer RESULT =null;
		 RESULT = Code.rem; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOpLeft",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // MulOpLeft ::= DIVIDE 
            {
              Integer RESULT =null;
		 RESULT = Code.div; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOpLeft",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // MulOpLeft ::= MULTIPLY 
            {
              Integer RESULT =null;
		 RESULT = Code.mul; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOpLeft",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // AddOpRight ::= MINUS_EQUALS 
            {
              Integer RESULT =null;
		 RESULT = Code.sub; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddOpRight",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // AddOpRight ::= PLUS_EQUALS 
            {
              Integer RESULT =null;
		 RESULT = Code.add; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddOpRight",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // AddOpLeft ::= MINUS 
            {
              Integer RESULT =null;
		 RESULT = Code.sub; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddOpLeft",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // AddOpLeft ::= PLUS 
            {
              Integer RESULT =null;
		 RESULT = Code.add; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddOpLeft",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Negation ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Negation",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Negation ::= MINUS 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Negation",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // AssignOp ::= MulOpRight 
            {
              Integer RESULT =null;
		int operationCodeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int operationCoderight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer operationCode = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = operationCode; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignOp",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // AssignOp ::= AddOpRight 
            {
              Integer RESULT =null;
		int operationCodeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int operationCoderight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer operationCode = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = operationCode; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignOp",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // AssignOp ::= EQUALS 
            {
              Integer RESULT =null;
		 RESULT = -1; // We won't do anything when this is set. 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignOp",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // NewArrayType ::= 
            {
              Obj RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NewArrayType",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // NewArrayType ::= L_INDEXER Expr R_INDEXER 
            {
              Obj RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj exp = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT = isIndexingTypeValid(exp.getType(), expleft) ? new Obj(Obj.NO_VALUE, "", new Struct(Struct.Array, currentType)) : Tab.noObj; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NewArrayType",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ActParsListOptional ::= 
            {
              Stack<Struct> RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsListOptional",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ActParsListOptional ::= L_PAREN ActParsList R_PAREN 
            {
              Stack<Struct> RESULT =null;
		int parsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int parsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Stack<Struct> pars = (Stack<Struct>)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT = pars; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsListOptional",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Factor ::= L_PAREN Expr R_PAREN 
            {
              Obj RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj exp = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT = new Obj(Obj.NO_VALUE, "", exp.getType()); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Factor ::= NEW Type NewArrayType 
            {
              Obj RESULT =null;
		int typeObjectleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int typeObjectright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj typeObject = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int arrayObjectleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int arrayObjectright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj arrayObject = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
		   		generateInstantiationCode(arrayObject);
				RESULT = instantiateNewObject(typeObject, arrayObject, arrayObjectleft);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Factor ::= OneConst 
            {
              Obj RESULT =null;
		int constantleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj constant = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = constant; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Factor ::= Designator ActParsListOptional 
            {
              Obj RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Stack<Struct> params = (Stack<Struct>)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				Obj result = Tab.noObj;
				if(params == null && isObjectVariable(des, desleft))
				{
					// Designator is variable.
					result = des;
					Code.load(result);
				} else if(params != null && isObjectMethod(des, desleft) && hasMethodAppropriateParams(des, params, desleft)) {
					// Designator is method.
					generateMethodCall(des, false);
					result = des;
				}
				RESULT = result;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Term ::= Factor 
            {
              Obj RESULT =null;
		int facleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj fac = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = fac; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Term ::= Factor NT$25 MulOpRight NT$26 Term 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int facleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int facright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj fac = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int operationCodeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int operationCoderight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer operationCode = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj term = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					generateRightOperationForExpression(fac, operationCode);
					RESULT = isAssignableToInt(fac, facleft) && isInteger(term.getType(), termleft) ? fac : Tab.noObj; 
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // NT$26 ::= 
            {
              Obj RESULT =(Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int facleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int facright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj fac = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int operationCodeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int operationCoderight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer operationCode = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

					duplicateStackValuesIfNeeded(fac, operationCode, true);
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$26",81, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // NT$25 ::= 
            {
              Obj RESULT =null;
		int facleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj fac = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 checkRightOperatorUsageAvailability(facleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$25",80, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Term ::= Factor MulOpLeft NT$24 Term 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int facleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int facright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj fac = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int operationCodeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int operationCoderight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer operationCode = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj term = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					Code.put(operationCode);
					RESULT = isInteger(fac.getType(), facleft) && isInteger(term.getType(), termleft) ? fac : Tab.noObj;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // NT$24 ::= 
            {
              Obj RESULT =null;
		int facleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int facright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj fac = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int operationCodeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int operationCoderight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer operationCode = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 hasUsedLeftOperator = true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$24",79, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // TermList ::= Term NT$22 AddOpRight NT$23 TermList 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj term = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int operationCodeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int operationCoderight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer operationCode = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int termListleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termListright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj termList = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
					generateRightOperationForExpression(term, operationCode);// Do the operation.
					RESULT = isAssignableToInt(term, termleft) && isInteger(termList.getType(), termListleft) ? term : Tab.noObj;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TermList",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NT$23 ::= 
            {
              Obj RESULT =(Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj term = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int operationCodeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int operationCoderight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer operationCode = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

					duplicateStackValuesIfNeeded(term, operationCode, true);
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$23",78, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // NT$22 ::= 
            {
              Obj RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj term = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 checkRightOperatorUsageAvailability(termleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$22",77, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // TermList ::= Term AddOpLeft NT$21 TermList 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj term = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int operationCodeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int operationCoderight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer operationCode = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int termListleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termListright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj termList = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
					Code.put(operationCode);
					RESULT = isInteger(term.getType(), termleft) && isInteger(termList.getType(), termListleft) ? term : Tab.noObj;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TermList",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NT$21 ::= 
            {
              Obj RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj term = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int operationCodeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int operationCoderight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer operationCode = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 hasUsedLeftOperator = true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$21",76, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // TermList ::= Term 
            {
              Obj RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj term = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = term; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TermList",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Expr ::= Negation TermList 
            {
              Obj RESULT =null;
		int isNegatedleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int isNegatedright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Boolean isNegated = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int termListleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termListright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj termList = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				if(isNegated) {
					// This will negate value and leave it on stack.
					Code.put(Code.neg);
				}
				hasUsedLeftOperator = false;
				RESULT = termList; 
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ActPars ::= Expr 
            {
              Stack<Struct> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj exp = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				Stack<Struct> actualParamsStack = new Stack<Struct>();
				actualParamsStack.push(exp.getType());
				RESULT = actualParamsStack;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ActPars ::= Expr COMMA ActPars 
            {
              Stack<Struct> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj exp = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int parsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int parsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Stack<Struct> pars = (Stack<Struct>)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				pars.push(exp.getType());
				RESULT = pars; 
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ActParsList ::= 
            {
              Stack<Struct> RESULT =null;
		 RESULT =  new Stack<Struct>(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsList",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ActParsList ::= error 
            {
              Stack<Struct> RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.PARAMETERS, "(1)"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsList",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ActParsList ::= ActPars 
            {
              Stack<Struct> RESULT =null;
		int parsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int parsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Stack<Struct> pars = (Stack<Struct>)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = pars; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsList",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Designator ::= Designator L_INDEXER error R_INDEXER 
            {
              Obj RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.INDEXING, "(1)"); RESULT = Tab.noObj; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Designator ::= Designator L_INDEXER NT$20 Expr R_INDEXER 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj exp = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
					boolean isArrayAndHasValidIndexingType = isIndexingTypeValid(exp.getType(), expleft) && isObjectArray(des, desleft);  
					
					Obj result = Tab.noObj;
					if (isArrayAndHasValidIndexingType) {
						result = new Obj(Obj.Elem, "", des.getType().getElemType());
						parser.usage_info(des, "element of array \"" + des.getName() + "\" used.", desleft);
					}
					
					RESULT = result;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NT$20 ::= 
            {
              Obj RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
 Code.load(des); // When loading array (Run.aload) we need address of the array (des) pushed on stack before the index (exp). 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$20",75, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Designator ::= Designator DOT IDENT 
            {
              Obj RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					if(des.getKind() != Obj.Type) {
						Code.load(des); // Prepare for put/set field which requires address and value to be on stack.
					}
					Obj result = findClassMemberWithName(des, identifier, false, identifierleft);
					
					// If identifier is a method, we will store designator object as "this" so we can use it in methods later. 
					if(result.getKind() == Obj.Meth) {
						parser.thisObject = des;
					}
					
					RESULT = result;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Designator ::= THIS DOT IDENT 
            {
              Obj RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					Obj result = isThisAvailable(identifier, identifierleft) 
								? findClassMemberWithName(parser.currentClass, identifier, true, identifierleft)
								: Tab.noObj;
					
					Code.load(parser.thisObject); // Prepare for put/set field which requires address and value to be on stack.
					RESULT = result;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Designator ::= IDENT 
            {
              Obj RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
					Obj result = findObjectWithName(identifier, identifierleft);
					if(result.getKind() == Obj.Fld) {
	   		  	    	Code.load(parser.thisObject); // Prepare for put/set field which requires address and value to be on stack.
	   		  	    }
					RESULT = result;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // DesignatorStatement ::= Designator DECREMENT 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 
							isAssignableToInt(des, desleft);
							generateIncrementDecrement(des, Code.sub);
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // DesignatorStatement ::= Designator INCREMENT 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 
							isAssignableToInt(des, desleft);
							generateIncrementDecrement(des, Code.add);
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DesignatorStatement ::= Designator L_PAREN ActParsList R_PAREN 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Stack<Struct> params = (Stack<Struct>)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 
							if(parser.isMainMethod()) {
								parser.mainMethodFunctionCallsCount++;
							}
							
							isObjectMethod(des, desleft);
							hasMethodAppropriateParams(des, params, desleft);
							
							generateMethodCall(des, true);
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DesignatorStatement ::= Designator AssignOp error 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.ASSIGN, "(1)"); RESULT = Tab.noType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // DesignatorStatement ::= Designator AssignOp NT$19 Expr 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int operationCodeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int operationCoderight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer operationCode = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj exp = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
							areCompatibleTypes(des, exp, true, expleft);
							generateAssignOperation(des, operationCode);
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$19 ::= 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int operationCodeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int operationCoderight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer operationCode = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 duplicateStackValuesIfNeeded(des, operationCode, false); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$19",74, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // RelOp ::= LESS_EQUAL 
            {
              Integer RESULT =null;
		 isClassAndArrayCompatibleRelOp = false; RESULT = Code.le; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelOp",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // RelOp ::= LESS 
            {
              Integer RESULT =null;
		 isClassAndArrayCompatibleRelOp = false; RESULT = Code.lt; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelOp",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // RelOp ::= GREATER_EQUAL 
            {
              Integer RESULT =null;
		 isClassAndArrayCompatibleRelOp = false; RESULT = Code.ge; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelOp",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // RelOp ::= GREATER 
            {
              Integer RESULT =null;
		 isClassAndArrayCompatibleRelOp = false; RESULT = Code.gt; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelOp",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // RelOp ::= NOT_EQUAL 
            {
              Integer RESULT =null;
		 isClassAndArrayCompatibleRelOp = true; RESULT = Code.ne; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelOp",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // RelOp ::= EQUALITY 
            {
              Integer RESULT =null;
		 isClassAndArrayCompatibleRelOp = true; RESULT = Code.eq; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelOp",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CondFact ::= Expr RelOp Expr 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj exp1 = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int operationCodeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int operationCoderight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer operationCode = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj exp2 = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
					boolean isOk = isRelOpCompatible(exp1.getType(), exp2.getType(), exp1left);
					RESULT = operationCode;
					generateJumpForFailure(operationCode);
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CondFact ::= Expr 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj exp = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					if(exp.getType() != boolType) {
						parser.semantic_error("expression in condition must be of boolean type.", expleft);
					}
					Code.loadConst(0);
		 	 		generateJumpForFailure(Code.ne);
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CondTerm ::= CondFact AND CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CondTerm ::= CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Condition ::= CondTerm NT$17 OR NT$18 Condition 
            {
              Integer RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Integer) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$18 ::= 
            {
              Integer RESULT =(Integer) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

					// Fixup everything we have so far.
					// For example if we have condition "a && b || c",
					// both "a" and "b" should have it's jump fixup right in front of "c" because "c" can still fulfill condition.
					// In general whenever we have "||" we fixup all previous conditions and add a new false jump (done implicitly in CondFact).
					// Last condition statement's jump fixup will for sure be in else branch. 
					generateJumpFixupAll(failedConditionsFixupAddresses);
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$18",73, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$17 ::= 
            {
              Integer RESULT =null;

					// If code gets here, that means that previous condition term met it's condition.
					// Remember that CondFact already generated jump for failure, we now have to set jump for success.
					// This must be done if we have something like "a || b && c". If "a" is met, succeed immediately.
					generateJumpForSuccess();
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$17",72, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Condition ::= CondTerm 
            {
              Integer RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ConditionHelper ::= Condition 
            {
              Object RESULT =null;
		 generateJumpFixupAll(succeededConditionsFixupAddresses); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionHelper",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OptionalCondition ::= error 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.FOR, "(2)"); RESULT = Tab.noObj; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptionalCondition",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OptionalCondition ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptionalCondition",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OptionalCondition ::= Condition 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptionalCondition",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // IfStatement ::= IF L_PAREN error R_PAREN Statement ELSE Statement 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.IF, "(2)"); RESULT = Tab.noObj; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IfStatement",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // IfStatement ::= IF L_PAREN ConditionHelper R_PAREN Statement ELSE NT$16 Statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 generateJumpFixup(branchExitFixupAddress); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IfStatement",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$16 ::= 
            {
              Object RESULT =null;
 branchExitFixupAddress = generateUnconditionalJump();  generateJumpFixupAll(failedConditionsFixupAddresses); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$16",71, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // IfStatement ::= IF L_PAREN error R_PAREN Statement 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.IF, "(1)"); RESULT = Tab.noObj; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IfStatement",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // IfStatement ::= IF L_PAREN ConditionHelper R_PAREN Statement 
            {
              Object RESULT =null;
		 generateJumpFixupAll(failedConditionsFixupAddresses); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IfStatement",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OptionalDesignatorStatement ::= error 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.FOR, "(1)"); RESULT = Tab.noObj; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptionalDesignatorStatement",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OptionalDesignatorStatement ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptionalDesignatorStatement",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OptionalDesignatorStatement ::= DesignatorStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptionalDesignatorStatement",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ForStatement ::= FOR L_PAREN OptionalDesignatorStatement SEMI NT$12 OptionalCondition SEMI NT$13 OptionalDesignatorStatement NT$14 R_PAREN NT$15 Statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 
					Code.putJump(forLoopLastStatementFixupAddress); // Jump back to last statement.
					// This will be destination for condition failure, that means we won't go back to test condition again.
					generateJumpFixupAll(failedConditionsFixupAddresses);
					if(forLoopViolentExitFixupAddress > 0) {
						generateJumpFixup(forLoopViolentExitFixupAddress); // Fixup address so break knows where to jump out.
					}
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForStatement",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$15 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
	generateJumpFixup(forLoopLastStatementSkipFixupAddress); // We now know address of the statements blok, so we update it. 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$15",70, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$14 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
 Code.putJump(branchExitFixupAddress); // Jump back to condition statement. 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$14",69, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$13 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
 
					forLoopLastStatementSkipFixupAddress = generateUnconditionalJump(); // Put dummy jump, we will populate address later. This is done to skip last statement.
					forLoopLastStatementFixupAddress = Code.pc; // Save address of where last statement is so we can get back to it.
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$13",68, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$12 ::= 
            {
              Object RESULT =null;
 branchExitFixupAddress = Code.pc; // Save address of where condition is so we can get back to it. 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$12",67, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Return ::= RETURN Expr SEMI 
            {
              Struct RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj expr = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				if(isVoidMethod) {
					parser.semantic_error("void methods shouldn't return a type.", exprleft);
				} else if(!areCompatibleTypes(parser.currentMethodObject, expr, false, exprleft)) {
						parser.semantic_error("tried to return wrong value type.", exprleft);
				}
				doesReturnExist = true;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Return",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Return ::= RETURN SEMI 
            {
              Struct RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
				if(!isVoidMethod) {
					parser.semantic_error("non-void method must return a type.", sleft);
				}
				doesReturnExist = true;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Return",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NumbersList ::= NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NumbersList",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NumbersList ::= NumbersList COMMA NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NumbersList",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NumbersListOptional ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NumbersListOptional",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NumbersListOptional ::= COMMA NumbersList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NumbersListOptional",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // StatementsList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementsList",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // StatementsList ::= StatementsList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementsList",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Statement ::= L_BRACE StatementsList R_BRACE 
            {
              Object RESULT =null;
		 parser.statementsBlockCount++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Statement ::= PRINT L_PAREN Expr NumbersListOptional R_PAREN SEMI 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj expr = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		 
					boolean isOk = isPrimitiveType(expr, exprleft);
					generatePrintCall(expr.getType(), exprleft); 
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Statement ::= READ L_PAREN Designator R_PAREN SEMI 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 
					boolean isOk = canBeAssignedTo(des, desleft) && isPrimitiveType(des, desleft); 
					generateReadCall(des);
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Statement ::= Return 
            {
              Object RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int retright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct ret = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					if(!parser.isMethodContext) {
						parser.semantic_error("return can be used only in methods.", retleft);
					}
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Statement ::= CONTINUE SEMI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
					breakContinueCheck(sleft);
					Code.putJump(forLoopLastStatementFixupAddress); // Jump back to last loop statement.
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Statement ::= BREAK SEMI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
					breakContinueCheck(sleft);
					forLoopViolentExitFixupAddress = generateUnconditionalJump(); // Jump to loop exit. 
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Statement ::= NT$11 ForStatement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
					ReleaseFixupForLoop();
					parser.isForContext = !forLoopViolentExitFixupStack.empty(); // Check if we are in nested for context. 
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$11 ::= 
            {
              Object RESULT =null;
 
					InitiateFixupForLoop();
					parser.isForContext = true;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$11",66, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Statement ::= NT$10 IfStatement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 ReleaseFixupStacksForLevel(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$10 ::= 
            {
              Object RESULT =null;
 InitiateFixupStacksForNewLevel(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$10",65, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Statement ::= DesignatorStatement SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FormParsList ::= Type OneVar 
            {
              Integer RESULT =null;
		
						parser.functionFormParsCount++;
						RESULT = 1; 
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsList",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FormParsList ::= FormParsList COMMA Type OneVar 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		 
						parser.functionFormParsCount++;
						RESULT = n + 1;
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsList",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FormPars ::= error 
            {
              Integer RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.FORMAL_PARAMETERS, "(1)"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FormPars ::= 
            {
              Integer RESULT =null;
		 RESULT = 0; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FormPars ::= NT$9 FormParsList 
            {
              Integer RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Integer) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int numOfElementsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int numOfElementsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer numOfElements = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					parser.isFormalParametersContext = false; // Starting form pars context
					RESULT = numOfElements; 
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$9 ::= 
            {
              Integer RESULT =null;
 parser.isFormalParametersContext = true; // Starting form pars context 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$9",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VoidType ::= VOID 
            {
              Object RESULT =null;
		 isVoidMethod = true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VoidType",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VoidType ::= Type 
            {
              Object RESULT =null;
		 isVoidMethod = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VoidType",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // StaticDeclarator ::= 
            {
              Object RESULT =null;
		 parser.isStaticContext = false; // Closing static context 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StaticDeclarator",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // StaticDeclarator ::= STATIC 
            {
              Object RESULT =null;
		 parser.isStaticContext = true; // Starting static context 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StaticDeclarator",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // MethodName ::= IDENT 
            {
              Obj RESULT =null;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					parser.currentMethodObject = addMethodToSymbolTable(methodName, methodNameleft);
					RESULT = parser.currentMethodObject; 
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodName",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // MethodDecl ::= NT$5 StaticDeclarator VoidType MethodName OpenScope L_PAREN FormPars R_PAREN NT$6 VarsList L_BRACE NT$7 StatementsList R_BRACE NT$8 CloseScope 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int metleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)).right;
		Obj met = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)).value;
		int numOfParsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left;
		int numOfParsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).right;
		Integer numOfPars = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-15)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int metleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).right;
		Obj met = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).value;
		int numOfParsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int numOfParsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		Integer numOfPars = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

					if(!isVoidMethod && !doesReturnExist) {
						parser.semantic_error("non-void method must have return.", rleft);
					} 
					parser.currentMethodObject = Tab.noObj;
					parser.incrementMethodsCount();
					parser.isMethodContext = false; // Closing method context
					doesReturnExist = false;
					numberOfFormalParameters = 0;
					
					generateMethodEnd();
					
					Tab.chainLocalSymbols(met); 
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$8",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int metleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		Obj met = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int numOfParsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int numOfParsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Integer numOfPars = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
 
					Tab.chainLocalSymbols(met); 
					generateMethodStart(Tab.currentScope().getnVars() - numberOfFormalParameters);
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$7",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int metleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj met = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int numOfParsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int numOfParsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer numOfPars = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
 
					met.setLevel(numOfPars);
					Tab.chainLocalSymbols(met); // Hack to enable recursion and to enable distinguish formal parameter from local var. 
					numberOfFormalParameters = Tab.currentScope().getnVars();
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$6",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$5 ::= 
            {
              Object RESULT =null;
 parser.isMethodContext = true; // Starting method context 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$5",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MethodsList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodsList",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MethodsList ::= MethodsList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodsList",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MethodsSection ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodsSection",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // MethodsSection ::= L_BRACE MethodsList R_BRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodsSection",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VarsList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarsList",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VarsList ::= VarsList VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarsList",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ClassExtender ::= 
            {
              Obj RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassExtender",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ClassExtender ::= error 
            {
              Obj RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.EXTENDS, "(1)"); RESULT = Tab.noObj; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassExtender",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ClassExtender ::= EXTENDS Type 
            {
              Obj RESULT =null;
		int parentClassObjectleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int parentClassObjectright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj parentClassObject = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
						isClassExtensionValid(parentClassObject.getType(), parentClassObjectleft);
						RESULT = parentClassObject; 
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassExtender",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ClassName ::= IDENT 
            {
              Struct RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
					parser.currentClass = addClassTypeToSymbolTable(className, classNameleft);
					Tab.openScope();
					parser.currentClassScope = Tab.currentScope();
					// Set dummy var so we can track all parents.
					addClassCompatibilityVar(className);
					
					ChainClassScope();
					RESULT = parser.currentClass.getType();
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassName",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ClassDecl ::= CLASS ClassName ClassExtender NT$3 L_BRACE VarsList MethodsSection R_BRACE NT$4 CloseScope 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		Struct c = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
		int parentClassObjectleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int parentClassObjectright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		Obj parentClassObject = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		Struct c = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int parentClassObjectleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int parentClassObjectright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Obj parentClassObject = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
 
					parser.currentClass = Tab.noObj;
					parser.currentClassScope = null;
					Tab.chainLocalSymbols(c);
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$4",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$3 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct c = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int parentClassObjectleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int parentClassObjectright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj parentClassObject = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

					if(parentClassObject != null) {
						// Set dummy var so we can track all parents.
						addClassCompatibilityVar(parentClassObject.getName());
					
						// Add all parent class members.
						for(Obj member : parentClassObject.getType().getMembers()) {
							if(member.getName().startsWith(CLASS_COMPATIBILITY_PREFIX)) { 
								addClassCompatibilityVar(member.getName().substring(CLASS_COMPATIBILITY_PREFIX.length()));
							} else {
								Obj copiedObj = Tab.insert(member.getKind(), SUPER_DOT + member.getName(), member.getType());
								copiedObj.setAdr(member.getAdr());
							}
						}
					}
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Type ::= IDENT 
            {
              Obj RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
				Obj typeNode = Tab.find(typeName);
				if (typeNode == Tab.noObj) {
					parser.semantic_error("type \"" + typeName + "\" not found in symbol table.", typeNameleft);
					RESULT = Tab.noObj;
					currentType = Tab.noType;
				}
				else {
					if (Obj.Type == typeNode.getKind()) {
						RESULT = typeNode;
						currentType = typeNode.getType();
					}
					else {
						parser.semantic_error("\"" + typeName + "\" is not a type.", typeNameleft);
						RESULT = Tab.noObj;
						currentType = Tab.noType;
					}
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OneVar ::= IDENT L_INDEXER R_INDEXER 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 
 				parser.incrementVarsCount(true);
 				addVariableToSymbolTable(varName, varNameleft, true); 
 			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OneVar",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OneVar ::= IDENT 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
				parser.incrementVarsCount(false); 
				addVariableToSymbolTable(varName, varNameleft, false);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OneVar",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VarsElementsList ::= error OneVar 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.VARIABLE, "(2)"); RESULT = Tab.noObj; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarsElementsList",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VarsElementsList ::= OneVar 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarsElementsList",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VarsElementsList ::= error COMMA OneVar 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.VARIABLE, "(1)"); RESULT = Tab.noObj; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarsElementsList",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VarsElementsList ::= VarsElementsList COMMA OneVar 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarsElementsList",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarDecl ::= Type error SEMI 
            {
              Object RESULT =null;
		 parser.trackSyntaxErrorRecovery(ERROR_CODE.VARIABLE, "(3)"); RESULT = Tab.noObj; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VarDecl ::= Type VarsElementsList SEMI 
            {
              Object RESULT =null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj varType = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OneConst ::= BOOL 
            {
              Obj RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean value = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					Obj boolObject = new Obj(Obj.Con, "", boolType);  
		 	    	boolObject.setAdr(value ? 1:0);
		 	    	Code.load(boolObject);
		 	    	RESULT = boolObject;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OneConst",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // OneConst ::= CHAR 
            {
              Obj RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character value = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					Obj charObject = new Obj(Obj.Con, "", Tab.charType);  
		 	    	charObject.setAdr(value);
		 	    	Code.load(charObject);
		 	    	RESULT = charObject;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OneConst",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // OneConst ::= NUMBER 
            {
              Obj RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					Obj numberObject = new Obj(Obj.Con, "", Tab.intType);  
 	    			numberObject.setAdr((int)value);
 	    			Code.load(numberObject);
 	    			RESULT = numberObject;
 	    		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OneConst",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ConstList ::= IDENT EQUALS OneConst 
            {
              Object RESULT =null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int currentConstObjectleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int currentConstObjectright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj currentConstObject = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
					parser.constantsCount++; // Counting constants
					addConstantToSymbolTable(constName, currentConstObject.getType(), currentConstObject, currentConstObjectleft);
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstList ::= ConstList COMMA IDENT EQUALS OneConst 
            {
              Object RESULT =null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int currentConstObjectleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int currentConstObjectright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj currentConstObject = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
					parser.constantsCount++; // Counting constants
					addConstantToSymbolTable(constName, currentConstObject.getType(), currentConstObject, currentConstObjectleft); 
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstDecl ::= CONST Type ConstList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ProgramElement ::= NT$2 ClassDecl 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 
					parser.isClassContext = false; // Closing class context
					parser.classDefinitionCount++; 
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramElement",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$2 ::= 
            {
              Object RESULT =null;
 parser.isClassContext = true; // Starting class context 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ProgramElement ::= VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramElement",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ProgramElement ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramElement",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ProgramElementsList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramElementsList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ProgramElementsList ::= ProgramElementsList ProgramElement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramElementsList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ProgName ::= IDENT 
            {
              Obj RESULT =null;
		int programNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int programNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String programName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = addProgramToSymbolTable(programName, programNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgName",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Program ::= PROG ProgName OpenScope ProgramElementsList L_BRACE NT$0 MethodsList R_BRACE NT$1 CloseScope 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
 
				Tab.chainLocalSymbols(p);
				Code.dataSize = Tab.currentScope().getnVars(); 
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
 parser.isGlobalContext = false; // Closing global context 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CloseScope ::= 
            {
              Object RESULT =null;
		 Tab.closeScope(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CloseScope",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // OpenScope ::= 
            {
              Object RESULT =null;
		 Tab.openScope(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OpenScope",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

